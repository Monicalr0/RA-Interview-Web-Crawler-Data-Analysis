Title,Description,Views,Votes,Answers
headless internet browser? [closed],"









                        As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, visit the help center for guidance.
                        
                    


Closed 10 years ago.



I would like to do the following. Log into a website, click a couple of specific links, then click a download link. I'd like to run this as either a scheduled task on windows or cron job on Linux. I'm not picky about the language I use, but I'd like this to run with out putting a browser window up on the screen if possible.
",70k,"
            71
        ","['\nHere are a list of headless browsers that I know about:\n\nHtmlUnit - Java. Custom browser engine. Limited JavaScript support/DOM emulated. Open source.\nGhost - Python only. WebKit-based. Full JavaScript support. Open source.\nTwill - Python/command line. Custom browser engine. No JavaScript. Open source.\nPhantomJS - Command line/all platforms. WebKit-based. Full JavaScript support. Open source.\nAwesomium - C++/.NET/all platforms. Chromium-based. Full JavaScript support. Commercial/free.\nSimpleBrowser - .NET 4/C#. Custom browser engine. No JavaScript support. Open source.\nZombieJS - Node.js. Custom browser engine. JavaScript support/emulated DOM. Open source. Based on jsdom.\nEnvJS - JavaScript via Java/Rhino. Custom browser engine. JavaScript support/emulated DOM. Open source.\nWatir-webdriver with headless gem - Ruby via WebDriver.  Full JS Support via Browsers (Firefox/Chrome/Safari/IE). \nSpynner - Python only.  PyQT and WebKit. \njsdom - Node.js. Custom browser engine. Supports JS via emulated DOM. Open source.\nTrifleJS - port of PhantomJS using MSIE (Trident) and V8. Open source.\nui4j - Pure Java 8 solution. A wrapper library around the JavaFx WebKit Engine incl. headless modes.\nChromium Embedded Framework - Full up-to-date embedded version of Chromium with off-screen rendering as needed. C/C++, with .NET wrappers (and other languages). As it is Chromium, it has support for everything. BSD licensed.\nSelenium WebDriver - Full support for JavaScript via browsers (Firefox, IE, Chrome, Safari, Opera). Officially supported bindings are C#, Java, JavaScript, Haskell, Perl, Ruby, PHP, Python, Objective-C, and R. Unofficial bindings are available for Qt and Go. Open source.\n\nHeadless browsers that have JavaScript support via an emulated DOM generally have issues with some sites that use more advanced/obscure browser features, or have functionality that has visual dependencies (e.g. via CSS positions and so forth), so whilst the pure JavaScript support in these browsers is generally complete, the actual supported browser functionality should be considered as partial only.\n(Note: Original version of this post only mentioned HtmlUnit, hence the comments. If you know of other headless browser implementations and have edit rights, feel free to edit this post and add them.)\n', ""\nCheck out twill, a very convenient scripting language for precisely what you're looking for. From the examples:\nsetlocal username <your username>\nsetlocal password <your password>\n\ngo http://www.slashdot.org/\nformvalue 1 unickname $username\nformvalue 1 upasswd $password\nsubmit\n\ncode 200     # make sure form submission is correct!\n\nThere's also a Python API if you're looking for more flexibility.\n"", '\nHave a look at PhantomJS, a JavaScript based automation framework available for Windows, Mac OS X, Linux, other *ix systems.\nUsing PhantomJS, you can do things like this:\nconsole.log(\'Loading a web page\');\n\nvar page = new WebPage();\nvar url = ""http://www.phantomjs.org/"";\n\npage.open(url, function (status) {\n    // perform your task once the page is ready ...\n    phantom.exit();\n});\n\nOr evaluate a page\'s title:\nvar page = require(\'webpage\').create();\npage.open(url, function (status) {\n    var title = page.evaluate(function () {\n        return document.title;\n    });\n    console.log(\'Page title is \' + title);\n});\n\nExamples from PhantomJS\' Quickstart page. You can even render a page to a PNG, JPEG or PDF using the render() method.\n', '\nI once did that using the Internet Explorer ActiveX control (WebBrowser, MSHTML). You can instantiate it without making it visible.\nThis can be done with any language which supports COM (Delphi, VB6, VB.net, C#, C++, ...)\nOf course this is a quick-and-dirty solution and might not be appropriate in your situation.\n', '\nPhantomJS is a headless WebKit-based browser that you can script with JavaScript.\n', '\nExcept for the auto-download of the file (as that is a dialog box) a win form with the embedded webcontrol will do this.\nYou could look at Watin and Watin Recorder. They may help with C# code that can login to your website, navigate to a URL and possibly even help automate the file download.\nYMMV though.\n', ""\nIf the links are known (e.g, you don't have to search the page for them), then you can probably use wget. I believe that it will do the state management across multiple fetches.\nIf you are a little more enterprising, then I would delve into the new goodies in Python 3.0. They redid the interface to their HTTP stack and, IMHO, have a very nice interface that is susceptible to this type of scripting.\n"", '\nNode.js with YUI on the server. Check out this video: http://www.yuiblog.com/blog/2010/09/29/video-glass-node/\nThe guy in this video Dav Glass shows an example of how he uses node to fetch a page from Digg. He then attached YUI to the DOM he grabbed and can completely manipulate it.\n', '\nIf you use PHP - try http://mink.behat.org/\n', '\nYou can use Watir with Ruby or Watin with mono.\n', ""\nAlso you can use Live Http Headers (Firefox extension) to record headers which are sent to site (Login -> Links -> Download Link) and then replicate them with php using fsockopen. Only thing which you'll probably need to variate is the cookie's value which you receive from login page. \n"", '\nlibCURL could be used to create something like this.\n', '\nCan you not just use a download manager?\nThere\'s better ones, but FlashGet has browser-integration, and supports authentication. You can login, click a bunch of links and queue them up and schedule the download.\nYou could write something that, say, acts as a proxy which catches specific links and queues them for later download, or a Javascript bookmarklet that modifies links to go to ""http://localhost:1234/download_queuer?url="" + $link.href and have that queue the downloads - but you\'d be reinventing the download-manager-wheel, and with authentication it can be more complicated..\nOr, if you want the ""login, click links"" bit to be automated also - look into screen-scraping.. Basically you load the page via a HTTP library, find the download links and download them..\nSlightly simplified example, using Python:\nimport urllib\nfrom BeautifulSoup import BeautifulSoup\nsrc = urllib.urlopen(""http://%s:%s@example.com"" % (""username"", ""password""))\nsoup = BeautifulSoup(src)\n\nfor link_tag in soup.findAll(""a""):\n    link = link_tag[""href""]\n    filename = link.split(""/"")[-1] # get everything after last /\n    urllib.urlretrieve(link, filename)\n\nThat would download every link on example.com, after authenticating with the username/password of ""username"" and ""password"". You could, of course, find more specific links using BeautifulSoup\'s HTML selector\'s (for example, you could find all links with the class ""download"", or URL\'s that start with http://cdn.example.com).\nYou could do the same in pretty much any language..\n', ""\n.NET contains System.Windows.Forms.WebBrowser.  You can create an instance of this, send it to a URL, and then easily parse the html on that page.  You could then follow any links you found, etc.  \nI have worked with this object only minimally, so I'm no expert, but if you're already familiar with .NET then it would probably be worth looking into.\n""]"
How can I login to a website with Python?,"
How can I do it? 
I was trying to enter some specified link (with urllib), but to do it, I need to log in.
I have this source from the site:
<form id=""login-form"" action=""auth/login"" method=""post"">
    <div>
    <!--label for=""rememberme"">Remember me</label><input type=""checkbox"" class=""remember"" checked=""checked"" name=""remember me"" /-->
    <label for=""email"" id=""email-label"" class=""no-js"">Email</label>
    <input id=""email-email"" type=""text"" name=""handle"" value="""" autocomplete=""off"" />
    <label for=""combination"" id=""combo-label"" class=""no-js"">Combination</label>
    <input id=""password-clear"" type=""text"" value=""Combination"" autocomplete=""off"" />
    <input id=""password-password"" type=""password"" name=""password"" value="""" autocomplete=""off"" />
    <input id=""sumbitLogin"" class=""signin"" type=""submit"" value=""Sign In"" />

Is this possible?
",372k,"
            105
        ","['\nMaybe you want to use twill. It\'s quite easy to use and should be able to do what you want.\nIt will look like the following:\nfrom twill.commands import *\ngo(\'http://example.org\')\n\nfv(""1"", ""email-email"", ""blabla.com"")\nfv(""1"", ""password-clear"", ""testpass"")\n\nsubmit(\'0\')\n\nYou can use showforms() to list all forms once you used go… to browse to the site you want to login. Just try it from the python interpreter.\n', '\nLet me try to make it simple, suppose URL of the site is www.example.com and you need to sign up by filling username and password, so we go to the login page say http://www.example.com/login.php now and view it\'s source code and search for the action URL it will be in form tag something like \n <form name=""loginform"" method=""post"" action=""userinfo.php"">\n\nnow take userinfo.php to make absolute URL which will be \'http://example.com/userinfo.php\', now run a simple python script \nimport requests\nurl = \'http://example.com/userinfo.php\'\nvalues = {\'username\': \'user\',\n          \'password\': \'pass\'}\n\nr = requests.post(url, data=values)\nprint r.content\n\nI Hope that this helps someone somewhere someday.\n', '\nTypically you\'ll need cookies to log into a site, which means cookielib, urllib and urllib2. Here\'s a class which I wrote back when I was playing Facebook web games:\nimport cookielib\nimport urllib\nimport urllib2\n\n# set these to whatever your fb account is\nfb_username = ""your@facebook.login""\nfb_password = ""secretpassword""\n\nclass WebGamePlayer(object):\n\n    def __init__(self, login, password):\n        """""" Start up... """"""\n        self.login = login\n        self.password = password\n\n        self.cj = cookielib.CookieJar()\n        self.opener = urllib2.build_opener(\n            urllib2.HTTPRedirectHandler(),\n            urllib2.HTTPHandler(debuglevel=0),\n            urllib2.HTTPSHandler(debuglevel=0),\n            urllib2.HTTPCookieProcessor(self.cj)\n        )\n        self.opener.addheaders = [\n            (\'User-agent\', (\'Mozilla/4.0 (compatible; MSIE 6.0; \'\n                           \'Windows NT 5.2; .NET CLR 1.1.4322)\'))\n        ]\n\n        # need this twice - once to set cookies, once to log in...\n        self.loginToFacebook()\n        self.loginToFacebook()\n\n    def loginToFacebook(self):\n        """"""\n        Handle login. This should populate our cookie jar.\n        """"""\n        login_data = urllib.urlencode({\n            \'email\' : self.login,\n            \'pass\' : self.password,\n        })\n        response = self.opener.open(""https://login.facebook.com/login.php"", login_data)\n        return \'\'.join(response.readlines())\n\nYou won\'t necessarily need the HTTPS or Redirect handlers, but they don\'t hurt, and it makes the opener much more robust. You also might not need cookies, but it\'s hard to tell just from the form that you\'ve posted. I suspect that you might, purely from the \'Remember me\' input that\'s been commented out.\n', '\nWeb page automation ? Definitely ""webbot""\nwebbot even works web pages which have dynamically changing id and classnames and has more methods and features than selenium or mechanize.\n\nHere\'s a snippet :)\n\nfrom webbot import Browser \nweb = Browser()\nweb.go_to(\'google.com\') \nweb.click(\'Sign in\')\nweb.type(\'mymail@gmail.com\' , into=\'Email\')\nweb.click(\'NEXT\' , tag=\'span\')\nweb.type(\'mypassword\' , into=\'Password\' , id=\'passwordFieldId\') # specific selection\nweb.click(\'NEXT\' , tag=\'span\') # you are logged in ^_^\n\nThe docs are also pretty straight forward and simple to  use : https://webbot.readthedocs.io\n', ""\nimport cookielib\nimport urllib\nimport urllib2\n\nurl = 'http://www.someserver.com/auth/login'\nvalues = {'email-email' : 'john@example.com',\n          'password-clear' : 'Combination',\n          'password-password' : 'mypassword' }\n\ndata = urllib.urlencode(values)\ncookies = cookielib.CookieJar()\n\nopener = urllib2.build_opener(\n    urllib2.HTTPRedirectHandler(),\n    urllib2.HTTPHandler(debuglevel=0),\n    urllib2.HTTPSHandler(debuglevel=0),\n    urllib2.HTTPCookieProcessor(cookies))\n\nresponse = opener.open(url, data)\nthe_page = response.read()\nhttp_headers = response.info()\n# The login cookies should be contained in the cookies variable\n\nFor more information visit: https://docs.python.org/2/library/urllib2.html\n"", '\nWebsites in general can check authorization in many different ways, but the one you\'re targeting seems to make it reasonably easy for you.\nAll you need is to POST to the auth/login URL a form-encoded blob with the various fields you see there (forget the labels for, they\'re decoration for human visitors).  handle=whatever&password-clear=pwd and so on, as long as you know the values for the handle (AKA email) and password you should be fine.\nPresumably that POST will redirect you to some ""you\'ve successfully logged in"" page with a Set-Cookie header validating your session (be sure to save that cookie and send it back on further interaction along the session!).\n', '\nFor HTTP things, the current choice should be: Requests- HTTP for Humans\n']"
Textbox events?,"
I am using Kantu to automate filling out some forms. There is a textbox that when a persons id number is entered and you click into another box or tab out of the textbox it will load that persons vcard. I can try to expound if you need more clarity. 
I don't know much but i'm guessing me clicking into another box is activiating some kind of event to load this vcard. I can't seem to simulate this. Does anyone know of a way to do so?
",341,"
            1
        ","[""\nWelcome to SO. There are different option to get the associated events.\nLet's take the stackoverflow search box (the one which is on the top with s-input js-search-field class)\n1) Using getEventListeners\nGo to chrome console in the dev tools and then use getEventListeners(element). \n\ngetEventListeners(document.querySelector('.s-input.js-search-field '))\n\n\n2) Using Dev Tools Event Listner\nGo to chrome dev tools and select the element for which you want to know the events, click on the Event Listeners tab on the right hand side pane.\n   \n3) Using the firefox event \nGoto dev tools in firefox and click on events bubble at the end of html element tag. \n    \n"", '\nSample of code\nI consulted with a friend who showed me the problem was an onblur event triggered by clicking away. \nThe solution to my problem was to call the event using the following line, \n{\n  ""Command"": ""storeEval"",\n  ""Target"": ""lawformTextBlur(document.getElementById(\'_f4\'))"",\n  ""Value"": """"\n},\n\n']"
element not interactable exception in selenium web automation,"
In the below code i cannot send password keys in the password field, i tried clicking the field, clearing the field and sending the keys. But now working in any of the method. But its working if i debug and test
  public class TestMail {
   protected static WebDriver driver;

   protected static String result;

   @BeforeClass

   public static void setup()  {
              System.setProperty(""webdriver.gecko.driver"",""D:\\geckodriver.exe"");

   driver = new FirefoxDriver();

   driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

  }

   @Test

 void Testcase1() {

   driver.get(""http://mail.google.com"");

   WebElement loginfield = driver.findElement(By.name(""Email""));
   if(loginfield.isDisplayed()){
       loginfield.sendKeys(""ragesh@gmail.in"");
   }
   else{
  WebElement newloginfield = driver.findElemnt(By.cssSelector(""#identifierId""));                                      
       newloginfield.sendKeys(""ragesh@gmail.in"");
      // System.out.println(""This is new login"");
   }


    driver.findElement(By.name(""signIn"")).click();

  // driver.findElement(By.cssSelector("".RveJvd"")).click();

   driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
 // WebElement pwd = driver.findElement(By.name(""Passwd""));
  WebElement pwd = driver.findElement(By.cssSelector(""#Passwd""));

  pwd.click();
  pwd.clear();
 // pwd.sendKeys(""123"");
 if(pwd.isEnabled()){
     pwd.sendKeys(""123"");
 }
 else{
     System.out.println(""Not Enabled"");
 }

",314k,"
            33
        ","['\nTry setting an implicit wait of maybe 10 seconds.\ngmail.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\nOr set an explicit wait. An explicit waits is code you define to wait for a certain condition to occur before proceeding further in the code. In your case, it is the visibility of the password input field. (Thanks to ainlolcat\'s comment)\nWebDriver gmail= new ChromeDriver();\ngmail.get(""https://www.gmail.co.in""); \ngmail.findElement(By.id(""Email"")).sendKeys(""abcd"");\ngmail.findElement(By.id(""next"")).click();\nWebDriverWait wait = new WebDriverWait(gmail, 10);\nWebElement element = wait.until(\nExpectedConditions.visibilityOfElementLocated(By.id(""Passwd"")));\ngmail.findElement(By.id(""Passwd"")).sendKeys(""xyz"");\n\nExplanation: The reason selenium can\'t find the element is because the id of the password input field is initially Passwd-hidden. After you click on the ""Next"" button, Google first verifies the email address entered and then shows the password input field (by changing the id from Passwd-hidden to Passwd). So, when the password field is still hidden (i.e. Google is still verifying the email id), your webdriver starts searching for the password input field with id Passwd which is still hidden. And hence, an exception is thrown.\n', '\n""element not interactable"" error can mean two things :\na.  Element has not properly rendered:\nSolution for this is just to use implicit /explicit wait\n\nImplicit wait :\ndriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\nExplicit wait :\nWebDriverWait wait=new WebDriverWait(driver, 20);\nelement1 = wait.until(ExpectedConditions.elementToBeClickable(By.className(""fa-stack-1x"")));\n\n\nb. Element has rendered but it is not in the visible part of the screen:\nSolution is just to scroll till the element. Based on the version of Selenium it can be handled in different ways but I will provide a solution that works in all versions :\n    JavascriptExecutor executor = (JavascriptExecutor) driver;\n    executor.executeScript(""arguments[0].scrollIntoView(true);"", element1);\n\n\nSuppose all this fails then another way is to again make use of Javascript executor as following :\nexecutor.executeScript(""arguments[0].click();"", element1);\n\nIf you still can\'t click , then it could again mean two things :\n\n\n1. Iframe\nCheck the DOM to see if the element you are inspecting lives in any frame. If that is true then you would need to switch to this frame before attempting any operation.\n    driver.switchTo().frame(""a077aa5e""); //switching the frame by ID\n    System.out.println(""********We are switching to the iframe*******"");\n    driver.findElement(By.xpath(""html/body/a/img"")).click();\n\n2. New tab\nIf a new tab has opened up and the element exists on it then you again need to code something like below to switch to it before attempting operation.\nString parent = driver.getWindowHandle();\ndriver.findElement(By.partialLinkText(""Continue"")).click();\nSet<String> s = driver.getWindowHandles();\n// Now iterate using Iterator\nIterator<String> I1 = s.iterator();\nwhile (I1.hasNext()) {\nString child_window = I1.next();\nif (!parent.equals(child_window)) {\n    driver.switchTo().window(child_window);\n    element1.click() \n}\n\n', '\nPlease try selecting the password field like this.\n    WebDriverWait wait = new WebDriverWait(driver, 10);\n    WebElement passwordElement = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(""#Passwd"")));\n    passwordElement.click();\n  passwordElement.clear();\n     passwordElement.sendKeys(""123"");\n\n', '\nyou may also try full xpath, I had a similar issue where I had to click on an element which has a property javascript onclick function. the full xpath method worked and no interactable exception was thrown.\n', '\nIn my case the element that generated the Exception was a button belonging to a form. I replaced\nWebElement btnLogin = driver.findElement(By.cssSelector(""button""));\nbtnLogin.click();\n\nwith\nbtnLogin.submit();\n\nMy environment was chromedriver windows 10\n', ""\nIn my case, I'm using python-selenium.\nI have two instructions. The second instruction wasn't able to execute.\nI put a time.sleep(1) between two instructions and I'm done.\nIf you want you can change the sleep amount according to your need.\n"", '\nI had the same problem and then figured out the cause. I was trying to type in a span tag instead of an input tag. My XPath was written with a span tag, which was a wrong thing to do. I reviewed the Html for the element and found the problem. All I then did was to find the input tag which happens to be a child element. You can only type in an input field if your XPath is created with an input tagname\n', ""\nI'm going to hedge this answer with this: I know it's crap.. and there's got to be a better way. (See above answers) But I tried all the suggestions here and still got nill. Ended up chasing errors, ripping the code to bits. Then I tried this:\nimport keyboard    \nkeyboard.press_and_release('tab')\nkeyboard.press_and_release('tab')\nkeyboard.press_and_release('tab') #repeat as needed\nkeyboard.press_and_release('space') \n\nIt's pretty insufferable and you've got to make sure that you don't lose focus otherwise you'll just be tabbing and spacing on the wrong thing.\nMy assumption on why the other methods didn't work for me is that I'm trying to click on something the developers didn't want a bot clicking on. So I'm not clicking on it!\n"", '\nI got this error because I was using a wrong CSS selector with the Selenium WebDriver Node.js function By.css().\nYou can check if your selector is correct by using it in the web console of your web browser (Ctrl+Shift+K shortcut), with the JavaScript function document.querySelectorAll().\n', '\nIf it\'s working in the debug, then wait must be the proper solution.\nI will suggest to use the explicit wait, as given below:\nWebDriverWait wait = new WebDriverWait(new ChromeDriver(), 5);\nwait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(""#Passwd"")));\n\n', '\nI came across this error too.  I thought it might have been because the field was not visible.  I tried the scroll solution above and although the field became visible in the controlled browser session I still got the exception.  The solution I am committing looks similar to below.  It looks like the event can bubble to the contained input field and the end result is the Selected property becomes true.\nThe field appears in my page something like this.\n<label>\n  <input name=""generic"" type=""checkbox"" ... >\n<label>\n\nThe generic working code looks more or less like this:\nvar checkbox = driver.FindElement(By.Name(""generic""), mustBeVisible: false);\ncheckbox.Selected.Should().BeFalse();\nvar label = checkbox.FindElement(By.XPath(""..""));\nlabel.Click();\ncheckbox.Selected.Should().BeTrue();\n\nYou\'ll need to translate this to your specific language.  I\'m using C# and FluentAssertions.  This solution worked for me with Chrome 94 and Selenium 3.141.0.\n', ""\nI had to hover over the element first for the sub-elements to appear. I didn't take that into account at first.\n    WebElement boardMenu = this.driver.findElement(By.linkText(boardTitle));\n    Actions action = new Actions(this.driver);\n\n    action.moveToElement(boardMenu).perform();\n\nAnother tip is to check that you are having one element of that DOM. Try using Ctrl+F when inspecting the web page and check your xpath there; it should return one element if you are going with the findElement method.\n""]"
Web automation from C++,"
We need to do some fairly complex web automation from C++ application (log into application, do some actions, logout), but performance is really important so we are looking at options.

Is there a way to drive WebKit or other headless engine directly from C++, without the need for few more layers in between (like selenium+webdriver+network communication+...)? Chromedriver perhaps?
If option 1 is not possible, what is the most optimal way to run WebDriver (with real browser) from C++?

",38k,"
            18
        ","['\nYou can use selenium server and JsonWireProtocol. In C++ you can implement CURL requests to selenium server and do web automation with C++.\nUse this link first: My fork of Webdriver++.\nThere are also some C++ libraries that do this work. \nThe first is Webdriver++ By sekogan but last commit was 3 years ago, and it seems not all things works for now.\nThe second is my fork of Webdriver++, i\'ve fixed some bugs and make this project as shared library, so you can use it in any C++ project.\nThis is an example of how you can use my My fork of Webdriver++.\n#include <webdriverxx/webdriverxx.h>\nusing namespace webdriverxx;\n\nint main() {\n   WebDriver firefox = Start(Firefox());\n   firefox\n       .Navigate(""http://google.com"")\n       .FindElement(ByClass(""class_name""))\n       .SendKeys(""Hello, world!"")\n       .Submit();\n   return 0;    \n}\n\n', ""\nYou should look into PhantomJS (a headless WebKit browser), which comes with GhostDriver, which is the WebDriver protocol implementation for PhantomJS.\nYou will still need to use one of the WebDriver language bindings, which I'm not aware of any of the language bindings that are in C++, but perhaps one of the available languages could be used by your team for automation purposes.\nWorst case, you could always create your WebDriver script in Python, and call the Python script from your C++ application.\n""]"
How to select elements within an iframe element in Puppeteer,"
Since ESPN does not provide an API, I am trying to use Puppeteer to scrape data about my fantasy football league. However, I am having a hard time trying to login using puppeteer due to the login form being nested with an iframe element.
I have gone to http://www.espn.com/login and selected the iframe. I can't seem to select any of the elements within the iframe except for the main section by doing
    frame.$('.main')

This is the code that seems to get the iframe with the login form.
    const browser = await puppeteer.launch({headless:false});
    const page = await browser.newPage();

    await page.goto('http://www.espn.com/login')
    await page.waitForSelector(""iframe"");

    const elementHandle = await page.$('div#disneyid-wrapper iframe');
    const frame = await elementHandle.contentFrame();
    await browser.close()

I want to be able to access the username field, password field, and the login button within the iframe element. Whenever I try to access these fields, I get a return of null.
",26k,"
            17
        ","['\nYou can get the iframe using contentFrame as you are doing now, and then call $.\nconst browser = await puppeteer.launch({ headless: false });\nconst page = await browser.newPage();\n\nawait page.goto(\'http://www.espn.com/login\')\n\nconst elementHandle = await page.waitForSelector(\'div#disneyid-wrapper iframe\');\nconst frame = await elementHandle.contentFrame();\nawait frame.waitForSelector(\'[ng-model=""vm.username""]\');\nconst username = await frame.$(\'[ng-model=""vm.username""]\');\nawait username.type(\'foo\');\nawait browser.close()\n\n\n', ""\nI had an issue with finding stripe elements. \nThe reason for that is the following: \n\nYou can't access an  with different origin using JavaScript, it would be a huge security flaw if you could do it. For the same-origin policy browsers block scripts trying to access a frame with a different origin. See more detailed answer here\n\nTherefore when I tried to use puppeteer's methods:Page.frames() and Page.mainFrame(). ElementHandle.contentFrame() I did not return any iframe to me. The problem is that it was happening silently and I couldn't figure out why it couldn't find anything.\nAdding these arguments to launch options solved the issue:\n\n '--disable-web-security',\n'--disable-features=IsolateOrigins,site-per-process'\n\n""]"
puppeteer wait for page/DOM updates - respond to new items that are added after initial loading,"
I want to use Puppeteer to respond to page updates.
The page shows items and when I leave the page open new items can appear over time.
E.g. every 10 seconds a new item is added.
I can use the following to wait for an item on the initial load of the page:
await page.waitFor("".item"");
console.log(""the initial items have been loaded"")

How can I wait for / catch future items?
I would like to achieve something like this (pseudo code):
await page.goto('http://mysite');
await page.waitFor("".item"");
// check items (=these initial items)

// event when receiving new items:
// check item(s) (= the additional [or all] items)

",7k,"
            5
        ","['\nYou can use exposeFunction to expose a local function:\nawait page.exposeFunction(\'getItem\', function(a) {\n    console.log(a);\n});\n\nThen you can use page.evaluate to create an observer and listen to new nodes created inside a parent node.\nThis example scrapes (it\'s just an idea, not a final work) the python chat in Stack Overflow, and prints new items being created in that chat.\nvar baseurl =  \'https://chat.stackoverflow.com/rooms/6/python\';\nconst browser = await puppeteer.launch({headless: false});\nconst page = await browser.newPage();\nawait page.goto(baseurl);\n\nawait page.exposeFunction(\'getItem\', function(a) {\n    console.log(a);\n});\n\nawait page.evaluate(() => {\n    var observer = new MutationObserver((mutations) => { \n        for(var mutation of mutations) {\n            if(mutation.addedNodes.length) {\n                getItem(mutation.addedNodes[0].innerText);\n            }\n        }\n    });\n    observer.observe(document.getElementById(""chat""), { attributes: false, childList: true, subtree: true });\n});\n\n', '\nAs an alternative to the excellent current answer which injects a MutationObserver using evaluate which forwards the data to an exposed Node function, Puppeteer offers a higher-level function called page.waitForFunction that blocks on an arbitrary predicate and uses either a MutationObserver or requestAnimationFrame under the hood to determine when to re-evaluate the predicate.\nCalling page.waitForFunction in a loop might add overhead since each new call involves registering a fresh observer or RAF. You\'d have to profile for your use case -- this isn\'t something I\'d worry much about prematurely, though.\nThat said, the RAF option may provide tighter latency than MO for the cost of some extra CPU cycles to poll constantly.\nHere\'s a minimal example on the following site that offers a periodically updating feed:\n\n\nconst wait = ms => new Promise(r => setTimeout(r, ms));\nconst r = (lo, hi) => ~~(Math.random() * (hi - lo) + lo);\n\nconst randomString = n =>\n  [...Array(n)].map(() => String.fromCharCode(r(97, 123))).join("""")\n;\n\n(async () => {\n  for (let i = 0; i < 500; i++) {\n    const el = document.createElement(""div"");\n    document.body.appendChild(el);\n    el.innerText = randomString(r(5, 15));\n    await wait(r(1000, 5000));\n  }\n})();\n\n\nconst puppeteer = require(""puppeteer"");\n\nconst html = `\n<html><body><div class=""container""></div><script>\nconst wait = ms => new Promise(r => setTimeout(r, ms));\nconst r = (lo, hi) => ~~(Math.random() * (hi - lo) + lo);\nconst randomString = n =>\n  [...Array(n)].map(() => String.fromCharCode(r(97, 123))).join("""")\n;\n(async () => {\n  for (;;) {\n    const el = document.createElement(""div"");\n    document.querySelector("".container"").appendChild(el);\n    el.innerText = randomString(r(5, 15));\n    await wait(r(1000, 5000));\n  }\n})();\n</script></body></html>\n`;\nlet browser;\n(async () => {\n  browser = await puppeteer.launch({headless: false});\n  const [page] = await browser.pages();\n  await page.setContent(html);\n  \n  for (;;) {\n    await page.waitForFunction((el, oldLength) =>\n      el.children.length > oldLength,                           // predicate\n      {polling: ""mutation"" /* or: ""raf"" */, timeout: 0},        // wFF options\n      await page.$("".container""),                               // elem to watch\n      await page.$eval("".container"", el => el.children.length), // oldLength\n    );\n    const selMostRecent = "".container div:last-child"";\n    console.log(await page.$eval(selMostRecent, el => el.textContent));\n  }\n})()\n  .catch(err => console.error(err))\n  .finally(() => browser?.close())\n;\n\nSee also:\n\nPass a function inside page.waitForFunction() with puppeteer which shows a generic waitForTextChange helper function that wraps page.waitForFunction.\nRealtime scrape a chat using Nodejs which aptly suggests the alternative approach of intercepting API responses as they populate the feed, when possible.\n\n']"
Accessing an element with no attributes in Watir,"
Using Watir, is there a way to access an element without attributes?
For example:
<span>Text</span>

I'd like to avoid using xpath, but if that's the only way it's cool.
",7k,"
            6
        ","['\nDisregarding the non-WATIR issues of having tags in the first place, or requesting unique attributes from your developers (or yourself), you can always access an element via its parent elements, or by index.\nFor example:\n    \n       \n          Text\n       \n    \n@browser.div(:name => ""content"").span(:index => 1)\n#this is the first span element inside this div\n\nYou can work through however many unique elements you need to before reaching the child span element, without using Xpath.  Of course, you only need one unique parent element to reach that specific child element, and you work down from that to the child.\ndiv(:how => what).table(:how => what).td(:how => what).span(:how => what).text\n\nAnother example, assuming it is the nth span on the page:\n       @browser.span(:index => n)\nThe by-index approach is very brittle and prone to breaking when any update is made to the page, however.\n', '\nIf it has text:\nbrowser.span(:text => ""Text"")\n\nIf you know only part of the text you can use regular expression:\nbrowser.span(:text => /Text/)\n\n', '\nThere are basically three ways to address this particular challenge.  Zeljko has addressed the first which is based on what is inside the element such as known text.  Adam addresses the most common way, what is enclosing or containing the element  I\'ll address the third way, which is what is enclosed-by or beside the element.  \nIf you have a known element that is inside the one you want, then you can start with that and use the .parent method to get the \'container\' element.  This can also be used to find a \'sibling\' element by using .parent to get to the one you want via a common container such as a table row.  The first use is fairly obvious, but the second is probably more common and very useful when working with tables.\nFor example Lets say you have a table with multiple rows of data where one column is unique part numbers, and another column has ""add to cart"" links.  Now, if you want to add a specific part to your cart, you could use Index combined with the text \'add to cart\' using code like this based on it being the 5th link with that specific text\nbrowser.link(:text => \'add to cart\', :index => 4).click\n\nBut this is brittle because as soon as the results change, (which can happen a lot with live data) your part is no longer the 5th one in that table, and your test would break. You would need some verification you\'ve found the correct part and not something else on that row. However, in watir you can do something like this:\nbrowser.cell(:text => \'Part no. 123-45\').parent.link(:text => \'add to cart\').click\n\nIn the case of a table cell, the parent of the cell will usually be a table row, and thus in plain english this translates to \'find the cell with \'part no 123-45\' in it, and then in that same row find and click on the \'add to cart\' link.  (although I\'m guessing you figured that out just by reading the code.) \nYou can use this to get any \'sibling\' or even just the \'parent\' itself where there\'s some unique element next to or within the object you need to interact with.\nYou can probably do something similar to that with Xpath, but good luck making any sense out of it when reading the code five weeks later.  This is one reason I vastly prefer Watir and Watir-Webdriver vs Selenium.\n']"
Puppeteer: Get innerHTML,"
Does anybody know how to get the innerHTML or text of an element? Or even better; how to click an element with a specific innerHTML? This is how it would work with normal JavaScript:
var found = false
$(selector).each(function() {
    if (found) return;
    else if ($(this).text().replace(/[^0-9]/g, '') === '5' {
        $(this).trigger('click');
        found = true
    }
});

Thanks in advance for any help!
",59k,"
            39
        ","['\nThis is how i get innerHTML:\npage.$eval(selector, (element) => {\n  return element.innerHTML\n})\n\n', ""\nReturning innerHTML of an Element\nYou can use the following methods to return the innerHTML of an element:\npage.$eval()\nconst inner_html = await page.$eval('#example', element => element.innerHTML);\n\npage.evaluate()\nconst inner_html = await page.evaluate(() => document.querySelector('#example').innerHTML);\n\npage.$() / elementHandle.getProperty() / jsHandle.jsonValue()\nconst element = await page.$('#example');\nconst element_property = await element.getProperty('innerHTML');\nconst inner_html = await element_property.jsonValue();\n\n\nClicking an Element with Specific innerHTML\nYou can use the following methods to click on an element based on the innerHTML that is contained within the element:\npage.$$eval()\nawait page.$$eval('.example', elements => {\n  const element = elements.find(element => element.innerHTML === '<h1>Hello, world!</h1>');\n  element.click();\n});\n\npage.evaluate()\nawait page.evaluate(() => {\n  const elements = [...document.querySelectorAll('.example')];\n  const element = elements.find(element => element.innerHTML === '<h1>Hello, world!</h1>');\n  element.click();\n});\n\npage.evaluateHandle() / elementHandle.click()\nconst element = await page.evaluateHandle(() => {\n  const elements = [...document.querySelectorAll('.example')];\n  const element = elements.find(element => element.innerHTML === '<h1>Hello, world!</h1>');\n  return element;\n});\n\nawait element.click();\n\n"", ""\nThis should work with puppeteer:)\nconst page = await browser.newPage();\nconst title = await page.evaluate(el => el.innerHTML, await page.$('h1'));\n\n"", ""\nYou can leverage the page.$$(selector) to get all your target elments and then use page.evaluate() to get the content(innerHTML), then apply your criteria. It should look something like: \nconst targetEls = await page.$$('yourFancySelector');\nfor(let target of targetEls){\n  const iHtml = await page.evaluate(el => el.innerHTML, target); \n  if (iHtml.replace(/[^0-9]/g, '') === '5') {\n    await target.click();\n    break;\n  }\n}\n\n"", '\nWith regard to this part of your question...\n\n""Or even better; how to click an element with a specific innerHTML.""\n\nThere are some particulars around innerHTML, innerText, and textContent that might give you grief. Which you can work-around using a sufficiently loose XPath query with Puppeteer v1.1.1.  \nSomething like this:\nconst el = await page.$x(\'//*[text()[contains(., ""search-text-here"")]]\');\nawait el[0].click({     \n                button: \'left\',\n                clickCount: 1,\n                delay: 50\n            });\n\nJust keep in mind that you will get an array of ElementHandles back from that query. So... the particular item you are looking for might not be at [0] if your text isn\'t unique. \nOptions passed to .click() aren\'t necessary if all you need is a single left-click.\n', ""\nI can never get the .innerHtml to work reliable. I always do the following:\nlet els = page.$$('selector');\nfor (let el of els) {\n  let content = await (await el.getProperty('textContent')).jsonValue();\n}\n\nThen you have your text in the 'content' variable.\n"", ""\nYou can simply write as below. (no need await sentence in the last part)\nconst center = await page.$eval('h2.font-34.uppercase > strong', e => e.innerHTML);\n\n"", '\n<div id=""innerHTML"">Hello</div>\n\n\nvar myInnerHtml = document.getElementById(""innerHTML"").innerHTML;\nconsole.log(myInnerHtml);\n\n']"
Automatic login script for a website on windows machine?,"
I saw some guy had a file (I guess a batch file). On clicking of the batch file he was able to log in to multiple sites. (Perhaps it was done using VB.)
I looked for such a script on Google but didn't find anything useful.
I know a bit of C++ and UNIX (also some HTML and JavaScript). I don't know if it can be done on a windows machine using these languages, but even if it could be done I think it would be difficult compared to VB or C## or some other high level languages.
I learned how to open multiple sites using basic windows batch commands enclosed in a batch file like:
start http://www.gmail.com
start http://stackoverflow.com

But still I can't figure out how actually clicking on the batch file would help me to log in to the sites without even typing the username and password.
Do I need to start learning Visual Basic, .NET, or windows batch programming to do this?
One more thing: can I also use it to log in to remote desktops?
",167k,"
            23
        ","['\nFrom the term ""automatic login"" I suppose security (password protection) is not of key importance here.\nThe guidelines for solution could be to use a JavaScript bookmark (idea borrowed form a nice game published on M&M\'s DK site).\nThe idea is to create a javascript file and store it locally. It should do the login data entering depending on current site address. Just an example using jQuery:\n// dont forget to include jQuery code\n// preferably with .noConflict() in order not to break the site scripts\nif (window.location.indexOf(""mail.google.com"") > -1) {\n    // Lets login to Gmail\n    jQuery(""#Email"").val(""youremail@gmail.com"");\n    jQuery(""#Passwd"").val(""superSecretPassowrd"");\n    jQuery(""#gaia_loginform"").submit();\n}\n\nNow save this as say login.js\nThen create a bookmark (in any browser) with this (as an) url:\njavascript:document.write(""<script type=\'text/javascript\' src=\'file:///path/to/login.js\'></script>"");\n\nNow when you go to Gmail and click this bookmark you will get automatically logged in by your script.\nMultiply the code blocks in your script, to add more sites in the similar manner. You could even combine it with window.open(...) functionality to open more sites, but that may get the script inclusion more complicated.\nNote: This only illustrates an idea and needs lots of further work, it\'s not a complete solution.\n', '\nThe code below does just that.  The below is a working example to log into a game.  I made a similar file to log in into Yahoo and a kurzweilai.net forum.\nJust copy the login form from any webpage\'s source code. Add value= ""your user name"" and value = ""your password"".  Normally the -input- elements in the source code do not have the value attribute, and sometime, you will see something like that:  value="""" \nSave the file as a html on a local machine double click it, or make a bat/cmd file to  launch and close them as required.\n    <!doctype html>\n    <!-- saved from url=(0014)about:internet -->\n\n    <html>\n    <title>Ikariam Autologin</title>\n    </head>\n    <body>\n    <form id=""loginForm"" name=""loginForm"" method=""post""    action=""http://s666.en.ikariam.com/index.php?action=loginAvatar&function=login"">\n    <select name=""uni_url"" id=""logServer"" class=""validate[required]"">\n    <option  class=""""  value=""s666.en.ikariam.com"" fbUrl=""""  cookieName=""""  >\n            Test_en\n    </option>\n    </select>\n    <input id=""loginName"" name=""name"" type=""text"" value=""PlayersName"" class="""" />\n    <input id=""loginPassword"" name=""password"" type=""password"" value=""examplepassword"" class="""" />\n    <input type=""hidden"" id=""loginKid"" name=""kid"" value=""""/>\n                        </form>\n  <script>document.loginForm.submit();</script>       \n  </body></html>\n\nNote that -script- is just -script-. I found there is no need to specify that is is JavaScript. It works anyway. I also found out that a bare-bones version that contains just two input filds: userName and password also work. But I left a hidded input field etc. just in case.  Yahoo mail has a lot of hidden fields. Some are to do with password encryption, and it counts login attempts.\nSecurity warnings and other staff, like Mark of the Web to make it work smoothly in IE are explained here:\nhttp://happy-snail.webs.com/autologinintogames.htm\n', '\nI used @qwertyjones\'s answer to automate logging into Oracle Agile with a public password.\nI saved the login page as index.html, edited all the href= and action= fields to have the full URL to the Agile server.\nThe key <form> line needed to change from\n<form autocomplete=""off"" name=""MainForm"" method=""POST""\n action=""j_security_check"" \n onsubmit=""return false;"" target=""_top"">\n\nto\n<form autocomplete=""off"" name=""MainForm"" method=""POST""\n action=""http://my.company.com:7001/Agile/default/j_security_check""   \n onsubmit=""return false;"" target=""_top"">\n\nI also added this snippet to the end of the <body>\n<script>\nfunction checkCookiesEnabled(){ return true; }\ndocument.MainForm.j_username.value = ""joeuser"";\ndocument.MainForm.j_password.value = ""abcdef"";\nsubmitLoginForm();\n</script> \n\nI had to disable the cookie check by redefining the function that did the check, because I was hosting this from XAMPP and I didn\'t want to deal with it. The submitLoginForm() call was inspired by inspecting the keyPressEvent() function.\n', '\nYou can use Autohotkey, download it from: http://ahkscript.org/download/\nAfter the installation, if you want to open Gmail website when you press Alt+g, you can do something like this:\n!g::\nRun www.gmail.com \nreturn\n\nFurther reference: Hotkeys (Mouse, Joystick and Keyboard Shortcuts)\n', '\nWell, its true that we can use Vb Script for what you intended to do.\nWe can open an application through the code like Internet Explorer. We can navigate to site you intend for. Later we can check the element names of Text Boxes which require username and password; can set then and then Login. It works fine all of using code.\nNo manual interaction with the website. And eventually you will end up signing in by just double clicking the file.\nTo get you started :\nSet objIE = CreateObject(""InternetExplorer.Application"")\n\nCall objIE.Navigate(""https://gmail.com"")\n\nThis will open an instance of internet explore and navigate to gmail.\nRest you can learn and apply.\n']"
"Using Playwright for Python, how do I select (or find) an element?","
I'm trying to learn the Python version of Playwright. See here
I would like to learn how to locate an element, so that I can do
things with it. Like printing the inner HTML, clicking on it and such.
The example below loads a page and prints the HTML
from playwright import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch(headless=False)
    page = browser.newPage()
    page.goto('http://whatsmyuseragent.org/')
    print(page.innerHTML(""*""))
    browser.close()

This page contains an element
<div class=""user-agent"">
    <p class=""intro-text"">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4238.0 Safari/537.36</p>
</div>

Using Selenium, I could locate the element and print it's content like this
elem = driver.find_element_by_class_name(""user-agent"")
print(elem)
print(elem.get_attribute(""innerHTML""))

How can I do the same in Playwright?
#UPDATE# - Note if you want to run this in 2021+ that current versions of playwright have changed the syntax from CamelCase to snake_case.
",18k,"
            8
        ","['\nThe accepted answer does not work with the newer versions of Playwright. (Thanks @576i for pointing this out)\nHere is the Python code that works with the newer versions (tested with version 1.5):\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto(\'http://whatsmyuseragent.org/\')\n    ua = page.query_selector("".user-agent"");\n    print(ua.inner_html())\n    browser.close()\n\nTo get only the text, use the inner_text() function.\nprint(ua.inner_text())\n\n', '\nYou can use the querySelector function, and then call the innerHTML function:\nhandle = page.querySelector("".user-agent"")\nprint(handle.innerHTML())\n\n', '\naccording to Latest official python version Playwright, you should use:\n\npage\'s query_selector\nand element\'s inner_html\n\n-> the code:\n# userAgentSelector = "".user-agent""\nuserAgentSelector = ""div.user-agent""\nelementHandle = page.query_selector(userAgentSelector)\nuaHtml = elementHandle.inner_html()\nprint(""uaHtml=%s"" % uaHtml)\n\n']"
"Python, mechanize, proper syntax for setting multiple headers?","
I can't seem to find how to do this anywere, I am trying to set multiple headers with python's mechanize module, such as:
br.addheaders = [('user-agent', '   Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3')]
br.addheaders = [('accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]

But it seems that it only takes the last br.addheaders.. so it only shows the 'accept' header, not the 'user-agent' header, which leads me to believe that each call to 'br.addheaders' overwrites any previous calls to this.. I can't figure the syntax to include 2 or more headers so I would greatly appreciate any help..
I am using this website to test headers output:
http://www.ericgiguere.com/tools/http-header-viewer.html
",8k,"
            8
        ","[""\nAccording to http://wwwsearch.sourceforge.net/mechanize/doc.html#adding-headers, the syntax would be \nbr.addheaders = [('user-agent', '   Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3'),\n('accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]\n\nThat is, make a list of header tuples.\n""]"
Execute javascript trough Internet Explorer's com interface using PowerShell,"
I am writing some Internet Explorer automation scripts using PowerShell. Here is how I start the IE com object:
$ie = New-Object -com ""InternetExplorer.Application""
$ie.Navigate(""about:blank"")
$ie.visible = $true

$doc = $ie.Document

So, what I would like to do is to execute some javascript on the $doc object. For example, I have an item on the page that has an onclick event which executes submitCommand('lookup'), so I'd like to run that directly on the $doc instead of having to find the object on the page and then calling the Click() method on it.
It would be easier as the object has no name nor id, making it very sensible to change as I can only rely on it's position on the page (eg: the 11th span item on the page).
Alternatively, how would you select elements based on their class? That would help a lot as the ""button"" has it's own class.
Thanks
",19k,"
            7
        ","['\n$spans=@($ie.document.getElementsByTagName(""SPAN""))\nPipe to where-object to filter the one you need (based on its attributes) and then call the click method, for example:\n$span11 = $spans | where {$_.innerText -eq \'something\'}\n$span11.click()\n\n']"
How to code vba to open internet explorer in new session?,"
I am struggling to get this done since months, how to code VBA to open internet explorer in new session i have an application with many logins  i need to open them simultaneously using automation , i have used 
  set ie=new InternetExplorer  

but it opens the ie within the old session, i want to open new session for each and every login please help me, i googled a lot for it but ended up with out any solution.
 this is my code
 Function GetIE() As InternetExplorer

  Dim WScript
Dim objShellWindows

 Set objShell = CreateObject(""Shell.Application"")
 Set objShellWindows = objShell.Windows
 Set WScript = CreateObject(""WScript.Shell"")


 Dim ieStarted
 ieStarted = False

  Dim ieError
  ieError = False

    Dim seconds
      seconds = 0

  While (Not ieStarted) And (Not ieError) And (seconds < 30)

If (Not objShellWindows Is Nothing) Then
    Dim objIE As InternetExplorer
    Dim IE


    For Each objIE In objShellWindows

        If (Not objIE Is Nothing) Then

            If IsObject(objIE.Document) Then
                Set IE = objIE.Document

                If VarType(IE) = 8 Then

                    If IE.Title = EmptyTitle Then
                        If Err.Number = 0 Then
                            IE.Write LoadingMessage

                            objIE.navigate Sheet1.Login.Text
                        ieStarted = True
                        Set GetIE = objIE


                      Else

                       MsgBox ErrorMessage
                            Err.Clear
                            ieError = True

                            Exit For
                        End If
                    End If
                End If
            End If
        End If

        Set IE = Nothing
        Set objIE = Nothing
    Next
End If

Application.Wait Now + TimeValue(""00:00:1"")
seconds = seconds + 1
Wend

 Set objShellWindows = Nothing
 Set objShell = Nothing



   End Function

with this code im able to open the browser but sadly my webpage is opening in outlook which is already opened pls help
",48k,"
            3
        ","['\nApparently the -nomerge argument will prevent session merging.\nShell(""iexplore.exe -nomerge http://www.yoursite.com"")\n\nUPDATE\nAs per your comment, you need to get the IE object. You may be able to work with this:\nDim wshShell\nSet wshShell = WScript.CreateObject(""WScript.Shell"")\n\nwshShell.Run ""iexplore -nomerge http://www.google.com""\n\nDim objShell\nSet objShell = CreateObject(""Shell.Application"")\n\nDim objShellWindows\nSet objShellWindows = objShell.Windows\n\nDim i\nDim ieObject\nFor i = 0 To objShellWindows.Count - 1\n    If InStr(objShellWindows.Item(i).FullName, ""iexplore.exe"") <> 0 Then\n        Set ieObject = objShellWindows.Item(i)\n        If VarType(ieObject.Document) = 8 Then\n            MsgBox ""Loaded "" & ieObject.Document.Title\n            Exit For\n        End If\n    End If\nNext\n\nSet ieObject = Nothing\nSet objShellWindows = Nothing\nSet objShell = Nothing\nSet wshShell = Nothing\n\n', '\nUsing Excel 2010 - This is what I use with a command button. Replace google.com with the website you want to open in another browser.\nPrivate Sub commandname_Click()\n\n\'Opens an Explorer with a web site \n\nDim IE As InternetExplorer\n\n  Set IE = CreateObject(""InternetExplorer.Application"")\n\n  IE.navigate (""http://WWW.GOOGLE.COM"")\n\n  IE.Visible = True\n\nEnd Sub\n\n', '\nThis answer works for me after changing:\nDim IE As InternetExplorer\n\nto\nDim IE As Object\n\n']"
Breaking out of a Protractor .filter() or .map() loop,"
I'm using Protractor and cucumber framework; how do I break out of a .filter or .map loop? I do not want to continue to iterate further if I found a match!
Page.prototype.getElementByKey = function (key) {
      var foundElement = null;
      return someElement.all(by.css('.someClass')).map(function (rawItem, index) {
        var itemObject = new ItemObjectClass(rawItem);
        return itemObject.getItemKey().then(function (foundItemKey) {
          var matched = String(foundItemKey).trim() === String(key).trim();

         console.log(' Matched: { ' + matched + ' }  index {'+index+'}');
          //if we have a match break out of the .filter function
          if (matched) {
            foundElement = itemObject;
            throw new Error(""Just our way of breaking out of .filter() above"");
          }
        });
      }).then(function () {
        //callback
        throw new Error('\n!!!!!Callback should not be called; 
       this means that we could not find an element that matched the passed in key above');
      }, function (error) {
        //error
        console.log('\n*******************errorCallback was called; '+error);
        return foundElement;
      });
    };

The above code finds the element but continues to iterate until the end instead of stopping when there's a match and breaking out by calling the errorCallback function. 
Given that .map function returns ""a promise that resolves to an array of values returned by the map function"" http://www.protractortest.org/#/api?view=ElementArrayFinder.prototype.map, I'm taking advantage of the fact that a promise will call its errCallback if the promise cannot be resolved. 
By throwing an a fake error, the errorCallback should be called and thereby break out of the .map loop.
Unfortunately, it successfully throws the error but continues with the loop instead of breaking out. I know that because when I

console.log(""boolean ""+matched+"" and index ""+index);

I get this: 
matched: false index: 0
matched: false index: 1
matched: true index 2 //it should have stopped here since matched = true
matched false index 3 // this should NOT have printed

so breaking out isn't working any ideas?
",4k,"
            2
        ","['\nYou are returning a single element, so .reduce would be preferable.\nHere is a usage example to return the first link where the text is ""mylink"":\nvar link = element.all(by.css(\'a\')).reduce(function (result, elem, index) {\n    if(result) return result;\n\n    return elem.getText().then(function(text){\n        if(text === ""mylink"") return elem;\n    });\n\n}).then(function(result){\n    if(!result) throw new Error(""Element not found"");\n    return result;\n});\n\n', ""\nWhat i understood from your post is, you would like to exit loop(iterate) when find a match element. \nIf yes, then better go with .filter() method. As it iterates on all available list of element finders and returns when a match finds.\nCode Snippet:\n\nelement.all(by.css('.items li')).filter(function(elem, index) {\n          return elem.getText().then(function(text) {\n                                if(text === 'RequiredElementFind'){\n                                      return ele;//return matched element\n                                 };\n    });\n}).click();//only matched element comes from the loop do what would you like    \n  to do\n\n""]"
How to login to a website with python and mechanize,"
i'm trying to log in to the website http://www.magickartenmarkt.de and do some analyzing in the member-area (https://www.magickartenmarkt.de/?mainPage=showWants). I saw other examples for this, but i don't get why my approaches didn't work. I identified the right forms for the first approach, but it's not clear if it worked.
In the second approach the returing webpage shows me that i don't have access to the member area. 
I would by glad for any help.
import urllib2
import cookielib
import urllib
import requests
import mechanize
from mechanize._opener import urlopen
from mechanize._form import ParseResponse

USERNAME = 'Test'
PASSWORD = 'bla123'
URL      = ""http://www.magickartenmarkt.de""

# first approach
request = mechanize.Request(URL)
response = mechanize.urlopen(request)
forms = mechanize.ParseResponse(response, backwards_compat=False)
# I don't want to close?!
#response.close()

# Username and Password are stored in this form
form = forms[1]

form[""username""] = USERNAME
form[""userPassword""] = PASSWORD

#proof entering data has worked
user = form[""username""]  # a string, NOT a Control instance
print user
pw = form[""userPassword""]  # a string, NOT a Control instance
print pw
#is this the page where I will redirected after login?
print urlopen(form.click()).read () 

#second approach
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
login_data = urllib.urlencode({'username' : USERNAME, 'userPassword': PASSWORD})

#login
response_web = opener.open(URL, login_data)

#did it work? for me not....
resp = opener.open('https://www.magickartenmarkt.de/?mainPage=showWants')
print resp.read()

",36k,"
            22
        ","[""\nWhy not use a browser instance to facilitate navigation?  Mechanize also has the ability to select particular forms (e.g. nr = 0 will select the first form on the page)\nbrowser = mechanize.Browser()\nbrowser.open(YOUR URL)\nbrowser.select_form(nr = 0)\nbrowser.form['username'] = USERNAME\nbrowser.form['password'] = PASSWORD\nbrowser.submit()\n\n"", '\nWeb automation ? Definitely ""WEBBOT""\nwebbot works even for webpages with dynamically changing id and classnames and has more methods and features than selenium.\n\nHere\'s a snippet :)\n\nfrom webbot import Browser \nweb = Browser()\nweb.go_to(\'google.com\') \nweb.click(\'Sign in\')\nweb.type(\'mymail@gmail.com\' , into=\'Email\')\nweb.click(\'NEXT\' , tag=\'span\')\nweb.type(\'mypassword\' , into=\'Password\' , id=\'passwordFieldId\') # specific selection\nweb.click(\'NEXT\' , tag=\'span\') # you are logged in ^_^\n\n']"
Selenium Webdriver vs Mechanize,"
I am interested in automating repetitive data entry in some forms for a website I frequent. So far the tools I've looked up that would provide support for this in a headless fashion could be Selenium WebDriver and Mechanize. 
My question is, is there a fundamental technical difference in using once versus the other? Selenium is mostly used for testing. I've also noticed some folks use it for doing exactly what I'm looking for, and that's automating data entry. Testing becomes a second benefit in that case. 
Is there reasons to not use Selenium for what I want to do over Mechanize? Does it not matter and both of these tools will work? 
I'm not asking which is better, I'm asking which is the right tool for the job. Perhaps I'm not understanding the premise behind the purpose of each tool.
",15k,"
            18
        ","['\nThese are completely different tools that somewhat ""cross"" in the web-scraping, web automation, automated data extraction scope.\nmechanize is a mature and widely-used tool for programmatic web-browsing with a lot of built-in features, like cookie handing, browser history, form submissions. The key thing to understand here is that mechanize.Browser is not a real browser, it cannot execute and understand javascript, it cannot send asynchronous requests often needed to form a web page.\nThis is where selenium comes into play - it is a browser automation tool which is also widely used in web-scraping. selenium usually becomes a ""fall-back"" tool - when someone cannot web-scrape a site with mechanize or RoboBrowser or MechanicalSoup (note - another alternatives) because of, for instance, it\'s javascript ""heaviness"", the choice is usually selenium. With selenium you can also go headless, automating PhantomJS browser, or having a virtual display. As a commonly mentioned drawback, performance is often mentioned - with selenium you are working with a target site as a real user in a web browser, which is loading additional files needed to form a page, making XHR requests, rendering etc.\nAnd this itself does not mean you should use selenium everywhere - choose the tool wisely, choose it because it fits the problem better, not because you are more familiar with an instrument.\n\nAlso note that you should, first, consider using an API (if provided by the target website) instead of going down to web-scraping. And, if it comes to it, be a good web-scraping citizen:\n\nHow to be a good citizen when crawling web sites?\nWeb scraping etiquette\n\n']"
Click a checkbox with selenium-webdriver,"
I'm testing my app with tumblr and I have to log in and out as I go through procedures. While doing so, I'm having trouble clicking a checkbox that keeps popping up. How can I use selenium-webriver in python to click it?
I've tried selecting xpaths, ...by_ids, and by_classes, they won't work, so now I'm trying to use the mouse's coordinates to physically click the item. (This is on the tumblr login page, fyi)
 
Above is the html of the item I'm trying to select.
(EDIT:)
I've the following selectors:
#checkbox = driver.find_element_by_id(""recaptcha-anchor"")
#checkbox = driver.find_element_by_id(""g-recaptcha"") 
#driver.find_element_by_xpath(""//*[@id='recaptcha-token']"")
#driver.find_element_by_css_selector(""#recaptcha-anchor"")
#driver.find_element_by_xpath(""//*[@id='recaptcha-anchor']"")
#driver.find_element_by_id(""recaptcha-token"").click()
#driver.find_element_by_class_name('rc-anchor-center-container')
#checkbox = driver.find_element_by_id(""recaptcha-anchor"")

",14k,"
            5
        ","['\nI realise this is an old thread, but I couldn\'t find the answer anywhere else.  In the end I figured it out as follows.\nNote 1: this will tick the recaptcha box, but it won\'t solve it, you\'ll still need to do that manually.\nNote 2: this is on macOS, so you might need a different format for chrome_path on Windows\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\n#modify line below to location of your chromedriver executable\nchrome_path = r""/Users/Username/chromedriver""\ndriver = webdriver.Chrome(chrome_path)\ndriver.get(""https://www.btcmarkets.net/login"")\n\nusername = driver.find_element_by_id(""userIdText"")\nusername.send_keys(""Us3rn4me"")\n\npassword = driver.find_element_by_id(""userPasswordText"")\npassword.send_keys(""Pa55w0rD"")\n\n#the line below tabs to the recaptcha tickbox and ticks it with the space bar\npassword.send_keys(Keys.TAB + Keys.TAB + "" "")\n\n', '\nSeems like this is not an input tag. So, probably manipulating the aria-checked attribute and set it to true would do it. The only way to change attribute value is JavaScriptExecutor. Try the following:\ndriver.execute_script(""$(\'#recaptcha-anchor\').setAttribute(\'aria-checked\',\'true\');"")\n\n', '\nUse code below can find the checkbox with id ""recaptcha-anchor"" and click it, but unable to bypass it. The following pictures will pop up. \nList<WebElement> frames = driver.findElements(By.tagName(""iframe""));\n    String winHanaleBefore = driver.getWindowHandle();\n    driver.switchTo().frame(0);\ndriver.findElement(By.id(""recaptcha-anchor"")).click();\ndriver.switchTo().window(winHanaleBefore);\n\n', '\nHere is a simple example that works for me in Java:\ndriver.findElement(By.id(""checkbox_id"")).click();\n\nIn Python, it seems to be:\ndriver.find_element_by_id(""checkbox_id"").click()\n\n']"
"powershell: how to click a ""submit type"" input","
used powershell to do web ui automation.  came up an exception: invoke method failed, because [System.__ComObject] does not contain “click” method.
can submit type input be clicked?
i used getElementsByTagName getElementsByClassName getElementsByName , does not work.
anyone can help me on this?
powershell code is below:
# open the specified web site and commit the key
$ie = new-object -com ""InternetExplorer.Application""
$ie.navigate(""http://gitlab.alibaba-inc.com/keys/new"")
$ie.visible = $true
while($ie.busy) {sleep 1}

$doc = $ie.document

# commit the button
$commit = $doc.getElementsByTagName(""commit"")

if($commit) 
{$commit.click()}

the html source is as below:
<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<title>
Profile | 
GitLab
</title>
<link href=""/assets/favicon-4b751da746de7855d7eb8123072388ed.ico"" rel=""shortcut icon""    type=""image/vnd.microsoft.icon"" />
<link href=""/assets/application-a9eac7f5b0c3b922de8997ae9ad74ab0.css"" media=""screen"" rel=""stylesheet"" type=""text/css"" />
<script src=""/assets/application-61398d184a36e6ae900134f123d5d649.js"" type=""text/javascript""></script>
<meta content=""authenticity_token"" name=""csrf-param"" />
<meta content=""9SLFk6AwlsN2FoyO8xPY+M1hEbKfqlLTQ4CSDVc4efE="" name=""csrf-token"" />
<script type=""text/javascript"">
//<![CDATA[
window.gon =   {};gon.default_issues_tracker=""gitlab"";gon.api_version=""v3"";gon.api_token=""xkMg31Ssva322SDF cgxY"";gon.gravatar_url=""http://www.gravatar.com/avatar/%{hash}?s=% {size}&d=mm"";gon.relative_url_root="""";
//]]>
</script>

</head>

<body class='ui_basic profile' data-page='keys:new'>
<header class='navbar navbar-static-top navbar-gitlab'>
<div class='navbar-inner'>
<div class='container'>
<div class='app_logo'>
<span class='separator'></span>
<a href=""/"" class=""home has_bottom_tooltip"" title=""Dashboard""><h1>GITLAB</h1>
</a><span class='separator'></span>
</div>
<h1 class='project_name'>Profile</h1>
<ul class='nav'>
<li>
<a>
<div class='hide turbolink-spinner'>
<i class='icon-refresh icon-spin'></i>
Loading...
</div>
</a>
</li>
<li>
<div class='search'>
<form accept-charset=""UTF-8"" action=""/search"" class=""navbar-form pull-left""  method=""get""><div style=""margin:0;padding:0;display:inline""><input name=""utf8""  type=""hidden"" value=""&#x2713;"" /></div>
<input class=""search-input"" id=""search"" name=""search"" placeholder=""Search"" type=""text""   />
<input id=""group_id"" name=""group_id"" type=""hidden"" />
<input id=""repository_ref"" name=""repository_ref"" type=""hidden"" />

<div class='search-autocomplete-json hide' data-autocomplete-opts='[{""label"":""project:  kelude2"",""url"":""/kelude2""},{""label"":""My Profile"",""url"":""/profile""},{""label"":""My SSH  Keys"",""url"":""/keys""},{""label"":""My Dashboard"",""url"":""/""},{""label"":""Admin  Section"",""url"":""/admin""},{""label"":""help: API Help"",""url"":""/help/api""},{""label"":""help:  Markdown Help"",""url"":""/help/markdown""},{""label"":""help: Permissions  Help"",""url"":""/help/permissions""},{""label"":""help: Public Access  Help"",""url"":""/help/public_access""},{""label"":""help: Rake Tasks  Help"",""url"":""/help/raketasks""},{""label"":""help: SSH Keys Help"",""url"":""/help/ssh""}, {""label"":""help: System Hooks Help"",""url"":""/help/system_hooks""},{""label"":""help: Web Hooks  Help"",""url"":""/help/web_hooks""},{""label"":""help: Workflow Help"",""url"":""/help/workflow""}]'>   </div>
</form>

</div>

</li>
<li>
<a href=""/public"" class=""has_bottom_tooltip"" data-original-title=""Public area""    title=""Public area""><i class='icon-globe'></i>
</a></li>
<li>
<a href=""/s/heyun"" class=""has_bottom_tooltip"" data-original-title=""Public area""    title=""My snippets""><i class='icon-paste'></i>
</a></li>
<li>
<a href=""/projects/new"" class=""has_bottom_tooltip"" data-original-title=""New project""    title=""Create New Project""><i class='icon-plus'></i>
</a></li>
<li>
<a href=""/profile"" class=""has_bottom_tooltip"" data-original-title=""Your profile""    title=""My Profile""><i class='icon-user'></i>
</a></li>
<li>
<a href=""/users/sign_out"" class=""has_bottom_tooltip"" data-method=""delete"" data-original-title=""Logout"" rel=""nofollow"" title=""Logout""><i class='icon-signout'></i>  
</a></li>
<li>
<a href=""/u/heyun"" class=""profile-pic""><img alt=""F3ea5164088694b48e4980e52d831927? s=26&amp;d=mm"" src=""http://www.gravatar.com/avatar/f3ea5164088694b48e4980e52d831927? s=26&amp;d=mm"" />
</a></li>
</ul>
</div>
</div>
</header>

<div class='flash-container'>
</div>

<nav class='main-nav'>
<div class='container'><ul>
<li class=""home""><a href=""/profile"" title=""Profile""><i class='icon-home'></i>
</a></li><li class=""""><a href=""/profile/account"">Account</a>
</li><li class=""""><a href=""/profile/notifications"">Notifications</a>
</li><li class=""active""><a href=""/keys"">SSH Keys
<span class='count'>1</span>
</a></li><li class=""""><a href=""/profile/design"">Design</a>
</li><li class=""""><a href=""/profile/history"">History</a>
</li></ul>
</div>
</nav>
<div class='container'>
<div class='content'><h3 class='page_title'>Add an SSH Key</h3>
<hr>
<div>
<form accept-charset=""UTF-8"" action=""/keys"" class=""new_key"" id=""new_key"" method=""post"">   <div style=""margin:0;padding:0;display:inline""><input name=""utf8"" type=""hidden""   value=""&#x2713;"" /><input name=""authenticity_token"" type=""hidden""   value=""9SLFk6AwlsN2FoyO8xPY+M1hEbKfqlLTQ4CSDVc4efE="" /></div><div class='clearfix'>
<label for=""key_title"">Title</label>
<div class='input'><input id=""key_title"" name=""key[title]"" size=""30"" type=""text"" />   </div>
</div>
<div class='clearfix'>
<label for=""key_key"">Key</label>
<div class='input'>
<textarea class=""xxlarge thin_area"" cols=""40"" id=""key_key"" name=""key[key]"" rows=""20"">
</textarea>
<p class='hint'>
Paste your public key here. Read more about how generate it
<a href=""/help/ssh"">here</a>
</p>
</div>
</div>
<div class='actions'>
<input class=""btn btn-save"" name=""commit"" type=""submit"" value=""Save"" />
<a href=""/keys"" class=""btn btn-cancel"">Cancel</a>
</div>
</form>

</div>

<script>
  $('#key_key').on('keyup', function(){
    var title = $('#key_title'),
        val      = $('#key_key').val(),
        key_mail = val.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+|\.[a-zA-Z0-9._-]+)/gi);

    if( key_mail && key_mail.length > 0 && title.val() == '' ){
      $('#key_title').val( key_mail );
    }
  });
</script>
</div>
</div>
</body>
</html>

",23k,"
            3
        ","['\nYou\'re looking for the wrong element. getElementsByTagName() is looking for the actual tag name (input), not the value of the tag\'s name-attribute (commit). Also, getElementsByTagName() returns a collection of COM objects. Even if no matching tag is found, the method will still return a collection (with 0 elements). You need to either check the Length property and then access the first element of the collection:\n$commit = $doc.getElementsByTagName(""input"")\nif ($commit.Length -gt 0) {\n  $commit.item(0).click()\n}\n\nor filter the element with the name you\'re looking for from the collection:\n$commit = $doc.getElementsByTagName(""input"") | ? { $_.name -eq ""commit"" }\nif ($commit) { $commit.click() }\n\n', '\nI could not access the url you had listed above so I used the MIT website to show you an example of how can this be done.\n# setup\n$ie = New-Object -com InternetExplorer.Application \n$ie.visible=$true\n\n$ie.navigate(""http://web.mit.edu/"") \nwhile($ie.ReadyState -ne 4) {start-sleep -m 100} \n\n$termsField = $ie.document.getElementsByName(""terms"")\n@($termsField)[0].value =""powershell""\n\n\n$submitButton = $ie.document.getElementsByTagName(""input"") \nForeach($element in $submitButton )\n{\n    #look for this field by value this is the field(look for screenshot below) \n    if($element.value -eq ""Search""){\n    Write-Host $element.click()\n    }\n}\n\n    Start-Sleep 10\n\n\n']"
How to find_element_by_link_text while having: NoSuchElement Exception?,"
This question has been asked over and over again - and in-spite of trying all the hacks I still can't seem to figure out what's wrong.
I tried increasing the implicitly_wait to 30 (and even increased it upto 100) - yet it did not work. 
Use case -: I am trying to create a list that wil populate all the items in the page here, as a base case - and I intend to bind this to a mini-module that I already have with scrapy which has all (pages with similar web elements) crawled links - so essentially will be building the whole pipeline, post I am done with this.
###My source code - generated via Selenium IDE, exported to a Python webdriver and manipulated a little later ###

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.wait import WebDriverWait
import unittest, time, re

class Einstein(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = ""http://shopap.lenovo.com/in/en/laptops/""
        self.verificationErrors = []
        self.accept_next_alert = True

    def test_einstein(self):
        driver = self.driver
        driver.get(self.base_url)
        print driver.title
        driver.find_element_by_link_text(""T430"").click()
        print driver.title
#       driver.find_element_by_xpath(""id('facetedBrowseWrapper')/div/div/div[1]/div[2]/ul[1]/li[1]/a"").click()
        driver.find_element_by_xpath(""//div[@id='subseries']/div[2]/div/p[3]/a"").click()
        print driver.title
       # driver.find_element_by_xpath(""//div[@id='subseries']/div[2]/div/p[3]/a"").click()
        try: self.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
       # Everything ok till here


        #**THE CODE FAILS HERE**#
        laptop1 = driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text
        print laptop1
        price1 = driver.find_element_by_css_selector(""span.price"").text
        print price1
        detail1 = self.is_element_present(By.CSS_SELECTOR, ""div.desc.std"")
        print detail1

            def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True

    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True

    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True

    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == ""__main__"":
    unittest.main()


Errors & output :
ekta@ekta-VirtualBox:~$ python einstein.py
Laptops & Ultrabooks | Lenovo (IN)
ThinkPad T430 Laptop PC for Business Computing | Lenovo (IN)
Buy Lenovo Thinkpad Laptops | Lenovo Thinkpad Laptops Price India
E
======================================================================
ERROR: test_einstein (__main__.Einstein)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""einstein.py"", line 27, in test_einstein
    try: self.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text)
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py"", line 246, in find_element_by_link_text
    return self.find_element(by=By.LINK_TEXT, value=link_text)
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py"", line 680, in find_element
    {'using': by, 'value': value})['value']
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py"", line 165, in execute
    self.error_handler.check_response(response)
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/errorhandler.py"", line 158, in check_response
    raise exception_class(message, screen, stacktrace)
NoSuchElementException: Message: u'Unable to locate element: {""method"":""link text"",""selector"":""Thinkpad Edge E530 (Black)""}' ; Stacktrace: 
    at FirefoxDriver.prototype.findElementInternal_ (file:///tmp/tmphli5Jg/extensions/fxdriver@googlecode.com/components/driver_component.js:8444)
    at fxdriver.Timer.prototype.setTimeout/<.notify (file:///tmp/tmphli5Jg/extensions/fxdriver@googlecode.com/components/driver_component.js:386) 

----------------------------------------------------------------------
Ran 1 test in 79.348s

FAILED (errors=1)

Questions & comments: 

If you are answering this question - please mention why this specific ""find_element_by_link_text"" does not work. 
(Very Basic) In the GUI of my selenium IDE -> Show all available commands - why dont I see the css (find_element_by_css_selector) for all the web elements - is there a way to force feed an element to be read as a CSS selector ?
In case you suggest using some other locator - please mention if that will be consistent way to fetch elements, given (1) 
Does assert work to capture the exceptions and ""move on"" - since even after trying ""verify"" , ""assert"" loops, I still cant fetch this  ""find_element_by_link_text""
I tried using Xpath to build this ""element"" , but in the view Xpath (in firefox) - I see nothing, to clue why that happens (Of course I removed the namespace "":x"" )

Other things I tried apart from implicity_wait(30):
find_element_by_partial_link(“Thinkpad”) and appending Unicode to this (wasn’t sure if it was reading the brackets ( , driver.find_element_by_link_text(u""Thinkpad Edge E530 (Black)"").text, still did not work.


Related questions:

How to use find_element_by_link_text() properly to not raise NoSuchElementException?
NoSuchElement Exception using find_element_by_link_text when implicitly_wait doesn't work?

",13k,"
            2
        ","['\nIt happened to me before that the find_element_by_link_text method sometimes works and sometimes doesn\'t work; even in a single case. I think it\'s not a reliable way to access elements; the best way is to use find_element_by_id. \nBut in your case, as I visit the page, there is no id to help you. Still you can try find_elements_by_xpath in 3 ways:\n1- Accessing title: find_element_by_xpath[""//a[contains(@title = \'T430\')]""] \n2- Accessing text: find_element_by_xpath[""//a[contains(text(), \'T430\')]""]\n3- Accessing href: find_element_by_xpath[""//a[contains(@href = \'http://www.thedostore.com/laptops/thinkpad-laptops/thinkpad-t430-u-black-627326q.html\')]""].\nHope it helps.\n', '\nNoSuchElementException is thrown when the element could not be found.\nIf you encounter this exception, please check the followings:\n\nCheck your selector used in your find_by...\nElement may not yet be on the screen at the time of the find operation.\n\nIf webpage is still loading, check for selenium.webdriver.support.wait.WebDriverWait() and write a wait wrapper  to wait for an element to appear.\nTroubleshooting and code samples\nYou can add breakpoint just before your failing line pdb.set_trace() (don\'t forget to import pdb), then run your test and once your debugger stops, then do the following tests.\n\nYou could try:\ndriver.find_element_by_xpath(u\'//a[text()=""Foo text""]\')\n\ninstead. This is more reliable test, so if this would work, use it instead.\nIf above won\'t help, please check if your page has been loaded properly via:\n(Pdb) driver.execute_script(""return document.readyState"")\n\'complete\'\n\nSometimes when the page is not loaded, you\'re actually fetching the elements from the old page. But even though, readyState could still indicate the state of the old page (especially when using click()). Here is how this is explained in this blog:\n\nSince Selenium webdriver has become more advanced, clicks are much more like ""real"" clicks, which has the benefit of making our tests more realistic, but it also means it\'s hard for Selenium to be able to track the impact that a click has on the browsers\' internals -- it might try to poll the browser for its page-loaded status immediately after clicking, but that\'s open to a race condition where the browser was multitasking, hasn\'t quite got round to dealing with the click yet, and it gives you the .readyState of the old page.\n\nIf you think this is happening because the page wasn\'t loaded properly, the ""recommended"" (however still ugly) solution is an explicit wait:\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait \nfrom selenium.webdriver.support import expected_conditions\n\nold_value = browser.find_element_by_id(\'thing-on-old-page\').text\nbrowser.find_element_by_link_text(\'my link\').click()\nWebDriverWait(browser, 3).until(\n    expected_conditions.text_to_be_present_in_element(\n        (By.ID, \'thing-on-new-page\'),\n        \'expected new text\'\n    )\n)\n\nThe naive attempt would be something like this:\ndef wait_for(condition_function):\n    start_time = time.time()\n    while time.time() < start_time + 3:\n        if condition_function():\n            return True\n        else:\n            time.sleep(0.1)\n    raise Exception(\n        \'Timeout waiting for {}\'.format(condition_function.__name__)\n    )\n\n\ndef click_through_to_new_page(link_text):\n    browser.find_element_by_link_text(\'my link\').click()\n\n    def page_has_loaded():\n        page_state = browser.execute_script(\n            \'return document.readyState;\'\n        ) \n        return page_state == \'complete\'\n\n    wait_for(page_has_loaded)\n\nAnother, better one would be (credits to @ThomasMarks):\ndef click_through_to_new_page(link_text):\n    link = browser.find_element_by_link_text(\'my link\')\n    link.click()\n\n    def link_has_gone_stale():\n        try:\n            # poll the link with an arbitrary call\n            link.find_elements_by_id(\'doesnt-matter\') \n            return False\n        except StaleElementReferenceException:\n            return True\n\n    wait_for(link_has_gone_stale)\n\nAnd the final example includes comparing page ids as below (which could be bulletproof):\nclass wait_for_page_load(object):\n\n    def __init__(self, browser):\n        self.browser = browser\n\n    def __enter__(self):\n        self.old_page = self.browser.find_element_by_tag_name(\'html\')\n\n    def page_has_loaded(self):\n        new_page = self.browser.find_element_by_tag_name(\'html\')\n        return new_page.id != self.old_page.id\n\n    def __exit__(self, *_):\n        wait_for(self.page_has_loaded)\n\nAnd now we can do:\nwith wait_for_page_load(browser):\n    browser.find_element_by_link_text(\'my link\').click()\n\nAbove code samples are from Harry\'s blog.\nHere is the version proposed by Tommy Beadle (by using staleness approach):\nimport contextlib\nfrom selenium.webdriver import Remote\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support.expected_conditions import staleness_of\n\nclass MyRemote(Remote):\n    @contextlib.contextmanager\n    def wait_for_page_load(self, timeout=30):\n        old_page = self.find_element_by_tag_name(\'html\')\n        yield\n        WebDriverWait(self, timeout).until(staleness_of(old_page))\n\nIf you think it isn\'t about page load, double check if your element isn\'t in iframe or different window. If so, you\'ve to switch to it first. To check list of available windows, run: driver.window_handles.\n\n', '\nFrom viewing the source of the page that you provided a link to, it seems you are using an incorrect selector.\nYou should use instead find_elements_by_link_text(u\'text here\')[0] to select the first occurrence instead as there seems to be the potential for multiple links with the same link text.\nSo instead of:\nself.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text)\n\nYou should use:\nself.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_elements_by_link_text(""Thinkpad Edge E530 (Black)"")[0].text)\n\n', '\nSolution posted by OP:\nHack 1: Instead of identifying the element as a text-link, I identified the ""bigger frame"" in which this element was present. \nitemlist_1 = driver.find_element_by_css_selector(""li.item.first"").text\nThis will give the whole item along with the name, price and detail (and the unwanted add to cart and compare"" \nSee the attached image for more .\n\nHack 2: I found that the ""Buy Now"" which was an image element with xPath (driver.find_element_by_xpath(""//div[@id=\'subseries\']/div[2]/div/p[3]/a"").click()\n, in the code above) , could be made to click/identified faster if I added the following line, before finding this by xpath. I think this sort of narrows down where the Webdriver is looking for an element.  This is what I added "" driver.find_element_by_css_selector(""#subseries"").text""\nThis must have decreased my wait by at least 20 seconds, on that page .Hope that helps.\n']"
Puppeteer does not change selector,"
I'm trying to automate the task of querying for data on this site using Puppeteer. So I need to select the dataset (Daily Summaries, 1st option), then select location type (State, 3rd option), then select state (Alaska, 2nd option). The problem is my code does not change to the next table. So instead of selecting the 3rd option (State) after selecting the 1st option in dataset (Daily Summaries), it just selects the 3rd option but in dataset table again! I am new to Puppeteer so I don't really know what to do with this. Any help is appreciated.
Below is my code:


const puppeteer = require('puppeteer');
(async () => {
  const browser = await puppeteer.launch({headless:false})
  const page = await browser.newPage()

  const navigationPromise = page.waitForNavigation()

  await page.goto('https://www.ncdc.noaa.gov/cdo-web/datatools/selectlocation')

  await page.waitForSelector('.selectLocationFilters > .datasetContainer > .slideElement > #datasetSelect > option:nth-child(1)')
  await page.click('.selectLocationFilters > .datasetContainer > .slideElement > #datasetSelect > option:nth-child(1)')

  await page.select('.inset #locationCategorySelect', '')

  await page.waitForSelector('.selectLocationFilters > .locationCategoryContainer > .locationCategoryFilter > #locationCategorySelect > option:nth-child(3)')
  await page.click('.selectLocationFilters > .locationCategoryContainer > .locationCategoryFilter > #locationCategorySelect > option:nth-child(3)')

  await page.select('.inset #selectedState', '')

  await page.waitForSelector('.selectLocationFilters > .locationContainer > .stateFilter > #selectedState > option:nth-child(2)')
  await page.click('.selectLocationFilters > .locationContainer > .stateFilter > #selectedState > option:nth-child(2)')

  await browser.close()
})()


This is what I want. Dataset -> Location type -> State Alaska. Instead the code keeps selecting only in the Dataset table.

",839,"
            1
        ","['\nThe problem you have there is that CSS transitions are preventing you from clicking those elements. One possible solution would be disabling all CSS animations on the page.\nYou can add that after the goto call: \n\nawait page.addStyleTag({ content : `\n    *,\n    *::after,\n    *::before {\n        transition-delay: 0s !important;\n        transition-duration: 0s !important;\n        animation-delay: -0.0001s !important;\n        animation-duration: 0s !important;\n        animation-play-state: paused !important;\n        caret-color: transparent !important;\n    }`})\n\n\n']"
Using internetexplorer object what is the correct way to wait for an ajax response?,"
I tried to upload a file to a sharepoint library, my code fails to properly detect  if ie is still waiting for an ajax response or not. What is the proper way to do this ?
[void] [System.Reflection.Assembly]::LoadWithPartialName(""'Microsoft.VisualBasic"")
[void] [System.Reflection.Assembly]::LoadWithPartialName(""'System.Windows.Forms"")

function wait4IE($ie=$global:ie){
    while ($ie.busy -or $ie.readystate -lt 4){start-sleep -milliseconds 200}
}

$global:ie=new-object -com ""internetexplorer.application""
$ie.visible=$true
[Microsoft.VisualBasic.Interaction]::AppActivate(""internet explorer"")

# open EDM
$ie.navigate(""https://xxx.sharepoint.com/sites/site1/Forms/AllItems.aspx"")
wait4IE

# click on  the button to display the form
$ie.Document.getElementById(""QCB1_Button2"").click()

wait4IE

the rest of the code is executed, but the uploading form is not shown yet.
How to wait for the display of the form  ?
I also tried this (should wait untill a button of the upload form is not find), but it never ends ...
while( $ie.document.getElementById(""ctl00_PlaceHolderMain_UploadDocumentSection_ctl05_InputFile"") -eq $null){
        echo ""waiting ...""
        wait4IE
}


Update :
I think I've found the problem : the form is open in an iframe :
<iframe id=""DlgFrame0be35d71-22cb-47bd-bbf0-44c97db61fd6"" class=""ms-dlgFrame"" src=""https://.../Upload.aspx?List={45085FA0-3AE3-4410-88AD-3E80A218FC0C}&amp;RootFolder=&amp;IsDlg=1"" frameborder=""0"" style=""width: 592px; height: 335px;""></iframe>

But now, How to get the good frame number ?
PS>($ie.Document.frames.Item(4).document.body.getElementsbytagname(""input"") |?{$_.type -eq 'file'}).id
ctl00_PlaceHolderMain_UploadDocumentSection_ctl05_InputFile

moreover it seems i can access the frame content with getElementsByTagName, but not with getElementById ....?I still don't understand why .:
PS>$ie.Document.frames.Item(4).document.body.getElementById('ctl00_PlaceHolderMain_UploadDocumentSection_ctl05_InputFile
    ')
    Échec lors de l'appel de la méthode, car [System.__ComObject] ne contient pas de méthode nommée « getElementById ».
    Au caractère Ligne:1 : 1
    + $ie.Document.frames.Item(4).document.body.getElementById('ctl00_PlaceHolderMain_ ...
    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        + CategoryInfo          : InvalidOperation : (getElementById:String) [], RuntimeException
        + FullyQualifiedErrorId : MethodNotFound

",547,"
            0
        ","['\nok here is how I\'ve done :\nthe trick was to look each iframes, select the one with the correct location\nfor($i=0;$i -lt $ie.Document.frames.length;$i++){\n            if( $ie.Document.frames.item($i).location.href -match \'upload.aspx\' ){ $frm=$ie.Document.frames.item($i)}\n    }\n\nthen wait for my input to show \nwhile( ($frm.document.body.getElementsbytagname(""input"") |?{$_.type -eq \'file\'}) -eq $null){\n    echo ""waiting ...""\n    start-sleep -milliseconds 100\n}\n\n']"
How do I install Geckodriver?,"
I am attempting to work with Selenium in Python. However, I do not know what to do given the below from https://pypi.python.org/pypi/selenium
Selenium requires a driver to interface with the chosen browser. Firefox, for example, requires geckodriver, which needs to be installed before the below examples can be run. Make sure it’s in your PATH, e.g., place it in /usr/bin or /usr/local/bin.
I am running windows 7 32bit. I found geckodriver here: https://github.com/mozilla/geckodriver/releases
I have mostly used the Anaconda distribution of Python to work with excel so I do not know what is a ""PATH""
Thanks,  
UPDATE:
I updated the PATH as shown in the comments. Here is the full error traceback. 

Microsoft Windows [Version 6.1.7601]
  Copyright (c) 2009 Microsoft Corporation.  All rights reserved.
C:\Users\user1>python
Python 3.5.2 |Anaconda 4.2.0 (32-bit)| (default, Jul  5 2016, 11:45:57) [MSC v.1
  900 32 bit (Intel)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
from selenium import webdriver
driver = webdriver.Firefox()

Traceback (most recent call last):
File """", line 1, in 
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\webdriver.py"", li
  ne 80, in init
      self.binary, timeout)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\extension_connect
  ion.py"", line 52, in init
      self.binary.launch_browser(self.profile, timeout=timeout)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\firefox_binary.py
  "", line 67, in launch_browser
      self._start_from_profile_path(self.profile.path)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\firefox_binary.py
  "", line 90, in _start_from_profile_path
      env=self._firefox_env)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\subp
  rocess.py"", line 947, in init
      restore_signals, start_new_session)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\subp
  rocess.py"", line 1224, in _execute_child
      startupinfo)
FileNotFoundError: [WinError 2] The system cannot find the file specified

",114k,"
            34
        ","['\n\nYou can download the geckodriver\nunzip it\nCopy that .exe file and put your into python parent folder (e.g., C:\\Python34)\nwrite your scripts.\n\nIt will execute successfully.\n', '\nThere is an easy way to install Geckodriver:\n\nInstall webdrivermanager with pip\npip install webdrivermanager\nInstall the driver for Firefox and Chrome\nwebdrivermanager firefox chrome --linkpath /usr/local/bin\nOr install the driver only for Firefox\nwebdrivermanager firefox --linkpath /usr/local/bin\nOr install the driver only for Chrome\nwebdrivermanager chrome --linkpath /usr/local/bin\n\n', ""\nThe easiest way if you are on windows:\ndriver = webdriver.Firefox(executable_path=r'[Your path]\\geckodriver.exe')\n\nExample:\ndriver = webdriver.Firefox(executable_path=r'D:\\geckodriver.exe')\n\n"", '\nFor Linux/Ubuntu:\nThe following simple installation worked for me:\nsudo apt install firefox-geckodriver\n\nNo additional driver installation was required.\nReference: https://github.com/timgrossmann/InstaPy/issues/5282#issuecomment-666283451\nFor windows:\nFollow the instructions here: http://www.learningaboutelectronics.com/Articles/How-to-install-geckodriver-Python-windows.php\n', ""\nIf you're on macOS/Apple, you can use Homebrew:\nbrew install geckodriver\nSee this related question\n"", '\nSome options, choose 1:\n\nMove the exe file to a folder in your PATH environment variable.\nUpdate PATH to have the directory that contains the exe.\nExplicitly override os.environ[""webdriver.gecko.driver""]\n\nbasically drag and drop the geckodriver someplace where you have your executables, you should then be able to open the command line and use it.\n/bin on linux, and C:\\Program Files\nsee:\n\nhttps://github.com/SeleniumHQ/selenium/issues/2672\nhttps://superuser.com/questions/124239/what-is-the-default-path-environment-variable-setting-on-fresh-install-of-window\nhttps://askubuntu.com/questions/27213/what-is-the-equivalent-to-the-windows-program-files-folder-where-do-things-g\n\nspecifically the explanations on how the driver is seen, \nwhere it can be put ,and how to modify the way selenium finds it. \n', ""\nFor me this worked (Windows 10, Firefox browser):\nfrom selenium import webdriver\ndriver = webdriver.Firefox(executable_path=r'C:\\......YOUR_PATH.......\\geckodriver.exe')\ndriver.get('http://EXAMPLE_URL.com')\n\n"", '\nMeanwhile for Win10 you can simply use\nfrom selenium import webdriver\nfrom webdriver_manager.firefox import GeckoDriverManager\n\ndriver = webdriver.Firefox(executable_path=GeckoDriverManager().install())\ndriver.get(""https://www.google.com"")\n\nThis will download the geckodrive prior to its first use and store it at the appropriate location. No need to set any paths explicitly.\n', '\nFor Python 3 - Selenium plus webdriver for Firefox;\n\nOpen up Command line\nEnter Pip install -U Selenium   (The -U will upgrade it to the latest Selenium version.)\nThis example selenium is already installed\nGo to https://github.com/mozilla/geckodriver/releases\nAt the time of writing I chose the latest version which was simply the version listed at the top of the page. For me it was v0.24.0.\nScroll down to assets and then click and download the correct driver. For windows it will be a zip file. Most likely 64bit. \nDownload the webdriver by clicking on the link\n5.Right click on the downloaded file and unzip the file. \nCopy and paste the file to somewhere in your python directory. e.g. If I installed Python in C:\\Python\\Python37 I would paste the file in there so gecko would be located in C:\\Python\\Python37\\geckodriver-v0.24.0-win64\n\nCopying the file path of the geckodriver\n\nInside that folder you just copied will be the geckodriver.exe\nIn Windows 10, click the ""windows"" button and search ""environment variables"" \nFind environment variables\nOR find it using these instructions; https://www.computerhope.com/issues/ch000549.htm\nClick on the ""environment variables"" box at the bottom right hand corner. \nIn the bottom box ""System Variables"" highlight the ""Path"" variable like so\nAdding environment variable Path\nPress edit and then add the entry at the bottom of the list. Copy and paste the location where the geckodriver.exe file lives. For me it was C:\\Python\\Python37\\geckodriver-v0.24.0-win64 (or where you copied the file in step 6)\nAdding gecko to the windows PATH\n\n', '\nto avoid links becoming out of date, please refer the soource.\nhttps://github.com/mozilla/geckodriver\nfollow the readme instructions to the ""Downloads"" > ""Releases"" link.\n']"
How to get body / json response from XHR request with Puppeteer [duplicate],"






This question already has answers here:
                        
                    



Puppeteer: How to listen to a specific response?

                                (5 answers)
                            

Closed 4 months ago.



I want to get the JSON data from a website I'm scraping with Puppeteer, but I can't figure how to get the body of the request back. Here's what I've tried:
const puppeteer = require('puppeteer')
const results = [];
(async () => {
    const browser = await puppeteer.launch({
        headless: false
    })
    const page = await browser.newPage()
    await page.goto(""https://capuk.org/i-want-help/courses/cap-money-course/introduction"", {
        waitUntil: 'networkidle2'
    });

    await page.type('#search-form > input[type=""text""]', 'bd14ew')  
    await page.click('#search-form > input[type=""submit""]')

    await page.on('response', response => {    
        if (response.url() == ""https://capuk.org/ajax_search/capmoneycourses""){
            console.log('XHR response received'); 
            console.log(response.json()); 
        } 
    }); 
})()

This just returns a promise pending function. Any help would be great.
",27k,"
            22
        ","['\nAs response.json returns a promise we need to await it.\npage.on(\'response\', async (response) => {    \n    if (response.url() == ""https://capuk.org/ajax_search/capmoneycourses""){\n        console.log(\'XHR response received\'); \n        console.log(await response.json()); \n    } \n}); \n\n']"
Connecting Browsers in Puppeteer,"
Is it possible to connect a browser to puppeteer without instantiating it in puppeteer? For example, running an instance of chromium like a regular user and then connecting that to an instance of puppeteer in code?
",16k,"
            15
        ","['\nThe answer is Yes and No.\nYou can connect to an existing using the connect function:\nconst browserURL = \'http://127.0.0.1:21222\';\nconst browser = await puppeteer.connect({browserURL});\n\nBut, if you want to use those 2 lines you need to launch Chrome with the ""--remote-debugging-port=21222 argument.\n', '\nI believe you need to connect to an address ended with an id:\nws://127.0.0.1:9222/devtools/browser/{id}\n\nWhen you launch Chrome with --remote-debugging-port, you\'ll see something like\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222   [17:57:55]\n\n...\n\nDevTools listening on ws://127.0.0.1:9222/devtools/browser/44b3c476-5524-497e-9918-d73fa39e40cf\n\nThe address on the last line is what you need, i.e.\nconst browser = await puppeteer.connect({\n    browserWSEndpoint: ""ws://127.0.0.1:9222/devtools/browser/44b3c476-5524-497e-9918-d73fa39e40cf""\n});\n\n']"
How to get children of elements by Puppeteer,"
I understand that puppeteer get its own handles rather than standard DOM elements, but I don't understand why I cannot continue the same query by found elements as
const els = await page.$$('div.parent');

for (let i = 0; i < els.length; i++) {
    const img = await els[i].$('img').getAttribute('src');
    console.log(img);
    const link = await els[i].$('a').getAttribute('href');
    console.log(link);
}

",23k,"
            12
        ","[""\nProblem\nThe element handles are necessary as an abstraction layer between the Node.js and browser runtime. The actual DOM elements are not sent to the Node.js environment.\nThat means when you want to get an attribute from an element, there has to be data transferred to the browser (which DOM element to use) and back (the result).\nSolution\nTherefore, the result from await els[i].$('img') is not really the DOM element, but only a wrapper that links to the element in the browser environment. To get the attribute, you have to use a function like elementHandle.$eval:\nconst imgSrc = await els[i].$eval('img', el => el.getAttribute('src'));\n\nThis runs the querySelector function on the given element and executes the given function to return its attribute.\n"", ""\nYou can use function $eval\nconst els = await page.$$('div.parent');\n\nfor (let i = 0; i < els.length; i++) {\n    const img = await els[i].$eval('img', i => i.getAttribute('src'));\n    console.log(img);\n    const link = await els[i].$eval('a', a => a.getAttribute('href'));\n    console.log(link);\n}\n\n""]"
How to use installed version of chrome in Playwright?,"
I want to use chrome instead of chromium. I can achieve the same in puppeteer by providing executable path. In playwright it doesn't work as browser type argument supports only 'chromium, webkit, firefox'


const { chromium } = require('playwright');
(async () => {
    const browser = await chromium.launch({
        headless: false,
        executablePath: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
    });
    const context = await browser.newContext();
    const page = await context.newPage();
    await page.goto('http://whatsmyuseragent.org/');
    await page.screenshot({ path: `example-${browserType}.png` });
})();


",16k,"
            10
        ","['\nYou need to pick one of those flavors. But once you pick the browser type Chromium, you will still be able to pass an executablePath to the launch function.\n', '\nIn 1.19 you can use chrome.\nbrowser = playwright.chromium.launch(channel=""chrome"")\n\nor you can simply put it in your playwright configuration file like:\n////\n    use: {\n        headless: true,\n        viewport: { width: 1600, height: 1000},\n        ignoreHTTPSErrors: true,\n        trace: \'on\',\n        screenshot: \'on\',\n        channel: ""chrome"",\n        video: \'on\'\n    },\n    ////\n\nMore on https://playwright.dev/python/docs/browsers\n', ""\nYou can specify browser path in config option\n////\nuse: {\n    headless: true,\n    viewport: { width: 1600, height: 1000},\n    channel: 'chrome',\n    launchOptions: {\n        executablePath: '/path/to/the/browser',\n    },\n},\n\n""]"
How to open the new tab using Playwright (ex. click the button to open the new section in a new tab),"
I am looking for a simpler solution to a current situation. For example, you open the google (any another website) and you want BY CLICK on the button (ex. Gmail) - open this page in the new tab using Playwright.
let browser, page, context;
describe('Check the main page view', function () {
    before(async () => {
        for (const browserType of ['chromium']) {
            browser = await playwright[browserType].launch({headless: false});
            context = await browser.newContext();
            page = await context.newPage();
            await page.goto(baseUrl);
        }
    });
    after(async function () {
        browser.close();
    });
    
        await page.click(tax);
        const taxPage = await page.getAttribute(taxAccount, 'href');

        const [newPage] = await Promise.all([
        context.waitForEvent('page'),
        page.evaluate((taxPage) => window.open(taxPage, '_blank'), taxPage)]);

        await newPage.waitForLoadState();
        console.log(await newPage.title());

",14k,"
            8
        ","['\nit(\'Open a new tab\', async function () {\n     await page.click(button, { button: ""middle"" });\n     await page.waitForTimeout(2000); //waitForNavigation and waitForLoadState do not work in this case\n     let pages = await context.pages();\n     expect(await pages[1].title()).equal(\'Title\');\n\n', '\nYou could pass a modifier to the click function. In macos it would be Meta because you\'d open in a new tab with cmd+click. In windows it would be Control.\nconst browser = await playwright[""chromium""].launch({headless : false});\nconst page = await browser.newPage();\nawait page.goto(\'https://www.facebook.com/\');\nvar pagePromise = page.context().waitForEvent(\'page\', p => p.url() ==\'https://www.messenger.com/\');\nawait page.click(\'text=Messenger\', { modifiers: [\'Meta\']});\nconst newPage = await pagePromise;\nawait newPage.bringToFront();\nawait browser.close();\n\n', '\nIn my case i am clicking on link in a pop up like (ctrl + click on link) then it opens new tab and work on that new tab\nawait page.click(\'#open\')\nconst [newTab] = await Promise.all([\n    page.waitForEvent(\'popup\'),\n    await page.keyboard.down(\'Control\'),\n    await page.frameLocator(\'//iframe[@title=""New tab.""]\').locator(\'a\').click(), // in popup\n    await page.keyboard.up(\'Control\'),\n    console.log(""clicked on link"")\n]);\nawait newTab.waitForFunction(()=>document.title === \'new tab title\')\nawait newTab.fill(\'#firstname\')\nawait newTab.close() // close the current tab\nawait page.click(\'#exitbutton\') //back to parent tab and work on it\n....\n....\nawait page.close() // close the parent tab\n\n']"
How to scroll down in an instagram pop-up frame with Selenium,"
I have a python script using selenium to go to a given Instagram profile and iterate over the user's followers. On the instagram website when one clicks to see the list of followers, a pop-up opens with the accounts listed (here's a screenshot of the site)
However both visually and in the html, only 12 accounts are shown. In order to see more one has to scroll down, so I tried doing this with the Keys.PAGE_DOWN input.
from selenium import webdriver
from selenium.common.exceptions         import TimeoutException
from selenium.webdriver.support.ui      import WebDriverWait 
from selenium.webdriver.support         import expected_conditions as EC
from selenium.webdriver.chrome.options  import Options
from selenium.webdriver.common.keys     import Keys
import time 

...
username = 'Username'
password = 'Password'
message  = 'blahblah'
tryTime  = 2

#create driver and log in
driver = webdriver.Chrome()
logIn(driver, username, password, tryTime)

#gets rid of preference pop-up
a = driver.find_elements_by_class_name(""HoLwm"")
a[0].click()

#go to profile
driver.get(""https://www.instagram.com/{}/"".format(username))

#go to followers list
followers = driver.find_element_by_xpath(""//a[@href='/{}/followers/']"".format(username))
followers.click()
time.sleep(tryTime) 

#find all li elements in list
fBody  = driver.find_element_by_xpath(""//div[@role='dialog']"")
fBody.send_keys(Keys.PAGE_DOWN) 

fList  = fBody.find_elements_by_tag(""li"")
print(""fList len is {}"".format(len(fList)))

time.sleep(tryTime)

print(""ended"")
driver.quit()

When I try to run this I get the following error:
Message: unknown error: cannot focus element

I know this is probably because I'm using the wrong element for fBody, but I don't know which would be the right one. Does anybody know which element I should send the PAGE_DOWN key to, or if there is another way to load  the accounts? 
Any help is much appreciated!
",9k,"
            7
        ","['\nthe element you\'re looking is //div[@class=\'isgrP\'] and Keys.PAGE_DOWN is not work for scrollable div. \nYour variable fList hold old value, you need to find again the elements after scroll.\n#find all li elements in list\nfBody  = driver.find_element_by_xpath(""//div[@class=\'isgrP\']"")\nscroll = 0\nwhile scroll < 5: # scroll 5 times\n    driver.execute_script(\'arguments[0].scrollTop = arguments[0].scrollTop + arguments[0].offsetHeight;\', fBody)\n    time.sleep(tryTime)\n    scroll += 1\n\nfList  = driver.find_elements_by_xpath(""//div[@class=\'isgrP\']//li"")\nprint(""fList len is {}"".format(len(fList)))\n\nprint(""ended"")\n#driver.quit()\n\n', '\nThe above code works fine if you add iteration (for) with range\nfor i in range(1, 4):\n            try:\n            #find all li elements in list\n            fBody  = self.driver.find_element_by_xpath(""//div[@class=\'isgrP\']"")\n            scroll = 0\n            while scroll < 5: # scroll 5 times\n                self.driver.execute_script(\'arguments[0].scrollTop = arguments[0].scrollTop + arguments[0].offsetHeight;\', fBody)\n                time.sleep(2)\n                scroll += 1\n\n            fList  = self.driver.find_elements_by_xpath(""//div[@class=\'isgrP\']//li"")\n            print(""fList len is {}"".format(len(fList)))\n\n        except Exception as e:\n            print(e, ""canot scrol"")\n\n        try:\n            #get tags with a\n            hrefs_in_view = self.driver.find_elements_by_tag_name(\'a\')\n            # finding relevant hrefs\n            hrefs_in_view = [elem.get_attribute(\'title\') for elem in hrefs_in_view]\n\n            [pic_hrefs.append(title) for title in hrefs_in_view if title not in pic_hrefs]\n            print(""Check: pic href length "" + str(len(pic_hrefs)))\n\n        except Exception as tag:\n            print(tag, ""can not find tag"")\n\nSo, the for loop makes it to possible scrol even if the while loop miss\n']"
Wait for a particular URL in selenium,"
I have the requirement of waiting for a particular URL in website automation using Selenium in Chrome browser. 
The user will be doing online payment on our website. Fro our website user is redirected to the payment gateway. When the user completes the payment, the gateway will redirect to our website. I want to get notified redirection from gateway to our site. 
I got an example which waits for “Particular Id” in the web page, here is vb.net code
driver.Url = ""http://gmail.com""
   Dim wait As New WebDriverWait(driver, TimeSpan.FromSeconds(10))
                wait.Until(Of IWebElement)(Function(d) d.FindElement(By.Id(""next"")))

This navigates to “gmail.com” and waits for ID “next” on that page. Instead, I want to continue the code only when particular URL loads. 
How can I do this?
Please help me.
",25k,"
            5
        ","['\nI\'m not sure what language you\'re using, but in Java you can do something like this:\nnew WebDriverWait(driver, 20).Until(ExpectedConditions.UrlToBe(""my-url""));\n\nTo wait until your url has loaded.\nIf you cannot use the latest selenium version for some reason, you can implement the method yourself:\npublic static Func<IWebDriver, bool> UrlToBe(string url)\n{\n    return (driver) => { return driver.Url.ToLowerInvariant().Equals(url.ToLowerInvariant()); };\n}\n\n', '\nThey have added more support for expected conditions now. You would have to create a webdriver wait and expect the url to contain a value\nWebDriverWait wait = new WebDriverWait(yourDriver, TimeSpan.FromSeconds(5));\nwait.Until(ExpectedConditions.UrlContains(""/url-fragment""));\n\n']"
Why is switch_to_window() method not working for selenium webdriver in Python?,"
I am trying to switch to a newly opened window using the Python selenium webdriver. The code worked fine before but now it is showing error. Surprisingly, the switch_to_window() method is not being recognized by Python and has no declaration to go to.
def process_ebl_statements(self, account_number):

    current_window = self.driver.current_window_handle
    all_windows = self.driver.window_handles

    print(""Current window: "", current_window)
    print(""All windows: "", all_windows)
    number_of_windows = len(all_windows)
    self.driver.switch_to_window(all_windows[number_of_windows - 1])

Error details:
'WebDriver' object has no attribute 'switch_to_window'


",3k,"
            4
        ","[""\nThis error message...\n'WebDriver' object has no attribute 'switch_to_window'\n\n...implies that the WebDriver object no more supports the attribute switch_to_window()\n\nswitch_to_window\nswitch_to_window was deprecated in Selenium v2.41 :\n\nSelenium 2.41\n\ndeprecating switch_to_* in favour of driver.switch_to.*\n\n\nHence you see the error.\n\nSolution\nInstead of switch_to_window you need to use switch_to.\nExamples:\n\ndriver.switch_to.active_element\ndriver.switch_to.alert\ndriver.switch_to.default_content()\ndriver.switch_to.frame()\ndriver.switch_to.parent_frame()\ndriver.switch_to.window('main')\n\n""]"
Selenium 3.0.1 -interactive gives ParameterException: Unknown option: -interactive,"
How to run selenum standanlone jar in interactive mode so that we can trigger commands from terminal. When I run as shown below exception occurs
java -jar selenium-server-standalone-3.0.1.jar -interactive
Exception in thread ""main"" com.beust.jcommander.ParameterException: Unknown option: -interactive
    at com.beust.jcommander.JCommander.parseValues(JCommander.java:742)
    at com.beust.jcommander.JCommander.parse(JCommander.java:282)
    at com.beust.jcommander.JCommander.parse(JCommander.java:265)
    at com.beust.jcommander.JCommander.<init>(JCommander.java:210)
    at org.openqa.grid.selenium.GridLauncherV3$1.setConfiguration(GridLauncherV3.java:219)
    at org.openqa.grid.selenium.GridLauncherV3.buildLauncher(GridLauncherV3.java:147)
    at org.openqa.grid.selenium.GridLauncherV3.main(GridLauncherV3.java:73)

However I am able to run version 2.48.2 in the above manner and it works fine.
",5k,"
            3
        ","['\nstarting version 3, the selenium team changed the available configuration options (see an example configuration), as well as replaced the command line arguments parser to JCommander.\nthe implications are;\n\nsome options may not be available anymore, or their names have changed. looking at the V3 example configuration, it seems the support for -interactive has dropped.\nyou should specify all -D arguments first, i.e. right after the java command.\n\n']"
Puppeteer Get all data attribute values,"
My html doc is
<div class=""inner-column"">
 <div data-thing=""abc1""></div>
 <div data-thing=""abc2""></div>
 <div data-thing=""abc3""></div>
</div>

How can I get all ""data-thing"" value (eg. [""abc1"", ""abc2"", ""abc3""]) inside div with class .inner-column?
const puppeteer = require('puppeteer');
const fs = require('fs');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.setViewport({width: 1440, height: 1200})
  await page.goto('https://www.example.com')

  const data = await page.content();

  await browser.close();
})();

",11k,"
            3
        ","[""\nYou could use the page.$$eval function for that like this:\nconst dataValues = await page.$$eval(\n    '.inner-column div',\n    divs => divs.map(div => div.dataset.thing)\n);\n\nExplanation\nWhat the page.$$eval function does (quote from the docs linked above):\n\nThis method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction.\nIf pageFunction returns a Promise, then page.$$eval would wait for the promise to resolve and return its value.\n\nTherefore, it will first query the targeted divs and then map the divs to their data-* value by using the dataset property.\n"", '\nYou can use the evaluate function\nconst data = await page.evaluate(() => \n  Array.from(document.querySelectorAll("".inner-column DIV"")).map(d => d.getAttribute(""data-thing""))\n)\n\n']"
jbehave + thucydides: how to override 300s timeout,"
I'm using thucydides jbehave plugin to run Selenium tests. However, I can't run tests longer than 5 min in total due to jbehave timeout. I can't figure out how can thucydides/jbehave should be configured to override this limitation. Selenium tests use to be longer that 5 mins, so that should be an actual problem for many people.
",5k,"
            3
        ","['\nTo override the timeout the user should add thucydides.properties file to the main folder of the project (if you use thucidides jbehave archetype, there is no such file by default). \nset, for instance, story.timeout.in.secs=3000 and save the file. the timeout parameter will be overriden\n', '\nTo overide the timeout we can use the following :\n @Override\n        public Embedder configuredEmbedder(){\n\nStoryTimeouts.TimeoutParser t=new StoryTimeouts.TimeoutParser() {\n                @Override\n                public boolean isValid(String timeout) {\n                    return true;\n                }\n\n                @Override\n                public long asSeconds(String timeout) {\n                    return 500; <--- Storytimeout \n                }\n            };\n\n            embedder.useTimeoutParsers(t);\n}\n\n']"
Controlling a web browser using Excel VBA,"
I have been assigned the task of automating a web based task ( for a HTTPS website). The users currently are filling in the Excel sheet with the data, they now want to automate excel in such a way that it directly controls the browser and fills in the data.
I found the iMacros Scripting edition as a possible solution for doing this, I wanted to know if there are any other similar tools which can be used for controlling the browser and filling in data.
I also had a look at the Selenium Client Driver, but I am not sure on how to use it in Excel VBA.
Any help would be appreciated.
Thanks,
",25k,"
            3
        ","['\nYou can use Selenium from Visual Basic Editor by installing the tools provided here :\nhttp://code.google.com/p/selenium-vba/\nThere is a Selenium IDE plugin to automatically record a script in VBA and an installation package to run Selenium command in Visual Basic Editor.\nThe following example starts firefox, opens links in the 1st column, compares the title with the 2nd column and past the result in the 3rd column.\nUsed data are in a sheet, in a range named ""MyValues"".\nPublic Sub TC002()\n   Dim selenium As New SeleniumWrapper.WebDriver, r As Range\n   selenium.Start ""firefox"", ""http://www.google.com"" \n   For Each r In Range(""MyValues"").Rows\n     selenium.open r.Cells(, 1)\n     selenium.waitForNotTitle """"\n     r.Cells(, 3) = selenium.verifyTitle(r.Cells(, 2))\n   Next\n   selenium.stop\nEnd Sub\n\n', '\nThis sample open stackoverflow site an show IE\nSub OpenIE()\n\'officevb.com\nDim ie As Object\nSet ie = CreateObject(""InternetExplorer.Application"")\n\nie.Navigate ""http://www.stackowerflow.com""\n\n \'wait load\n While ie.ReadyState <> READYSTATE_COMPLETE\n  DoEvents\n Wend\n\nie.Visible = True\n\nEnd Sub\n\n[]\'s\n', '\nI use this code for reading data from excel and passin it to selenium for to do task like ""click, select, close etc"" and also you can write data to excel.\nThis is in python i don know VB and i do know perl if u wish i\'ll give same code in perl too.\ni hop this may help.\nfrom xlwt import Workbook\n\nimport xlrd\n\ntestconfigfilename=""testconfig.xls""\n\n    if (len(sys.argv) > 1):\n\n        testconfigfilename=sys.argv[1]       \n\n    wb = xlrd.open_workbook(testconfigfilename);\n\n    wb.sheet_names();\n\n    sh = wb.sheet_by_index(0); \'Sheet 0 - selenium server configuration\'\n\n\n\n    seleniumHost = sh.cell(1,0).value\n\n    seleniumPort = int(sh.cell(1,1).value)\n\n    testBaseURL = sh.cell(1,2).value\n\n    browser = sh.cell(1,3).value\n\n    timeout = int(sh.cell(1,4).value)\n\n    path = sh.cell(1,5).value\n\noutputwb = Workbook()\n\n    outputsheet = outputwb.add_sheet(""result"",cell_overwrite_ok=True) #get the first sheet in the result xls \n\noutputsheet.write(RowNumber,colNumber,""data"")\n\n']"
How to get the total number of Rows in a table | Cypress,"

I have a table with N rows. How can I get the total number of rows present in the table?
I search for a name, and that particular name is in row number X, how can I get the value of that particular row.

",9k,"
            3
        ","['\nYou can use .find to solve both of your cases.\nTo get the table row count:\n  cy.get(""#tableID"")\n    .find(""tr"")\n    .then((row) => {\n      //row.length will give you the row count\n      cy.log(row.length);\n    });\n\nTo get the value ( index ) of the particular row, you can do something like this.\n  cy.get(""#Table Id"")\n    .find(""tr"")\n    .then((rows) => {\n      rows.toArray().forEach((element) => {\n        if (element.innerHTML.includes(""Your Value"")) {\n        //rows.index(element) will give you the row index\n          cy.log(rows.index(element));\n        }\n      });\n    });\n\nAdditional tip: If you want to select a specific table cell containing a value, you can do this:\n  cy.get(""#customers"").find(""tr"").find(""td"").contains(""Germany"");\n\nNote: to get the table row index there can be many other alternative ways. Hope you will figure them out on the go.\n']"
how to use edgeDriver with qaf,"
I use below properties to run edge browser, but it doesn't work.
webdriver.edge.driver=src/main/resources/common/msedgedriver.exe
driver.name=edgeDriver

How can I use edge browser?
",568,"
            2
        ","['\nIn order to set driver executable, you need to set value using appropriate system property for the driver. You can set system property either at the time of execution using -Dpropertyname=value or through code.  If you are using qaf, it provides feature to set system property through property file. For that purpose you need to add system prefix with property name. For example:\nsystem.webdriver.edge.driver=src/main/resources/common/msedgedriver.exe\n', '\nAccording to the doc https://qmetry.github.io/qaf/latest/how_to_use_driver.html and check the UiDriverFactory.java in com.qmetry.qaf.automation.ui of qaf, it looks qaf not support this.\n']"
Python Selenium - What are possible keys in FireFox webdriver profile preferences,"
I couldn't really find this information anywhere, I am looking for a list of possible keys that can be used in the profile.set_preference() API.
Here is some context:
from selenium import webdriver
from pyvirtualdisplay import Display
display = Display(visible=0, size=(1024, 768))
display.start()
profile = webdriver.FirefoxProfile()

Now, if I want to, say specify a client SSL, I need to configure that as a preference of FireFox profile. I am trying to find the list of all the preferences so I can play with this. 
",2k,"
            2
        ","[""\nYou can look at profile.DEFAULT_PREFERENCES which is the json at python2.7/site-packages/selenium/webdriver/firefox/webdriver_prefs.json\n{u'frozen': {u'app.update.auto': False,\n  u'app.update.enabled': False,\n  u'browser.EULA.3.accepted': True,\n  u'browser.EULA.override': True,\n  u'browser.displayedE10SNotice': 4,\n  u'browser.download.manager.showWhenStarting': False,\n  u'browser.link.open_external': 2,\n  u'browser.link.open_newwindow': 2,\n  u'browser.offline': False,\n  u'browser.reader.detectedFirstArticle': True,\n  u'browser.safebrowsing.enabled': False,\n  u'browser.safebrowsing.malware.enabled': False,\n  u'browser.search.update': False,\n  u'browser.selfsupport.url': u'',\n  u'browser.sessionstore.resume_from_crash': False,\n  u'browser.shell.checkDefaultBrowser': False,\n  u'browser.tabs.warnOnClose': False,\n  u'browser.tabs.warnOnOpen': False,\n  u'datareporting.healthreport.logging.consoleEnabled': False,\n  u'datareporting.healthreport.service.enabled': False,\n  u'datareporting.healthreport.service.firstRun': False,\n  u'datareporting.healthreport.uploadEnabled': False,\n  u'datareporting.policy.dataSubmissionEnabled': False,\n  u'datareporting.policy.dataSubmissionPolicyAccepted': False,\n  u'devtools.errorconsole.enabled': True,\n  u'dom.disable_open_during_load': False,\n  u'extensions.autoDisableScopes': 10,\n  u'extensions.blocklist.enabled': False,\n  u'extensions.logging.enabled': True,\n  u'extensions.update.enabled': False,\n  u'extensions.update.notifyUser': False,\n  u'javascript.enabled': True,\n  u'network.http.phishy-userpass-length': 255,\n  u'network.manage-offline-status': False,\n  u'offline-apps.allow_by_default': True,\n  u'prompts.tab_modal.enabled': False,\n  u'security.csp.enable': False,\n  u'security.fileuri.origin_policy': 3,\n  u'security.fileuri.strict_origin_policy': False,\n  u'security.warn_entering_secure': False,\n  u'security.warn_entering_secure.show_once': False,\n  u'security.warn_entering_weak': False,\n  u'security.warn_entering_weak.show_once': False,\n  u'security.warn_leaving_secure': False,\n  u'security.warn_leaving_secure.show_once': False,\n  u'security.warn_submit_insecure': False,\n  u'security.warn_viewing_mixed': False,\n  u'security.warn_viewing_mixed.show_once': False,\n  u'signon.rememberSignons': False,\n  u'toolkit.networkmanager.disable': True,\n  u'toolkit.telemetry.enabled': False,\n  u'toolkit.telemetry.prompted': 2,\n  u'toolkit.telemetry.rejected': True},\n u'mutable': {u'browser.dom.window.dump.enabled': True,\n  u'browser.newtab.url': u'about:blank',\n  u'browser.newtabpage.enabled': False,\n  u'browser.startup.homepage': u'about:blank',\n  u'browser.startup.page': 0,\n  u'dom.max_chrome_script_run_time': 30,\n  u'dom.max_script_run_time': 30,\n  u'dom.report_all_js_exceptions': True,\n  u'javascript.options.showInConsole': True,\n  u'network.http.max-connections-per-server': 10,\n  u'startup.homepage_welcome_url': u'about:blank',\n  u'webdriver_accept_untrusted_certs': True,\n  u'webdriver_assume_untrusted_issuer': True}}\n\n"", '\nI usually just open about:config and search the list of preferences there. There is also this helpful resource which documents part of the preferences.\n']"
Selenium Chrome WebDriver how to scroll horizontally,"
Chrome web driver has a limitation that only loads webpage content that is in view. I have a website that has long horizontal table. I have Xpath that extracts column headers of a table that stretches more than the screen width. In chrome dev tool console if I run the xpath $x(myxpathgoeshere) I get all the headers including the ones that are not in view(the one that makes you scroll to see all). So I know my xpath is correct. But in code, when I access it by using selenium webdriver it only gives header names that are in current view. I came across various posts on chrome webdriver google group page, users mentioning this limitation and answer to it was to not fix it. So anyways, now I am trying to make it work using javascript to scroll horizontally and then do the findelement by xpath again to see if the elements to the right are loaded. But for some strange reason I cannot seem to get the scrolling horizontally to work. I am using C# Javascript executor.
IJavaScriptExecutor js = (IJavaScriptExecutor) Driver;
js.ExecuteScript(""scrollTo(3000,0);""); // whatever X value I use chrome is not scrolling to the right. 

I have also tried scrollX and no luck. Is there something wrong with my code?
Edited: forgot that I was using X for horizontal not Y
",8k,"
            2
        ","['\nfor this type of issue i had use browser zoom-in and zoom-out functionality but i am using this in java. With java robot class i am doing browser zoom-out so i automatically shows the hidden column. you can try that it may help you. \n', '\nChange the code: \njs.ExecuteScript(""scrollTo(3000,0);"");\n\nto\njs.ExecuteScript(""scroll(3000,0);"");\n\nSimply, it\'s not scrollTo and scroll only.\n']"
How do I switch to new tab or window in playwright-java?,"
How can we switch to a new window that has opened while running test, and how can I get back to the parent window in playwright-java?
",3k,"
            2
        ","['\nThere is no Switch action like Selenium. You can use the waitForPage or waitForPopup functions. You just need to know what is the action triggering that new page. e.g.\nPage popup = context.waitForPage(() -> page.click(""a""));\n\nThe context class also has a pages() function, which returns all the open pages.\n', ""\nexpanding on @hardkoded's answer, I got an error and am now using this:\ncontext.waitForEvent('page')\n\nworks for my purposes so far\n"", '\nWhat you want to do is continue your test in a new page. The official docs: https://playwright.dev/docs/pages#handling-new-pages\nHere is an example where we first work in the initial ""page"" and then, after clicking a button we want to continue our tests in a new tab we define as ""newPage"":\n        // Here we are working in the initial page\n        await page.locator(""#locator"").type(""This happens in the initial page.."");\n\n        /*  When ""Ok"" is clicked the test waits for a new page event and assigns to new page object to a variable called newPage\n            After this point we want the test to continue in the new tab,\n            so we\'ll have to use the newly defined newPage variable when working on that tab\n        */\n        const [newPage] = await Promise.all([\n            context.waitForEvent(\'page\'),\n            page.locator(""span >> text=Ok"").click()\n            \n        ])\n        await newPage.waitForLoadState();\n\n        console.log(""A new tab opened and the url of the tab is: "" + newPage.url());\n\n        // Here we work with the newPage object and we can perform actions like with page\n        await newPage.locator(""#Description"").type(""This happens in a new tab!"");\n\n']"
Unable to capture response.json() in playwright,"
I am trying to capture json response using playwright. I keep on getting Promise pending. However under headless:false mode i can see the data is being received and populated on the browser. I have just started playing with Playwright and also not very familiar with ""Promise"".
What i have tried is as below:
(async () => {
        let browser = await firefox.launch({headless: true, userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0'});
        let page = await browser.newPage();
        page.waitForResponse(async(response) => {
            if (response.url().includes('/abcd') && response.status() == 200) {
                let resp = await response.json();
                console.log(resp);
            }
        });
        await page.goto('https://myurl.com', {waitUntil: 'networkidle', timeout: 30000});
        await page.waitForTimeout(20000);
        await browser.close();
})

What am i doing wrong? I have tried increasing timeout. Doesnot help.
",5k,"
            1
        ","[""\nThe waitForResponse won't handle your async function. You could do something like this:\n(async () => {\n  let browser = await firefox.launch({headless: true, userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0'});\n  let page = await browser.newPage();\n  const promise page.waitForResponse(/abcd/); // This is a regex to match the url\n  await page.goto('https://myurl.com', {waitUntil: 'networkidle', timeout: 30000});\n  var response = await promise; // here we wait for the promise to be fullfiled. \n  let resp = await response.json();\n  console.log(resp);\n  await browser.close();\n})\n\n""]"
How to add wait / Delay until web page is fully loaded in Automation Anywhere?,"
I want to know 'How to add wait or Delay until webpage is fully loaded,' in automations anywhere,
I used 

wait for screen change

But it hold the process until some time specified by the developer , but I want to add delay until the web page fully loaded, 
Is there anyone can help me?
sorry for the bad English.
",8k,"
            1
        ","['\nUsually, a website is ""loaded"" or ""ready"" before the actual content is loaded. Some websites even have dummy content which is replaced once the actual content is retrieved from \'somewhere\'. Hence waiting for the screen to change is not a good idea. \nMy approach is to pick an element which you know is loaded after the element you want to interact with. For instance the navigation bar on this website is loaded before the comments are. You can either figure out which element to use by looking at the source of the website by right-clicking anywhere and selecting view source or by simply refreshing the page a couple of times and eye-balling it. The former requires some HTML knowledge, but is a better approach in my opinion.\nOnce you\'ve identified your element, use Object Cloning on said element and use the built-in wait as a delay (usually set to 15 sec, depending on the website/connection). The Action should be some random get property (store whatever you retrieve in some dummy variable as we\'re not going to use it anyway).\nObject Cloning\'s wait function polls every so many milliseconds and once the element is found it will almost instantaneously go to the next line in the code. This is where you interact with your target element. \nThis way you know your target element is loaded and the code is very optimized and robust.\nOn a final note: It\'s usually a good idea to surround this with some exception handling as automating websites is prone to errors.\n', '\nA very simple solution is to run your automation while watching and determine the amount of time it takes for the webpage to load. You can add a Delay rather than a wait if you know the page is generally loaded within 30 seconds or so. \n']"
Multi-threaded C# Selenium WebDriver automation with Uris not known beforehand,"
I need to perform some simultaneous webdrivers manipulation, but I am uncertain as to how to do this.
What I am asking here is: 

What is the correct way to achieve this ?
What is the reason for the exception I am getting (revealed below)

After some research I ended up with:
1. The way I see people doing this (and the one I ended up using after playing with the API, before searching) is to loop over the window handles my WebDriver has at hand, and perform a switch to and out of the window handle I want to process, closing it when I am finished.
2. Selenium Grid does not seem like an option fore me - am I wrong or it is intended for parallel processing ? Since am running everything in a single computer, it will be of no use for me.

In trying the 1st option, I have the following scenario (a code sample is available below, I skipped stuff that is not relevant/repeat itself (where ever I added 3 dots:
I have a html page, with several submit buttons, stacked.
Clicking each of them will open a new browser/tab (interestingly enough, using ChromeDriver opens tabs, while FirefoxDriver opens separate windows for each.)
As a side note: I can't determine the uris of each submit beforehand (they must be determined by javascript, and at this point, let's just assume I want to handle everything knowing nothing about the client code.
Now, after looping over all the submit buttons, and issuing webElement.Click() on the corresponding elements, the tabs/windows open. The code flows to create a list of tasks to be executed, one for each new tab/window.
The problem is: since all tasks all depend upon the same instance of webdriver to switch to the window handles, seems I will need to add resource sharing locks/control. I am uncertain as whether I am correct, since I saw no mention of locks/resource access control in searching for multi-threaded web driver examples.
On the other hand, if I am able to determine the tabs/windows uris beforehand, I would be able to skip all the automation steps needed to reach this point, and then creating a webDriver instance for each thread, via Navigate().GoToUrl() would be straightforward. But this looks like a deadlock! I don't see webDriver's API providing any access to the newly opened tab/window without performing a switch. And I only want to switch if I do not have to repeat all the automation steps that lead me to the current window !
...
In any case, I keep getting the exception:
Element belongs to a different frame than the current one - switch to its containing frame to use it
at 
IWebElement element = cell.FindElement

inside the ToDictionary() block.
I obviously checked that all my selectors are returning results, in chrome's console. 
foreach (WebElement resultSet in resultSets)
    resultSet.Click();


foreach(string windowHandle in webDriver.WindowHandles.Skip(1))
{
    dataCollectionTasks.Add(Task.Factory.StartNew<List<DataTable>>(obj =>
    {
        List<DataTable> collectedData = new List<DataTable>();
        string window = obj as string;

        if (window != null)
        {
            webDriver.SwitchTo().Window(windowHandle);
            List<WebElement> dataSets = webDriver.FindElements(By.JQuerySelector(utils.GetAppSetting(""selectors.ResultSetData""))).ToList();

            DataTable data = null;

            for (int i = 0; i < dataSets.Count; i += 2)
            {
                data = new DataTable();

                data.Columns.Add(""Col1"", typeof(string));
                data.Columns.Add(""Col2"", typeof(string));
                data.Columns.Add(""Col3"", typeof(string));

                ///...

                //data set header
                if (i % 2 != 0)
                {
                    IWebElement headerElement = dataSets[i].FindElement(OpenQA.Selenium.By.CssSelector(utils.GetAppSetting(""selectors.ResultSetDataHeader"")));
                    data.TableName = string.Join("" "", headerElement.Text.Split().Take(3));
                }
                //data set records
                else
                {
                    Dictionary<string, string> cells = dataSets[i]
                        .FindElements(OpenQA.Selenium.By.CssSelector(utils.GetAppSetting(""selectors.ResultSetDataCell"")))
                        .ToDictionary(
                            cell =>
                            {
                                IWebElement element = cell.FindElement(OpenQA.Selenium.By.CssSelector(utils.GetAppSetting(""selectors.ResultSetDataHeaderColumn"")));
                                return element == null ? string.Empty : element.Text;
                            },
                            cell =>
                            {
                                return cell == null ? string.Empty : cell.Text;
                            });

                    string col1Value, col2Value, col3Value; //...
                    cells.TryGetValue(""Col1"", out col1Value);
                    cells.TryGetValue(""Col2"", out col2Value);
                    cells.TryGetValue(""Col3"", out col3Value);
                    //...

                    data.Rows.Add(col1Value, col2Value, col3Value /*...*/);
                }
            }

            collectedData.Add(data);
        }

        webDriver.SwitchTo().Window(mainWindow);
        webDriver.Close();

        return collectedData;
    }, windowHandle));
} //foreach

Task.WaitAll(dataCollectionTasks.ToArray());
foreach (Task<List<DataTable>> dataCollectionTask in dataCollectionTasks)
{
    results.AddRange(dataCollectionTask.Result);
}

return results;

",3k,"
            1
        ",[]
How to get a specific frame in a web page and retrieve its content,"
I wanted to access the translation results of the following url 

http://translate.google.com/translate?hl=en&sl=en&tl=ar&u=http%3A%2F%2Fwww.saltycrane.com%2Fblog%2F2008%2F10%2Fhow-escape-percent-encode-url-python%2F

the translation is displayed in the bottom  content frame out of the two frames. I am interested in retrieving only the bottom content frame to get the translations 
selenium for python allows us to fetch page contents via web automation:
browser.get('http://translate.google.com/#en/ar/'+hurl)

The required frame is an iframe :
<div id=""contentframe"" style=""top:160px""><iframe   src=""/translate_p?hl=en&am... name=c frameborder=""0"" style=""height:100%;width:100%;position:absolute;top:0px;bottom:0px;""></div></iframe>

but how to get the bottom content frame element to retrieve the translations using web automation?
Came to know that PyQuery also allows us to browse the contents using the JQuery formalism
Update:
An answer mentioned that Selenium provides a method where you can do that.
frame = browser.find_element_by_tag_name('iframe')
browser.switch_to_frame(frame)
# get page source
browser.page_source

but it does not work in the above example. It returns an empty page .
",11k,"
            1
        ","['\nYou can use driver.switchTo.frame(1); here, the digit 1 inside frame() is the index of frames present in the webpage. as your requirement is to switch to second frame and the index starts with 0, you should use driver.switchTo.frame(1);\nBut the above code is in Java. In Python, you can use the below line.\ndriver.switch_to_frame(1);\n\nUPDATE\n driver.get(""http://translate.google.com/translate?hl=en&sl=en&tl=ar&u=http://www.saltycrane.com/blog/2008/10/how-escape-percent-encode-url-python/"");\n driver.switchTo().frame(0);\n System.out.println(driver.findElement(By.xpath(""/html/body/div/div/div[3]/h1/span/a"")).getText());\n\nOutput: SaltyCrane ???????\nI have just tried to print the title name SaltCrane that is present inside the iframe.\nIt worked for me except for the ? symbols after the SaltCrane. As it was arabic, it was unable to decode the same.\nThe above code is in Java. Same logic should also work in Python.\n', ""\nSelenium provides a method where you can do that.\nframe = browser.find_element_by_tag_name('iframe')\nbrowser.switch_to_frame(frame)\n# get page source\nbrowser.page_source\n\n""]"
StaleElement exception error when asserting data in a table,"
I am trying to add data to a table and then asserting that data is added by collecting table data in a list but every time it throws me a StaleElement exception error, now I guess it is happening because the list is getting refreshed, so I am not sure how do I handle it.
Here is my implementation
    private static List<WebElement> listOfJobs = 
    driver.findElements(By.xpath((""//*[@id='resultTable']//tbody/tr//a"")));

    public static List<WebElement> getListOfJobs() 
        {
            try 
            {
                return listOfJobs;
            } 
            catch (Exception e) 
            {
                e.printStackTrace();
            }
            return null;
        }

    public static String generateName()
        {
            String AlphaNumericString = ""abcdefghijklmnopqrstuvxyz"";
            StringBuilder sb = new StringBuilder(9);
    
            for (int i = 0; i < 9; i++) 
            {
                int index = (int)(AlphaNumericString.length() * Math.random());
                sb.append(AlphaNumericString.charAt(index));
            }
            return sb.toString()+""digi"";
        }
    
    @SuppressWarnings({ ""null"" })
        public static List<String> listOfJobs()
        {
            List<String> jobs = null;
            for(int i=0; i < OrangeHRMAddJobCategories.getListOfJobs().size(); i++)
            {
                jobs.add(OrangeHRMAddJobCategories.getListOfJobs().get(i).getText());
            }
            return jobs;
        }

    OrangeHRMAddJobCategories jobCategories = new OrangeHRMAddJobCategories();
            jobCategories.clickJobTab().clickJobCategoires().clickAdd().setJobCategoryName(UsefulFunctionUtils.generateName()).saveJobCategory();   

    Assertions.assertThat(UsefulFunctionUtils.listOfJobs().contains(""digi""));

I feel that the listOfJobs should be reinjected somewhere but not sure where exactly do I put it because refreshing the page did not work.
Complete stacktrace

    org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
      (Session info: chrome=94.0.4606.61)
    For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
    Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
    System info: host: 'DESKTOP-R3JT7MO', ip: '192.168.0.103', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '16.0.1'
    Driver info: org.openqa.selenium.chrome.ChromeDriver
    Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 94.0.4606.61, chrome: {chromedriverVersion: 94.0.4606.61 (418b78f5838ed..., userDataDir: C:\Users\CHINMA~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:62489}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
    Session ID: 8b68238ee73ae8190f250fa15fbb41f1
        at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
        at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
        at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
        at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
        at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
        at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
        at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
        at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
        at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
        at org.openqa.selenium.remote.RemoteWebElement.getText(RemoteWebElement.java:166)
        at com.digicorp.utils.UsefulFunctionUtils.listOfJobs(UsefulFunctionUtils.java:45)
        at com.digicorp.testcases.TC_AddJobCategory.testAddJobCategory(TC_AddJobCategory.java:26)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:567)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
        at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
        at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
        at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
        at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
        at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
        at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        at org.testng.TestRunner.privateRun(TestRunner.java:794)
        at org.testng.TestRunner.run(TestRunner.java:596)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
        at org.testng.SuiteRunner.run(SuiteRunner.java:276)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
        at org.testng.TestNG.runSuites(TestNG.java:1063)
        at org.testng.TestNG.run(TestNG.java:1031)
        at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
        at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
        at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)


",65,"
            0
        ","['\n\norg.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document\n\nIndicates that a reference to an element is now ""stale"" --- the element no longer appears on the DOM of the page. The reason for this expectation is may be your DOM got updated or refreshed. For an example, after performing an action like click() your DOM may get updated or refreshed. In this time when you are trying to find an element on DOM you will experience this error.\nYou have to re-find that element in updated or refreshed DOM\ntry{\n    jobs.add(OrangeHRMAddJobCategories.getListOfJobs().get(i).getText());\n   }catch(org.openqa.selenium.StaleElementReferenceException e){\n     new WebDriverWait(driver, 10).until(ExpectedConditions.visibilityOf(OrangeHRMAddJobCategories.getListOfJobs().get(i)));\n     jobs.add(OrangeHRMAddJobCategories.getListOfJobs().get(i).getText());\n   }\n\n\n', '\nAs per the convo with OP, it\'s getting stale at this point\njobs.add(OrangeHRMAddJobCategories.getListOfJobs().get(i).getText());\n\nIt could be because he is calling getListOfJobs which returns a List of WebElement.\nand when you call again, they are no longer available to page dom, cause you might have interacted with web element/elements in first iteration. There are few fixes, such as using Explicit wait staleness or redefining the elements again and again for next iteration.\nFix 1 :\nprivate static List<WebElement> listOfJobs = driver.findElements(By.xpath((""//*[@id=\'resultTable\']//tbody/tr//a"")));\n\npublic static List<WebElement> getListOfJobs(int j) \n {\n     try \n     {\n         List<WebElement> listOfJobs = driver.findElements(By.xpath(""(//*[@id=\'resultTable\']//tbody/tr//a)[\'""+j+""\']""));\n         return listOfJobs;\n     } \n     catch (Exception e) \n     {\n         e.printStackTrace();\n     }\n     return null;\n }\n \n \n    @SuppressWarnings({ ""null"" })\n    public static List<String> listOfJobs()\n    {\n        int j = 1;\n        List<String> jobs = null;\n        for(int i=0; i < listOfJobs.size(); i++)\n        {\n            jobs.add(OrangeHRMAddJobCategories.getListOfJobs(j).get(i).getText());\n            j++;\n        }\n        return jobs;\n    }\n\n', '\nYou are doing the operation before the element is loaded in the webpage, so please add the wait conditions and then do your operation.\nBy divCss = By.xpath((""//*[@id=\'resultTable\']//tbody/tr//a""));\nwait.until(ExpectedConditions.elementToBeClickable(divCss));\nwait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(divCss));\n\n']"
IE Web Automation - How to auto select value from combo box using Excel VBA/XML Macro,"
I'm a beginner in VBA and I've failed to select country name automatically in web Combo box or list box from my Excel spreadsheet. My code is entering country name only, but not selecting it. 
How can I change this code so it can pick country name from my Excel spreadsheet and select the same in web combo box as a loop. Passport number, DOB and Nationality are correct on my code. If you'll use manually then you can find the work permit number which I need to capture in my spreadsheet. Chrome Inspect Element screenshot is attached herewith.

My code is as follows:
Sub MOL()
    Dim IE As New SHDocVw.InternetExplorer
    Dim Doc As MSHTML.HTMLDocument
    Dim Buttons As MSHTML.IHTMLElementCollection
    Dim Button As MSHTML.IHTMLElement
    Dim HTMLInput As MSHTML.IHTMLElement
    Dim Tags As MSHTML.IHTMLElement
    Dim HTMLTables As MSHTML.IHTMLElementCollection
    Dim HTMLTable As MSHTML.IHTMLElement
    Dim HTMLRow As MSHTML.IHTMLElement
    Dim HTMLCell As MSHTML.IHTMLElement
    Dim Alltext As IHTMLElementCollection

Application.ScreenUpdating = False
'Application.Calculation = xlCalculationManual
'Application.EnableEvents = False

On Error Resume Next

    IE.Visible = True
    IE.navigate ""https://eservices.mol.gov.ae/SmartTasheel/Complain/IndexLogin?lang=en-gb""

Do While IE.readyState <> READYSTATE_COMPLETE: Loop

Set Doc = IE.document
Set Buttons = Doc.getElementsByTagName(""Button"")
Buttons(2).Click
Do While IE.readyState <> READYSTATE_INTERACTIVE = 3: Loop
Set HTMLInputs = Doc.getElementsByTagName(""Input"")
    HTMLInputs(46).Value = ""somevalue""
    HTMLInputs(48).Value = ""24/02/1990""
    HTMLInputs(47).Value = ""India""
Buttons(21).Click
End Sub

",2k,"
            0
        ","['\nThe solution you look for is a bit difficult to provide. There are few tricky parts to hurdle to select the NATIONALITY from dropdown. I\'ve used .querySelector() within the script to make it concise. However, it should serve your purpose no matter whatever country you wanna select from dropdown. Give it a shot:\nSub GetInfo()\n    Dim IE As New InternetExplorer, HTML As HTMLDocument, post As Object, URL$\n\n    URL = ""https://eservices.mol.gov.ae/SmartTasheel/Complain/IndexLogin?lang=en-gb""\n\n    With IE\n        .Visible = True\n        .navigate URL\n        While .Busy = True Or .readyState < 4: DoEvents: Wend\n        Set HTML = .document\n\n        HTML.getElementById(""TransactionInfo_WorkPermitNumber"").innerText = ""2659558""\n        HTML.querySelector(""button[ng-click=\'showEmployeeSearch()\']"").Click\n\n        Application.Wait Now + TimeValue(""00:00:03"")  \'\'If for some reason the script fails, make sure to increase the delay\n\n        HTML.getElementById(""txtPassportNumber"").Value = ""J2659558""\n        HTML.getElementById(""Nationality"").Focus\n        For Each post In HTML.getElementsByClassName(""ng-scope"")\n            With post.getElementsByClassName(""ng-binding"")\n                For I = 0 To .Length - 1\n                    If .item(I).innerText = ""INDIA"" Then \'\'you can change the country name here to select from dropdown\n                        .item(I).Click\n                        Exit For\n                    End If\n                Next I\n            End With\n        Next post\n        HTML.getElementById(""txtBirthDate"").Value = ""24/02/1990""\n        HTML.querySelector(""button[onclick=\'SearchEmployee()\']"").Click\n    End With\nEnd Sub\n\nReference to add to the library:\nMicrosoft Internet Controls\nMicrosoft HTML Object library\n\nWhen you execute the above script, it should give you the desired result.\nAnother way would be to go for using xmlhttp request which is way faster than IE. You need to pass the query string parameter arguments as dictionary through ""POST"" request. If you want to change the parameter as in, birth date,passportor nationality just do it in the QueryString. Btw, the Nationality parameter should be filled in with value instead of name as in, 100 for INDIA.  This is how your script should look like:\nSub Get_Data()\n    Dim res As Variant, QueryString$, ID$, Name$\n\n    QueryString = ""{""""PersonPassportNumber"""":""""J2659558"""",""""PersonNationality"""":""""100"""",""""PersonBirthDate"""":""""24/02/1990""""}""\n\n    With New XMLHTTP\n        .Open ""POST"", ""https://eservices.mol.gov.ae/SmartTasheel/Dashboard/GetEmployees"", False\n        .setRequestHeader ""User-Agent"", ""Mozilla/5.0""\n        .setRequestHeader ""Content-Type"", ""application/json""\n        .send QueryString\n        res = .responseText\n    End With\n\n    ID = Split(Split(Split(res, ""Employees"""":"")(1), ""ID"""":"""""")(1), """""","")(0)\n    Name = Split(Split(Split(res, ""Employees"""":"")(1), ""OtherData2"""":"""""")(1), """"""}"")(0)\n\n    [A1] = ID: [B1] = Name\nEnd Sub\n\nReference to add to the library:\nMicrosoft XML, V6.0\n\nRunning the above script, you should get the NAME and ID of your required search.\n']"
Selecting value from a dropdown list on a webpage using vba,"
On this site I am able to select the country and language from dropdown menu but when I click on ""Complete new application form"" button. It says fields are empty.
Any help would be appreciated.
Sub Test()

strURL = ""https://visa.kdmid.ru/PetitionChoice.aspx""

  With ie
    .Visible = True
    .navigate strURL

    While .Busy
        DoEvents
    Wend

    Set html = .document

    'Country where you will apply for visa.
    Set ctY = html.getElementById(""ctl00$phBody$Country"")
    For i = 1 To ctY.Options.Length
        If ctY.Options(i).Text = ""NETHERLANDS"" Then
            ctY.selectedIndex = i
            Exit For
        End If
    Next i

    'Select Language
    Set lnG = html.getElementById(""ctl00$phBody$ddlLanguage"")
    For i = 1 To lnG.Options.Length
        If lnG.Options(i).Text = ""ENGLISH"" Then
            lnG.selectedIndex = i
            Exit For
        End If
    Next i

    'Click I have read instructions check box
    html.getElementById(""ctl00$phBody$cbConfirm"").Click


    'Click apply button
    Set btnGo = html.forms(0).all(""ctl00$phBody$btnNewApplication"") 
    btnGo.Click

  End With

  End Sub

",3k,"
            0
        ","['\nSo you are on the right track but if you look at the HTML of the site there are actually two elements with the country selection- you got the first one, \'ctl00_phBody_Country\', but this is actually just the drop down, and the actual selected value is stored in \'ctl00_phBody_cddCountry_ClientState\'... the language section has similar structure. Lastly the accepted value is not just the country name you see in the drop down, it is actually a combination of a country code from the drop down and the country name....\nSee below for sample code:\nPublic Sub Test()\nDim IE As InternetExplorer\nDim HTMLDoc As HTMLDocument\n\nDim countryStr As String\nDim countryObj As HTMLObjectElement\nDim countryCodes As IHTMLElementCollection\nDim codeCounter As Long\nDim languageStr As String\nDim languageObj As HTMLObjectElement\nDim languageCodes As IHTMLElementCollection\n\ncountryStr = ""Netherlands""\nlanguageStr = ""English""\n\nSet IE = New InternetExplorer\n\nWith IE\n    .Visible = False\n    .Navigate ""https://visa.kdmid.ru/PetitionChoice.aspx?AspxAutoDetectCookieSupport=1""\n    While .Busy Or .ReadyState <> READYSTATE_COMPLETE: Wend\n    Set HTMLDoc = IE.document\nEnd With\n\nSet countryObj = HTMLDoc.getElementById(""ctl00_phBody_cddCountry_ClientState"")\nSet countryCodes = HTMLDoc.getElementById(""ctl00_phBody_Country"").getElementsByTagName(""option"")\nFor codeCounter = 0 To countryCodes.Length - 1\n    If countryCodes(codeCounter).innerText = UCase(countryStr) Then\n        countryObj.Value = countryCodes(codeCounter).Value & "":::"" & countryCodes(codeCounter).innerText & "":::""\n        While IE.Busy Or IE.ReadyState <> READYSTATE_COMPLETE: Wend\n        Exit For\n    End If\nNext\n\nSet languageObj = HTMLDoc.getElementById(""ctl00_phBody_cddLanguage_ClientState"")\nSet languageCodes = HTMLDoc.getElementById(""ctl00_phBody_ddlLanguage"").getElementsByTagName(""option"")\nFor codeCounter = 0 To languageCodes.Length - 1\n    If languageCodes(codeCounter).innerText = UCase(languageStr) Then\n        languageObj.Value = languageCodes(codeCounter).Value & "":::"" & languageCodes(codeCounter).innerText & "":::""\n        While IE.Busy Or IE.ReadyState <> READYSTATE_COMPLETE: Wend\n        Exit For\n    End If\nNext\n\nHTMLDoc.getElementById(""ctl00$phBody$cbConfirm"").Click\nWhile IE.Busy Or IE.ReadyState <> READYSTATE_COMPLETE: Wend\nHTMLDoc.getElementById(""ctl00_phBody_btnNewApplication"").Click      \'Launch Form\n\nIE.Quit\nSet IE = Nothing\nEnd Sub\n\n']"
how to instantiate the webdriver object from the custom library when doing web automation using robot framework,"
while defining user keywords in custom library for web automation,which library should be imported?selenium2library or importing webdriver from selenium.How to use the webdriver to click on some elements.Kindly explain with an example 
",1k,"
            0
        ","['\nIn most scenarios you do not need to instantiate the webdriver object. Usually you use the webdriver instance that Selenium2Library already has. How you access that instance depends on how you plan on interacting with Selenium2Library. See the ""Extending existing test libraries"" section in the user guide for options. Each options have pros and cons.\nIf you inherit Selenium2Library, then you would access the driver via self._current_browser().\nIf you plan on using the Selenium2Library directly instead of inheriting, you would declare both Selenium2Library and your custom libraries. The most convenient way to access the driver is through a private property as demonstrated below. \nfrom robot.libraries.BuiltIn import BuiltIn\n\nclass Selenium2LibraryExt(object):\n\n    @property\n    def _s2l(self):\n        return BuiltIn().get_library_instance(\'Selenium2Library\')\n\n    @property\n    def _driver(self):\n        return self._s2l._current_browser()\n\n    def perform_search(self, criteria):\n        textbox = self._driver.find_element_by_name(\'q\')\n        textbox.send_keys(criteria)\n        textbox.submit()\n\nTest suite file:\n*** Settings ***\nTest Teardown     Close All Browsers\nLibrary           Selenium2Library\nLibrary           c:/ws/Selenium2LibraryExt.py\n\n*** Test Cases ***\nDo a search\n    Open Browser    http://www.google.com/    gc\n    Perform Search    happiness\n\n', '\nI have found that inheriting Selenium2Library is usually enough, like this\nfrom Selenium2Library import Selenium2Library\n\nclass MySelenium2Library(Selenium2Library):\n    def my_keyword(self):\n        my_element = self.get_my_element()\n        self.click_element(my_element)\n\nIn Robot you import this new library\n*** Settings ***\nLibrary    MySelenium2Library.py\n\n*** Test Cases ***\nTest 1\n    My Keyword\n\nI have not needed webdriver to click elements. I do all my clicking with Selenium2Library click methods like click_element.\n']"
can't convert webbot script to an executable,"
I am trying to convert a python script which uses the webbot library for web automation.
As I tried to convert my running Python (3.6.5) script to an .exe file using pyinstaller I was getting an error that the path of the webbot module could not be found.
In order to overcome this problem I tried to specify the path of the module in the spec file, without success. An easier workaround suggests copying the downloaded folder webbot in the same folder where the .exe file is.
Its a very handy tool to use , i don't wanna ditch it .
",230,"
            0
        ","['\nIn order for this to work you should not convert it as one file like this\npyinstaller --onefile file.py\n\nbut like this\npyinstaller file.py\n\nAfter doing this the .exe could be launched without any problems.\nAn other error was coming because of trying to import webbot in my script. Probably this is a noob mistake, but one has to:\nfrom webbot import Browser\n\n']"
headless internet browser? [closed],"









                        As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, visit the help center for guidance.
                        
                    


Closed 10 years ago.



I would like to do the following. Log into a website, click a couple of specific links, then click a download link. I'd like to run this as either a scheduled task on windows or cron job on Linux. I'm not picky about the language I use, but I'd like this to run with out putting a browser window up on the screen if possible.
",70k,"
            71
        ","['\nHere are a list of headless browsers that I know about:\n\nHtmlUnit - Java. Custom browser engine. Limited JavaScript support/DOM emulated. Open source.\nGhost - Python only. WebKit-based. Full JavaScript support. Open source.\nTwill - Python/command line. Custom browser engine. No JavaScript. Open source.\nPhantomJS - Command line/all platforms. WebKit-based. Full JavaScript support. Open source.\nAwesomium - C++/.NET/all platforms. Chromium-based. Full JavaScript support. Commercial/free.\nSimpleBrowser - .NET 4/C#. Custom browser engine. No JavaScript support. Open source.\nZombieJS - Node.js. Custom browser engine. JavaScript support/emulated DOM. Open source. Based on jsdom.\nEnvJS - JavaScript via Java/Rhino. Custom browser engine. JavaScript support/emulated DOM. Open source.\nWatir-webdriver with headless gem - Ruby via WebDriver.  Full JS Support via Browsers (Firefox/Chrome/Safari/IE). \nSpynner - Python only.  PyQT and WebKit. \njsdom - Node.js. Custom browser engine. Supports JS via emulated DOM. Open source.\nTrifleJS - port of PhantomJS using MSIE (Trident) and V8. Open source.\nui4j - Pure Java 8 solution. A wrapper library around the JavaFx WebKit Engine incl. headless modes.\nChromium Embedded Framework - Full up-to-date embedded version of Chromium with off-screen rendering as needed. C/C++, with .NET wrappers (and other languages). As it is Chromium, it has support for everything. BSD licensed.\nSelenium WebDriver - Full support for JavaScript via browsers (Firefox, IE, Chrome, Safari, Opera). Officially supported bindings are C#, Java, JavaScript, Haskell, Perl, Ruby, PHP, Python, Objective-C, and R. Unofficial bindings are available for Qt and Go. Open source.\n\nHeadless browsers that have JavaScript support via an emulated DOM generally have issues with some sites that use more advanced/obscure browser features, or have functionality that has visual dependencies (e.g. via CSS positions and so forth), so whilst the pure JavaScript support in these browsers is generally complete, the actual supported browser functionality should be considered as partial only.\n(Note: Original version of this post only mentioned HtmlUnit, hence the comments. If you know of other headless browser implementations and have edit rights, feel free to edit this post and add them.)\n', ""\nCheck out twill, a very convenient scripting language for precisely what you're looking for. From the examples:\nsetlocal username <your username>\nsetlocal password <your password>\n\ngo http://www.slashdot.org/\nformvalue 1 unickname $username\nformvalue 1 upasswd $password\nsubmit\n\ncode 200     # make sure form submission is correct!\n\nThere's also a Python API if you're looking for more flexibility.\n"", '\nHave a look at PhantomJS, a JavaScript based automation framework available for Windows, Mac OS X, Linux, other *ix systems.\nUsing PhantomJS, you can do things like this:\nconsole.log(\'Loading a web page\');\n\nvar page = new WebPage();\nvar url = ""http://www.phantomjs.org/"";\n\npage.open(url, function (status) {\n    // perform your task once the page is ready ...\n    phantom.exit();\n});\n\nOr evaluate a page\'s title:\nvar page = require(\'webpage\').create();\npage.open(url, function (status) {\n    var title = page.evaluate(function () {\n        return document.title;\n    });\n    console.log(\'Page title is \' + title);\n});\n\nExamples from PhantomJS\' Quickstart page. You can even render a page to a PNG, JPEG or PDF using the render() method.\n', '\nI once did that using the Internet Explorer ActiveX control (WebBrowser, MSHTML). You can instantiate it without making it visible.\nThis can be done with any language which supports COM (Delphi, VB6, VB.net, C#, C++, ...)\nOf course this is a quick-and-dirty solution and might not be appropriate in your situation.\n', '\nPhantomJS is a headless WebKit-based browser that you can script with JavaScript.\n', '\nExcept for the auto-download of the file (as that is a dialog box) a win form with the embedded webcontrol will do this.\nYou could look at Watin and Watin Recorder. They may help with C# code that can login to your website, navigate to a URL and possibly even help automate the file download.\nYMMV though.\n', ""\nIf the links are known (e.g, you don't have to search the page for them), then you can probably use wget. I believe that it will do the state management across multiple fetches.\nIf you are a little more enterprising, then I would delve into the new goodies in Python 3.0. They redid the interface to their HTTP stack and, IMHO, have a very nice interface that is susceptible to this type of scripting.\n"", '\nNode.js with YUI on the server. Check out this video: http://www.yuiblog.com/blog/2010/09/29/video-glass-node/\nThe guy in this video Dav Glass shows an example of how he uses node to fetch a page from Digg. He then attached YUI to the DOM he grabbed and can completely manipulate it.\n', '\nIf you use PHP - try http://mink.behat.org/\n', '\nYou can use Watir with Ruby or Watin with mono.\n', ""\nAlso you can use Live Http Headers (Firefox extension) to record headers which are sent to site (Login -> Links -> Download Link) and then replicate them with php using fsockopen. Only thing which you'll probably need to variate is the cookie's value which you receive from login page. \n"", '\nlibCURL could be used to create something like this.\n', '\nCan you not just use a download manager?\nThere\'s better ones, but FlashGet has browser-integration, and supports authentication. You can login, click a bunch of links and queue them up and schedule the download.\nYou could write something that, say, acts as a proxy which catches specific links and queues them for later download, or a Javascript bookmarklet that modifies links to go to ""http://localhost:1234/download_queuer?url="" + $link.href and have that queue the downloads - but you\'d be reinventing the download-manager-wheel, and with authentication it can be more complicated..\nOr, if you want the ""login, click links"" bit to be automated also - look into screen-scraping.. Basically you load the page via a HTTP library, find the download links and download them..\nSlightly simplified example, using Python:\nimport urllib\nfrom BeautifulSoup import BeautifulSoup\nsrc = urllib.urlopen(""http://%s:%s@example.com"" % (""username"", ""password""))\nsoup = BeautifulSoup(src)\n\nfor link_tag in soup.findAll(""a""):\n    link = link_tag[""href""]\n    filename = link.split(""/"")[-1] # get everything after last /\n    urllib.urlretrieve(link, filename)\n\nThat would download every link on example.com, after authenticating with the username/password of ""username"" and ""password"". You could, of course, find more specific links using BeautifulSoup\'s HTML selector\'s (for example, you could find all links with the class ""download"", or URL\'s that start with http://cdn.example.com).\nYou could do the same in pretty much any language..\n', ""\n.NET contains System.Windows.Forms.WebBrowser.  You can create an instance of this, send it to a URL, and then easily parse the html on that page.  You could then follow any links you found, etc.  \nI have worked with this object only minimally, so I'm no expert, but if you're already familiar with .NET then it would probably be worth looking into.\n""]"
How can I login to a website with Python?,"
How can I do it? 
I was trying to enter some specified link (with urllib), but to do it, I need to log in.
I have this source from the site:
<form id=""login-form"" action=""auth/login"" method=""post"">
    <div>
    <!--label for=""rememberme"">Remember me</label><input type=""checkbox"" class=""remember"" checked=""checked"" name=""remember me"" /-->
    <label for=""email"" id=""email-label"" class=""no-js"">Email</label>
    <input id=""email-email"" type=""text"" name=""handle"" value="""" autocomplete=""off"" />
    <label for=""combination"" id=""combo-label"" class=""no-js"">Combination</label>
    <input id=""password-clear"" type=""text"" value=""Combination"" autocomplete=""off"" />
    <input id=""password-password"" type=""password"" name=""password"" value="""" autocomplete=""off"" />
    <input id=""sumbitLogin"" class=""signin"" type=""submit"" value=""Sign In"" />

Is this possible?
",372k,"
            105
        ","['\nMaybe you want to use twill. It\'s quite easy to use and should be able to do what you want.\nIt will look like the following:\nfrom twill.commands import *\ngo(\'http://example.org\')\n\nfv(""1"", ""email-email"", ""blabla.com"")\nfv(""1"", ""password-clear"", ""testpass"")\n\nsubmit(\'0\')\n\nYou can use showforms() to list all forms once you used go… to browse to the site you want to login. Just try it from the python interpreter.\n', '\nLet me try to make it simple, suppose URL of the site is www.example.com and you need to sign up by filling username and password, so we go to the login page say http://www.example.com/login.php now and view it\'s source code and search for the action URL it will be in form tag something like \n <form name=""loginform"" method=""post"" action=""userinfo.php"">\n\nnow take userinfo.php to make absolute URL which will be \'http://example.com/userinfo.php\', now run a simple python script \nimport requests\nurl = \'http://example.com/userinfo.php\'\nvalues = {\'username\': \'user\',\n          \'password\': \'pass\'}\n\nr = requests.post(url, data=values)\nprint r.content\n\nI Hope that this helps someone somewhere someday.\n', '\nTypically you\'ll need cookies to log into a site, which means cookielib, urllib and urllib2. Here\'s a class which I wrote back when I was playing Facebook web games:\nimport cookielib\nimport urllib\nimport urllib2\n\n# set these to whatever your fb account is\nfb_username = ""your@facebook.login""\nfb_password = ""secretpassword""\n\nclass WebGamePlayer(object):\n\n    def __init__(self, login, password):\n        """""" Start up... """"""\n        self.login = login\n        self.password = password\n\n        self.cj = cookielib.CookieJar()\n        self.opener = urllib2.build_opener(\n            urllib2.HTTPRedirectHandler(),\n            urllib2.HTTPHandler(debuglevel=0),\n            urllib2.HTTPSHandler(debuglevel=0),\n            urllib2.HTTPCookieProcessor(self.cj)\n        )\n        self.opener.addheaders = [\n            (\'User-agent\', (\'Mozilla/4.0 (compatible; MSIE 6.0; \'\n                           \'Windows NT 5.2; .NET CLR 1.1.4322)\'))\n        ]\n\n        # need this twice - once to set cookies, once to log in...\n        self.loginToFacebook()\n        self.loginToFacebook()\n\n    def loginToFacebook(self):\n        """"""\n        Handle login. This should populate our cookie jar.\n        """"""\n        login_data = urllib.urlencode({\n            \'email\' : self.login,\n            \'pass\' : self.password,\n        })\n        response = self.opener.open(""https://login.facebook.com/login.php"", login_data)\n        return \'\'.join(response.readlines())\n\nYou won\'t necessarily need the HTTPS or Redirect handlers, but they don\'t hurt, and it makes the opener much more robust. You also might not need cookies, but it\'s hard to tell just from the form that you\'ve posted. I suspect that you might, purely from the \'Remember me\' input that\'s been commented out.\n', '\nWeb page automation ? Definitely ""webbot""\nwebbot even works web pages which have dynamically changing id and classnames and has more methods and features than selenium or mechanize.\n\nHere\'s a snippet :)\n\nfrom webbot import Browser \nweb = Browser()\nweb.go_to(\'google.com\') \nweb.click(\'Sign in\')\nweb.type(\'mymail@gmail.com\' , into=\'Email\')\nweb.click(\'NEXT\' , tag=\'span\')\nweb.type(\'mypassword\' , into=\'Password\' , id=\'passwordFieldId\') # specific selection\nweb.click(\'NEXT\' , tag=\'span\') # you are logged in ^_^\n\nThe docs are also pretty straight forward and simple to  use : https://webbot.readthedocs.io\n', ""\nimport cookielib\nimport urllib\nimport urllib2\n\nurl = 'http://www.someserver.com/auth/login'\nvalues = {'email-email' : 'john@example.com',\n          'password-clear' : 'Combination',\n          'password-password' : 'mypassword' }\n\ndata = urllib.urlencode(values)\ncookies = cookielib.CookieJar()\n\nopener = urllib2.build_opener(\n    urllib2.HTTPRedirectHandler(),\n    urllib2.HTTPHandler(debuglevel=0),\n    urllib2.HTTPSHandler(debuglevel=0),\n    urllib2.HTTPCookieProcessor(cookies))\n\nresponse = opener.open(url, data)\nthe_page = response.read()\nhttp_headers = response.info()\n# The login cookies should be contained in the cookies variable\n\nFor more information visit: https://docs.python.org/2/library/urllib2.html\n"", '\nWebsites in general can check authorization in many different ways, but the one you\'re targeting seems to make it reasonably easy for you.\nAll you need is to POST to the auth/login URL a form-encoded blob with the various fields you see there (forget the labels for, they\'re decoration for human visitors).  handle=whatever&password-clear=pwd and so on, as long as you know the values for the handle (AKA email) and password you should be fine.\nPresumably that POST will redirect you to some ""you\'ve successfully logged in"" page with a Set-Cookie header validating your session (be sure to save that cookie and send it back on further interaction along the session!).\n', '\nFor HTTP things, the current choice should be: Requests- HTTP for Humans\n']"
Textbox events?,"
I am using Kantu to automate filling out some forms. There is a textbox that when a persons id number is entered and you click into another box or tab out of the textbox it will load that persons vcard. I can try to expound if you need more clarity. 
I don't know much but i'm guessing me clicking into another box is activiating some kind of event to load this vcard. I can't seem to simulate this. Does anyone know of a way to do so?
",341,"
            1
        ","[""\nWelcome to SO. There are different option to get the associated events.\nLet's take the stackoverflow search box (the one which is on the top with s-input js-search-field class)\n1) Using getEventListeners\nGo to chrome console in the dev tools and then use getEventListeners(element). \n\ngetEventListeners(document.querySelector('.s-input.js-search-field '))\n\n\n2) Using Dev Tools Event Listner\nGo to chrome dev tools and select the element for which you want to know the events, click on the Event Listeners tab on the right hand side pane.\n   \n3) Using the firefox event \nGoto dev tools in firefox and click on events bubble at the end of html element tag. \n    \n"", '\nSample of code\nI consulted with a friend who showed me the problem was an onblur event triggered by clicking away. \nThe solution to my problem was to call the event using the following line, \n{\n  ""Command"": ""storeEval"",\n  ""Target"": ""lawformTextBlur(document.getElementById(\'_f4\'))"",\n  ""Value"": """"\n},\n\n']"
puppeteer wait for page/DOM updates - respond to new items that are added after initial loading,"
I want to use Puppeteer to respond to page updates.
The page shows items and when I leave the page open new items can appear over time.
E.g. every 10 seconds a new item is added.
I can use the following to wait for an item on the initial load of the page:
await page.waitFor("".item"");
console.log(""the initial items have been loaded"")

How can I wait for / catch future items?
I would like to achieve something like this (pseudo code):
await page.goto('http://mysite');
await page.waitFor("".item"");
// check items (=these initial items)

// event when receiving new items:
// check item(s) (= the additional [or all] items)

",7k,"
            5
        ","['\nYou can use exposeFunction to expose a local function:\nawait page.exposeFunction(\'getItem\', function(a) {\n    console.log(a);\n});\n\nThen you can use page.evaluate to create an observer and listen to new nodes created inside a parent node.\nThis example scrapes (it\'s just an idea, not a final work) the python chat in Stack Overflow, and prints new items being created in that chat.\nvar baseurl =  \'https://chat.stackoverflow.com/rooms/6/python\';\nconst browser = await puppeteer.launch({headless: false});\nconst page = await browser.newPage();\nawait page.goto(baseurl);\n\nawait page.exposeFunction(\'getItem\', function(a) {\n    console.log(a);\n});\n\nawait page.evaluate(() => {\n    var observer = new MutationObserver((mutations) => { \n        for(var mutation of mutations) {\n            if(mutation.addedNodes.length) {\n                getItem(mutation.addedNodes[0].innerText);\n            }\n        }\n    });\n    observer.observe(document.getElementById(""chat""), { attributes: false, childList: true, subtree: true });\n});\n\n', '\nAs an alternative to the excellent current answer which injects a MutationObserver using evaluate which forwards the data to an exposed Node function, Puppeteer offers a higher-level function called page.waitForFunction that blocks on an arbitrary predicate and uses either a MutationObserver or requestAnimationFrame under the hood to determine when to re-evaluate the predicate.\nCalling page.waitForFunction in a loop might add overhead since each new call involves registering a fresh observer or RAF. You\'d have to profile for your use case -- this isn\'t something I\'d worry much about prematurely, though.\nThat said, the RAF option may provide tighter latency than MO for the cost of some extra CPU cycles to poll constantly.\nHere\'s a minimal example on the following site that offers a periodically updating feed:\n\n\nconst wait = ms => new Promise(r => setTimeout(r, ms));\nconst r = (lo, hi) => ~~(Math.random() * (hi - lo) + lo);\n\nconst randomString = n =>\n  [...Array(n)].map(() => String.fromCharCode(r(97, 123))).join("""")\n;\n\n(async () => {\n  for (let i = 0; i < 500; i++) {\n    const el = document.createElement(""div"");\n    document.body.appendChild(el);\n    el.innerText = randomString(r(5, 15));\n    await wait(r(1000, 5000));\n  }\n})();\n\n\nconst puppeteer = require(""puppeteer"");\n\nconst html = `\n<html><body><div class=""container""></div><script>\nconst wait = ms => new Promise(r => setTimeout(r, ms));\nconst r = (lo, hi) => ~~(Math.random() * (hi - lo) + lo);\nconst randomString = n =>\n  [...Array(n)].map(() => String.fromCharCode(r(97, 123))).join("""")\n;\n(async () => {\n  for (;;) {\n    const el = document.createElement(""div"");\n    document.querySelector("".container"").appendChild(el);\n    el.innerText = randomString(r(5, 15));\n    await wait(r(1000, 5000));\n  }\n})();\n</script></body></html>\n`;\nlet browser;\n(async () => {\n  browser = await puppeteer.launch({headless: false});\n  const [page] = await browser.pages();\n  await page.setContent(html);\n  \n  for (;;) {\n    await page.waitForFunction((el, oldLength) =>\n      el.children.length > oldLength,                           // predicate\n      {polling: ""mutation"" /* or: ""raf"" */, timeout: 0},        // wFF options\n      await page.$("".container""),                               // elem to watch\n      await page.$eval("".container"", el => el.children.length), // oldLength\n    );\n    const selMostRecent = "".container div:last-child"";\n    console.log(await page.$eval(selMostRecent, el => el.textContent));\n  }\n})()\n  .catch(err => console.error(err))\n  .finally(() => browser?.close())\n;\n\nSee also:\n\nPass a function inside page.waitForFunction() with puppeteer which shows a generic waitForTextChange helper function that wraps page.waitForFunction.\nRealtime scrape a chat using Nodejs which aptly suggests the alternative approach of intercepting API responses as they populate the feed, when possible.\n\n']"
element not interactable exception in selenium web automation,"
In the below code i cannot send password keys in the password field, i tried clicking the field, clearing the field and sending the keys. But now working in any of the method. But its working if i debug and test
  public class TestMail {
   protected static WebDriver driver;

   protected static String result;

   @BeforeClass

   public static void setup()  {
              System.setProperty(""webdriver.gecko.driver"",""D:\\geckodriver.exe"");

   driver = new FirefoxDriver();

   driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);

  }

   @Test

 void Testcase1() {

   driver.get(""http://mail.google.com"");

   WebElement loginfield = driver.findElement(By.name(""Email""));
   if(loginfield.isDisplayed()){
       loginfield.sendKeys(""ragesh@gmail.in"");
   }
   else{
  WebElement newloginfield = driver.findElemnt(By.cssSelector(""#identifierId""));                                      
       newloginfield.sendKeys(""ragesh@gmail.in"");
      // System.out.println(""This is new login"");
   }


    driver.findElement(By.name(""signIn"")).click();

  // driver.findElement(By.cssSelector("".RveJvd"")).click();

   driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
 // WebElement pwd = driver.findElement(By.name(""Passwd""));
  WebElement pwd = driver.findElement(By.cssSelector(""#Passwd""));

  pwd.click();
  pwd.clear();
 // pwd.sendKeys(""123"");
 if(pwd.isEnabled()){
     pwd.sendKeys(""123"");
 }
 else{
     System.out.println(""Not Enabled"");
 }

",314k,"
            33
        ","['\nTry setting an implicit wait of maybe 10 seconds.\ngmail.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\nOr set an explicit wait. An explicit waits is code you define to wait for a certain condition to occur before proceeding further in the code. In your case, it is the visibility of the password input field. (Thanks to ainlolcat\'s comment)\nWebDriver gmail= new ChromeDriver();\ngmail.get(""https://www.gmail.co.in""); \ngmail.findElement(By.id(""Email"")).sendKeys(""abcd"");\ngmail.findElement(By.id(""next"")).click();\nWebDriverWait wait = new WebDriverWait(gmail, 10);\nWebElement element = wait.until(\nExpectedConditions.visibilityOfElementLocated(By.id(""Passwd"")));\ngmail.findElement(By.id(""Passwd"")).sendKeys(""xyz"");\n\nExplanation: The reason selenium can\'t find the element is because the id of the password input field is initially Passwd-hidden. After you click on the ""Next"" button, Google first verifies the email address entered and then shows the password input field (by changing the id from Passwd-hidden to Passwd). So, when the password field is still hidden (i.e. Google is still verifying the email id), your webdriver starts searching for the password input field with id Passwd which is still hidden. And hence, an exception is thrown.\n', '\n""element not interactable"" error can mean two things :\na.  Element has not properly rendered:\nSolution for this is just to use implicit /explicit wait\n\nImplicit wait :\ndriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\nExplicit wait :\nWebDriverWait wait=new WebDriverWait(driver, 20);\nelement1 = wait.until(ExpectedConditions.elementToBeClickable(By.className(""fa-stack-1x"")));\n\n\nb. Element has rendered but it is not in the visible part of the screen:\nSolution is just to scroll till the element. Based on the version of Selenium it can be handled in different ways but I will provide a solution that works in all versions :\n    JavascriptExecutor executor = (JavascriptExecutor) driver;\n    executor.executeScript(""arguments[0].scrollIntoView(true);"", element1);\n\n\nSuppose all this fails then another way is to again make use of Javascript executor as following :\nexecutor.executeScript(""arguments[0].click();"", element1);\n\nIf you still can\'t click , then it could again mean two things :\n\n\n1. Iframe\nCheck the DOM to see if the element you are inspecting lives in any frame. If that is true then you would need to switch to this frame before attempting any operation.\n    driver.switchTo().frame(""a077aa5e""); //switching the frame by ID\n    System.out.println(""********We are switching to the iframe*******"");\n    driver.findElement(By.xpath(""html/body/a/img"")).click();\n\n2. New tab\nIf a new tab has opened up and the element exists on it then you again need to code something like below to switch to it before attempting operation.\nString parent = driver.getWindowHandle();\ndriver.findElement(By.partialLinkText(""Continue"")).click();\nSet<String> s = driver.getWindowHandles();\n// Now iterate using Iterator\nIterator<String> I1 = s.iterator();\nwhile (I1.hasNext()) {\nString child_window = I1.next();\nif (!parent.equals(child_window)) {\n    driver.switchTo().window(child_window);\n    element1.click() \n}\n\n', '\nPlease try selecting the password field like this.\n    WebDriverWait wait = new WebDriverWait(driver, 10);\n    WebElement passwordElement = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(""#Passwd"")));\n    passwordElement.click();\n  passwordElement.clear();\n     passwordElement.sendKeys(""123"");\n\n', '\nyou may also try full xpath, I had a similar issue where I had to click on an element which has a property javascript onclick function. the full xpath method worked and no interactable exception was thrown.\n', '\nIn my case the element that generated the Exception was a button belonging to a form. I replaced\nWebElement btnLogin = driver.findElement(By.cssSelector(""button""));\nbtnLogin.click();\n\nwith\nbtnLogin.submit();\n\nMy environment was chromedriver windows 10\n', ""\nIn my case, I'm using python-selenium.\nI have two instructions. The second instruction wasn't able to execute.\nI put a time.sleep(1) between two instructions and I'm done.\nIf you want you can change the sleep amount according to your need.\n"", '\nI had the same problem and then figured out the cause. I was trying to type in a span tag instead of an input tag. My XPath was written with a span tag, which was a wrong thing to do. I reviewed the Html for the element and found the problem. All I then did was to find the input tag which happens to be a child element. You can only type in an input field if your XPath is created with an input tagname\n', ""\nI'm going to hedge this answer with this: I know it's crap.. and there's got to be a better way. (See above answers) But I tried all the suggestions here and still got nill. Ended up chasing errors, ripping the code to bits. Then I tried this:\nimport keyboard    \nkeyboard.press_and_release('tab')\nkeyboard.press_and_release('tab')\nkeyboard.press_and_release('tab') #repeat as needed\nkeyboard.press_and_release('space') \n\nIt's pretty insufferable and you've got to make sure that you don't lose focus otherwise you'll just be tabbing and spacing on the wrong thing.\nMy assumption on why the other methods didn't work for me is that I'm trying to click on something the developers didn't want a bot clicking on. So I'm not clicking on it!\n"", '\nI got this error because I was using a wrong CSS selector with the Selenium WebDriver Node.js function By.css().\nYou can check if your selector is correct by using it in the web console of your web browser (Ctrl+Shift+K shortcut), with the JavaScript function document.querySelectorAll().\n', '\nIf it\'s working in the debug, then wait must be the proper solution.\nI will suggest to use the explicit wait, as given below:\nWebDriverWait wait = new WebDriverWait(new ChromeDriver(), 5);\nwait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(""#Passwd"")));\n\n', '\nI came across this error too.  I thought it might have been because the field was not visible.  I tried the scroll solution above and although the field became visible in the controlled browser session I still got the exception.  The solution I am committing looks similar to below.  It looks like the event can bubble to the contained input field and the end result is the Selected property becomes true.\nThe field appears in my page something like this.\n<label>\n  <input name=""generic"" type=""checkbox"" ... >\n<label>\n\nThe generic working code looks more or less like this:\nvar checkbox = driver.FindElement(By.Name(""generic""), mustBeVisible: false);\ncheckbox.Selected.Should().BeFalse();\nvar label = checkbox.FindElement(By.XPath(""..""));\nlabel.Click();\ncheckbox.Selected.Should().BeTrue();\n\nYou\'ll need to translate this to your specific language.  I\'m using C# and FluentAssertions.  This solution worked for me with Chrome 94 and Selenium 3.141.0.\n', ""\nI had to hover over the element first for the sub-elements to appear. I didn't take that into account at first.\n    WebElement boardMenu = this.driver.findElement(By.linkText(boardTitle));\n    Actions action = new Actions(this.driver);\n\n    action.moveToElement(boardMenu).perform();\n\nAnother tip is to check that you are having one element of that DOM. Try using Ctrl+F when inspecting the web page and check your xpath there; it should return one element if you are going with the findElement method.\n""]"
Web automation from C++,"
We need to do some fairly complex web automation from C++ application (log into application, do some actions, logout), but performance is really important so we are looking at options.

Is there a way to drive WebKit or other headless engine directly from C++, without the need for few more layers in between (like selenium+webdriver+network communication+...)? Chromedriver perhaps?
If option 1 is not possible, what is the most optimal way to run WebDriver (with real browser) from C++?

",38k,"
            18
        ","['\nYou can use selenium server and JsonWireProtocol. In C++ you can implement CURL requests to selenium server and do web automation with C++.\nUse this link first: My fork of Webdriver++.\nThere are also some C++ libraries that do this work. \nThe first is Webdriver++ By sekogan but last commit was 3 years ago, and it seems not all things works for now.\nThe second is my fork of Webdriver++, i\'ve fixed some bugs and make this project as shared library, so you can use it in any C++ project.\nThis is an example of how you can use my My fork of Webdriver++.\n#include <webdriverxx/webdriverxx.h>\nusing namespace webdriverxx;\n\nint main() {\n   WebDriver firefox = Start(Firefox());\n   firefox\n       .Navigate(""http://google.com"")\n       .FindElement(ByClass(""class_name""))\n       .SendKeys(""Hello, world!"")\n       .Submit();\n   return 0;    \n}\n\n', ""\nYou should look into PhantomJS (a headless WebKit browser), which comes with GhostDriver, which is the WebDriver protocol implementation for PhantomJS.\nYou will still need to use one of the WebDriver language bindings, which I'm not aware of any of the language bindings that are in C++, but perhaps one of the available languages could be used by your team for automation purposes.\nWorst case, you could always create your WebDriver script in Python, and call the Python script from your C++ application.\n""]"
How to select elements within an iframe element in Puppeteer,"
Since ESPN does not provide an API, I am trying to use Puppeteer to scrape data about my fantasy football league. However, I am having a hard time trying to login using puppeteer due to the login form being nested with an iframe element.
I have gone to http://www.espn.com/login and selected the iframe. I can't seem to select any of the elements within the iframe except for the main section by doing
    frame.$('.main')

This is the code that seems to get the iframe with the login form.
    const browser = await puppeteer.launch({headless:false});
    const page = await browser.newPage();

    await page.goto('http://www.espn.com/login')
    await page.waitForSelector(""iframe"");

    const elementHandle = await page.$('div#disneyid-wrapper iframe');
    const frame = await elementHandle.contentFrame();
    await browser.close()

I want to be able to access the username field, password field, and the login button within the iframe element. Whenever I try to access these fields, I get a return of null.
",26k,"
            17
        ","['\nYou can get the iframe using contentFrame as you are doing now, and then call $.\nconst browser = await puppeteer.launch({ headless: false });\nconst page = await browser.newPage();\n\nawait page.goto(\'http://www.espn.com/login\')\n\nconst elementHandle = await page.waitForSelector(\'div#disneyid-wrapper iframe\');\nconst frame = await elementHandle.contentFrame();\nawait frame.waitForSelector(\'[ng-model=""vm.username""]\');\nconst username = await frame.$(\'[ng-model=""vm.username""]\');\nawait username.type(\'foo\');\nawait browser.close()\n\n\n', ""\nI had an issue with finding stripe elements. \nThe reason for that is the following: \n\nYou can't access an  with different origin using JavaScript, it would be a huge security flaw if you could do it. For the same-origin policy browsers block scripts trying to access a frame with a different origin. See more detailed answer here\n\nTherefore when I tried to use puppeteer's methods:Page.frames() and Page.mainFrame(). ElementHandle.contentFrame() I did not return any iframe to me. The problem is that it was happening silently and I couldn't figure out why it couldn't find anything.\nAdding these arguments to launch options solved the issue:\n\n '--disable-web-security',\n'--disable-features=IsolateOrigins,site-per-process'\n\n""]"
Accessing an element with no attributes in Watir,"
Using Watir, is there a way to access an element without attributes?
For example:
<span>Text</span>

I'd like to avoid using xpath, but if that's the only way it's cool.
",7k,"
            6
        ","['\nDisregarding the non-WATIR issues of having tags in the first place, or requesting unique attributes from your developers (or yourself), you can always access an element via its parent elements, or by index.\nFor example:\n    \n       \n          Text\n       \n    \n@browser.div(:name => ""content"").span(:index => 1)\n#this is the first span element inside this div\n\nYou can work through however many unique elements you need to before reaching the child span element, without using Xpath.  Of course, you only need one unique parent element to reach that specific child element, and you work down from that to the child.\ndiv(:how => what).table(:how => what).td(:how => what).span(:how => what).text\n\nAnother example, assuming it is the nth span on the page:\n       @browser.span(:index => n)\nThe by-index approach is very brittle and prone to breaking when any update is made to the page, however.\n', '\nIf it has text:\nbrowser.span(:text => ""Text"")\n\nIf you know only part of the text you can use regular expression:\nbrowser.span(:text => /Text/)\n\n', '\nThere are basically three ways to address this particular challenge.  Zeljko has addressed the first which is based on what is inside the element such as known text.  Adam addresses the most common way, what is enclosing or containing the element  I\'ll address the third way, which is what is enclosed-by or beside the element.  \nIf you have a known element that is inside the one you want, then you can start with that and use the .parent method to get the \'container\' element.  This can also be used to find a \'sibling\' element by using .parent to get to the one you want via a common container such as a table row.  The first use is fairly obvious, but the second is probably more common and very useful when working with tables.\nFor example Lets say you have a table with multiple rows of data where one column is unique part numbers, and another column has ""add to cart"" links.  Now, if you want to add a specific part to your cart, you could use Index combined with the text \'add to cart\' using code like this based on it being the 5th link with that specific text\nbrowser.link(:text => \'add to cart\', :index => 4).click\n\nBut this is brittle because as soon as the results change, (which can happen a lot with live data) your part is no longer the 5th one in that table, and your test would break. You would need some verification you\'ve found the correct part and not something else on that row. However, in watir you can do something like this:\nbrowser.cell(:text => \'Part no. 123-45\').parent.link(:text => \'add to cart\').click\n\nIn the case of a table cell, the parent of the cell will usually be a table row, and thus in plain english this translates to \'find the cell with \'part no 123-45\' in it, and then in that same row find and click on the \'add to cart\' link.  (although I\'m guessing you figured that out just by reading the code.) \nYou can use this to get any \'sibling\' or even just the \'parent\' itself where there\'s some unique element next to or within the object you need to interact with.\nYou can probably do something similar to that with Xpath, but good luck making any sense out of it when reading the code five weeks later.  This is one reason I vastly prefer Watir and Watir-Webdriver vs Selenium.\n']"
Puppeteer: Get innerHTML,"
Does anybody know how to get the innerHTML or text of an element? Or even better; how to click an element with a specific innerHTML? This is how it would work with normal JavaScript:
var found = false
$(selector).each(function() {
    if (found) return;
    else if ($(this).text().replace(/[^0-9]/g, '') === '5' {
        $(this).trigger('click');
        found = true
    }
});

Thanks in advance for any help!
",59k,"
            39
        ","['\nThis is how i get innerHTML:\npage.$eval(selector, (element) => {\n  return element.innerHTML\n})\n\n', ""\nReturning innerHTML of an Element\nYou can use the following methods to return the innerHTML of an element:\npage.$eval()\nconst inner_html = await page.$eval('#example', element => element.innerHTML);\n\npage.evaluate()\nconst inner_html = await page.evaluate(() => document.querySelector('#example').innerHTML);\n\npage.$() / elementHandle.getProperty() / jsHandle.jsonValue()\nconst element = await page.$('#example');\nconst element_property = await element.getProperty('innerHTML');\nconst inner_html = await element_property.jsonValue();\n\n\nClicking an Element with Specific innerHTML\nYou can use the following methods to click on an element based on the innerHTML that is contained within the element:\npage.$$eval()\nawait page.$$eval('.example', elements => {\n  const element = elements.find(element => element.innerHTML === '<h1>Hello, world!</h1>');\n  element.click();\n});\n\npage.evaluate()\nawait page.evaluate(() => {\n  const elements = [...document.querySelectorAll('.example')];\n  const element = elements.find(element => element.innerHTML === '<h1>Hello, world!</h1>');\n  element.click();\n});\n\npage.evaluateHandle() / elementHandle.click()\nconst element = await page.evaluateHandle(() => {\n  const elements = [...document.querySelectorAll('.example')];\n  const element = elements.find(element => element.innerHTML === '<h1>Hello, world!</h1>');\n  return element;\n});\n\nawait element.click();\n\n"", ""\nThis should work with puppeteer:)\nconst page = await browser.newPage();\nconst title = await page.evaluate(el => el.innerHTML, await page.$('h1'));\n\n"", ""\nYou can leverage the page.$$(selector) to get all your target elments and then use page.evaluate() to get the content(innerHTML), then apply your criteria. It should look something like: \nconst targetEls = await page.$$('yourFancySelector');\nfor(let target of targetEls){\n  const iHtml = await page.evaluate(el => el.innerHTML, target); \n  if (iHtml.replace(/[^0-9]/g, '') === '5') {\n    await target.click();\n    break;\n  }\n}\n\n"", '\nWith regard to this part of your question...\n\n""Or even better; how to click an element with a specific innerHTML.""\n\nThere are some particulars around innerHTML, innerText, and textContent that might give you grief. Which you can work-around using a sufficiently loose XPath query with Puppeteer v1.1.1.  \nSomething like this:\nconst el = await page.$x(\'//*[text()[contains(., ""search-text-here"")]]\');\nawait el[0].click({     \n                button: \'left\',\n                clickCount: 1,\n                delay: 50\n            });\n\nJust keep in mind that you will get an array of ElementHandles back from that query. So... the particular item you are looking for might not be at [0] if your text isn\'t unique. \nOptions passed to .click() aren\'t necessary if all you need is a single left-click.\n', ""\nI can never get the .innerHtml to work reliable. I always do the following:\nlet els = page.$$('selector');\nfor (let el of els) {\n  let content = await (await el.getProperty('textContent')).jsonValue();\n}\n\nThen you have your text in the 'content' variable.\n"", ""\nYou can simply write as below. (no need await sentence in the last part)\nconst center = await page.$eval('h2.font-34.uppercase > strong', e => e.innerHTML);\n\n"", '\n<div id=""innerHTML"">Hello</div>\n\n\nvar myInnerHtml = document.getElementById(""innerHTML"").innerHTML;\nconsole.log(myInnerHtml);\n\n']"
Automatic login script for a website on windows machine?,"
I saw some guy had a file (I guess a batch file). On clicking of the batch file he was able to log in to multiple sites. (Perhaps it was done using VB.)
I looked for such a script on Google but didn't find anything useful.
I know a bit of C++ and UNIX (also some HTML and JavaScript). I don't know if it can be done on a windows machine using these languages, but even if it could be done I think it would be difficult compared to VB or C## or some other high level languages.
I learned how to open multiple sites using basic windows batch commands enclosed in a batch file like:
start http://www.gmail.com
start http://stackoverflow.com

But still I can't figure out how actually clicking on the batch file would help me to log in to the sites without even typing the username and password.
Do I need to start learning Visual Basic, .NET, or windows batch programming to do this?
One more thing: can I also use it to log in to remote desktops?
",167k,"
            23
        ","['\nFrom the term ""automatic login"" I suppose security (password protection) is not of key importance here.\nThe guidelines for solution could be to use a JavaScript bookmark (idea borrowed form a nice game published on M&M\'s DK site).\nThe idea is to create a javascript file and store it locally. It should do the login data entering depending on current site address. Just an example using jQuery:\n// dont forget to include jQuery code\n// preferably with .noConflict() in order not to break the site scripts\nif (window.location.indexOf(""mail.google.com"") > -1) {\n    // Lets login to Gmail\n    jQuery(""#Email"").val(""youremail@gmail.com"");\n    jQuery(""#Passwd"").val(""superSecretPassowrd"");\n    jQuery(""#gaia_loginform"").submit();\n}\n\nNow save this as say login.js\nThen create a bookmark (in any browser) with this (as an) url:\njavascript:document.write(""<script type=\'text/javascript\' src=\'file:///path/to/login.js\'></script>"");\n\nNow when you go to Gmail and click this bookmark you will get automatically logged in by your script.\nMultiply the code blocks in your script, to add more sites in the similar manner. You could even combine it with window.open(...) functionality to open more sites, but that may get the script inclusion more complicated.\nNote: This only illustrates an idea and needs lots of further work, it\'s not a complete solution.\n', '\nThe code below does just that.  The below is a working example to log into a game.  I made a similar file to log in into Yahoo and a kurzweilai.net forum.\nJust copy the login form from any webpage\'s source code. Add value= ""your user name"" and value = ""your password"".  Normally the -input- elements in the source code do not have the value attribute, and sometime, you will see something like that:  value="""" \nSave the file as a html on a local machine double click it, or make a bat/cmd file to  launch and close them as required.\n    <!doctype html>\n    <!-- saved from url=(0014)about:internet -->\n\n    <html>\n    <title>Ikariam Autologin</title>\n    </head>\n    <body>\n    <form id=""loginForm"" name=""loginForm"" method=""post""    action=""http://s666.en.ikariam.com/index.php?action=loginAvatar&function=login"">\n    <select name=""uni_url"" id=""logServer"" class=""validate[required]"">\n    <option  class=""""  value=""s666.en.ikariam.com"" fbUrl=""""  cookieName=""""  >\n            Test_en\n    </option>\n    </select>\n    <input id=""loginName"" name=""name"" type=""text"" value=""PlayersName"" class="""" />\n    <input id=""loginPassword"" name=""password"" type=""password"" value=""examplepassword"" class="""" />\n    <input type=""hidden"" id=""loginKid"" name=""kid"" value=""""/>\n                        </form>\n  <script>document.loginForm.submit();</script>       \n  </body></html>\n\nNote that -script- is just -script-. I found there is no need to specify that is is JavaScript. It works anyway. I also found out that a bare-bones version that contains just two input filds: userName and password also work. But I left a hidded input field etc. just in case.  Yahoo mail has a lot of hidden fields. Some are to do with password encryption, and it counts login attempts.\nSecurity warnings and other staff, like Mark of the Web to make it work smoothly in IE are explained here:\nhttp://happy-snail.webs.com/autologinintogames.htm\n', '\nI used @qwertyjones\'s answer to automate logging into Oracle Agile with a public password.\nI saved the login page as index.html, edited all the href= and action= fields to have the full URL to the Agile server.\nThe key <form> line needed to change from\n<form autocomplete=""off"" name=""MainForm"" method=""POST""\n action=""j_security_check"" \n onsubmit=""return false;"" target=""_top"">\n\nto\n<form autocomplete=""off"" name=""MainForm"" method=""POST""\n action=""http://my.company.com:7001/Agile/default/j_security_check""   \n onsubmit=""return false;"" target=""_top"">\n\nI also added this snippet to the end of the <body>\n<script>\nfunction checkCookiesEnabled(){ return true; }\ndocument.MainForm.j_username.value = ""joeuser"";\ndocument.MainForm.j_password.value = ""abcdef"";\nsubmitLoginForm();\n</script> \n\nI had to disable the cookie check by redefining the function that did the check, because I was hosting this from XAMPP and I didn\'t want to deal with it. The submitLoginForm() call was inspired by inspecting the keyPressEvent() function.\n', '\nYou can use Autohotkey, download it from: http://ahkscript.org/download/\nAfter the installation, if you want to open Gmail website when you press Alt+g, you can do something like this:\n!g::\nRun www.gmail.com \nreturn\n\nFurther reference: Hotkeys (Mouse, Joystick and Keyboard Shortcuts)\n', '\nWell, its true that we can use Vb Script for what you intended to do.\nWe can open an application through the code like Internet Explorer. We can navigate to site you intend for. Later we can check the element names of Text Boxes which require username and password; can set then and then Login. It works fine all of using code.\nNo manual interaction with the website. And eventually you will end up signing in by just double clicking the file.\nTo get you started :\nSet objIE = CreateObject(""InternetExplorer.Application"")\n\nCall objIE.Navigate(""https://gmail.com"")\n\nThis will open an instance of internet explore and navigate to gmail.\nRest you can learn and apply.\n']"
"Python, mechanize, proper syntax for setting multiple headers?","
I can't seem to find how to do this anywere, I am trying to set multiple headers with python's mechanize module, such as:
br.addheaders = [('user-agent', '   Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3')]
br.addheaders = [('accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]

But it seems that it only takes the last br.addheaders.. so it only shows the 'accept' header, not the 'user-agent' header, which leads me to believe that each call to 'br.addheaders' overwrites any previous calls to this.. I can't figure the syntax to include 2 or more headers so I would greatly appreciate any help..
I am using this website to test headers output:
http://www.ericgiguere.com/tools/http-header-viewer.html
",8k,"
            8
        ","[""\nAccording to http://wwwsearch.sourceforge.net/mechanize/doc.html#adding-headers, the syntax would be \nbr.addheaders = [('user-agent', '   Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3'),\n('accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]\n\nThat is, make a list of header tuples.\n""]"
"Using Playwright for Python, how do I select (or find) an element?","
I'm trying to learn the Python version of Playwright. See here
I would like to learn how to locate an element, so that I can do
things with it. Like printing the inner HTML, clicking on it and such.
The example below loads a page and prints the HTML
from playwright import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch(headless=False)
    page = browser.newPage()
    page.goto('http://whatsmyuseragent.org/')
    print(page.innerHTML(""*""))
    browser.close()

This page contains an element
<div class=""user-agent"">
    <p class=""intro-text"">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4238.0 Safari/537.36</p>
</div>

Using Selenium, I could locate the element and print it's content like this
elem = driver.find_element_by_class_name(""user-agent"")
print(elem)
print(elem.get_attribute(""innerHTML""))

How can I do the same in Playwright?
#UPDATE# - Note if you want to run this in 2021+ that current versions of playwright have changed the syntax from CamelCase to snake_case.
",18k,"
            8
        ","['\nThe accepted answer does not work with the newer versions of Playwright. (Thanks @576i for pointing this out)\nHere is the Python code that works with the newer versions (tested with version 1.5):\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto(\'http://whatsmyuseragent.org/\')\n    ua = page.query_selector("".user-agent"");\n    print(ua.inner_html())\n    browser.close()\n\nTo get only the text, use the inner_text() function.\nprint(ua.inner_text())\n\n', '\nYou can use the querySelector function, and then call the innerHTML function:\nhandle = page.querySelector("".user-agent"")\nprint(handle.innerHTML())\n\n', '\naccording to Latest official python version Playwright, you should use:\n\npage\'s query_selector\nand element\'s inner_html\n\n-> the code:\n# userAgentSelector = "".user-agent""\nuserAgentSelector = ""div.user-agent""\nelementHandle = page.query_selector(userAgentSelector)\nuaHtml = elementHandle.inner_html()\nprint(""uaHtml=%s"" % uaHtml)\n\n']"
Execute javascript trough Internet Explorer's com interface using PowerShell,"
I am writing some Internet Explorer automation scripts using PowerShell. Here is how I start the IE com object:
$ie = New-Object -com ""InternetExplorer.Application""
$ie.Navigate(""about:blank"")
$ie.visible = $true

$doc = $ie.Document

So, what I would like to do is to execute some javascript on the $doc object. For example, I have an item on the page that has an onclick event which executes submitCommand('lookup'), so I'd like to run that directly on the $doc instead of having to find the object on the page and then calling the Click() method on it.
It would be easier as the object has no name nor id, making it very sensible to change as I can only rely on it's position on the page (eg: the 11th span item on the page).
Alternatively, how would you select elements based on their class? That would help a lot as the ""button"" has it's own class.
Thanks
",19k,"
            7
        ","['\n$spans=@($ie.document.getElementsByTagName(""SPAN""))\nPipe to where-object to filter the one you need (based on its attributes) and then call the click method, for example:\n$span11 = $spans | where {$_.innerText -eq \'something\'}\n$span11.click()\n\n']"
How to code vba to open internet explorer in new session?,"
I am struggling to get this done since months, how to code VBA to open internet explorer in new session i have an application with many logins  i need to open them simultaneously using automation , i have used 
  set ie=new InternetExplorer  

but it opens the ie within the old session, i want to open new session for each and every login please help me, i googled a lot for it but ended up with out any solution.
 this is my code
 Function GetIE() As InternetExplorer

  Dim WScript
Dim objShellWindows

 Set objShell = CreateObject(""Shell.Application"")
 Set objShellWindows = objShell.Windows
 Set WScript = CreateObject(""WScript.Shell"")


 Dim ieStarted
 ieStarted = False

  Dim ieError
  ieError = False

    Dim seconds
      seconds = 0

  While (Not ieStarted) And (Not ieError) And (seconds < 30)

If (Not objShellWindows Is Nothing) Then
    Dim objIE As InternetExplorer
    Dim IE


    For Each objIE In objShellWindows

        If (Not objIE Is Nothing) Then

            If IsObject(objIE.Document) Then
                Set IE = objIE.Document

                If VarType(IE) = 8 Then

                    If IE.Title = EmptyTitle Then
                        If Err.Number = 0 Then
                            IE.Write LoadingMessage

                            objIE.navigate Sheet1.Login.Text
                        ieStarted = True
                        Set GetIE = objIE


                      Else

                       MsgBox ErrorMessage
                            Err.Clear
                            ieError = True

                            Exit For
                        End If
                    End If
                End If
            End If
        End If

        Set IE = Nothing
        Set objIE = Nothing
    Next
End If

Application.Wait Now + TimeValue(""00:00:1"")
seconds = seconds + 1
Wend

 Set objShellWindows = Nothing
 Set objShell = Nothing



   End Function

with this code im able to open the browser but sadly my webpage is opening in outlook which is already opened pls help
",48k,"
            3
        ","['\nApparently the -nomerge argument will prevent session merging.\nShell(""iexplore.exe -nomerge http://www.yoursite.com"")\n\nUPDATE\nAs per your comment, you need to get the IE object. You may be able to work with this:\nDim wshShell\nSet wshShell = WScript.CreateObject(""WScript.Shell"")\n\nwshShell.Run ""iexplore -nomerge http://www.google.com""\n\nDim objShell\nSet objShell = CreateObject(""Shell.Application"")\n\nDim objShellWindows\nSet objShellWindows = objShell.Windows\n\nDim i\nDim ieObject\nFor i = 0 To objShellWindows.Count - 1\n    If InStr(objShellWindows.Item(i).FullName, ""iexplore.exe"") <> 0 Then\n        Set ieObject = objShellWindows.Item(i)\n        If VarType(ieObject.Document) = 8 Then\n            MsgBox ""Loaded "" & ieObject.Document.Title\n            Exit For\n        End If\n    End If\nNext\n\nSet ieObject = Nothing\nSet objShellWindows = Nothing\nSet objShell = Nothing\nSet wshShell = Nothing\n\n', '\nUsing Excel 2010 - This is what I use with a command button. Replace google.com with the website you want to open in another browser.\nPrivate Sub commandname_Click()\n\n\'Opens an Explorer with a web site \n\nDim IE As InternetExplorer\n\n  Set IE = CreateObject(""InternetExplorer.Application"")\n\n  IE.navigate (""http://WWW.GOOGLE.COM"")\n\n  IE.Visible = True\n\nEnd Sub\n\n', '\nThis answer works for me after changing:\nDim IE As InternetExplorer\n\nto\nDim IE As Object\n\n']"
Breaking out of a Protractor .filter() or .map() loop,"
I'm using Protractor and cucumber framework; how do I break out of a .filter or .map loop? I do not want to continue to iterate further if I found a match!
Page.prototype.getElementByKey = function (key) {
      var foundElement = null;
      return someElement.all(by.css('.someClass')).map(function (rawItem, index) {
        var itemObject = new ItemObjectClass(rawItem);
        return itemObject.getItemKey().then(function (foundItemKey) {
          var matched = String(foundItemKey).trim() === String(key).trim();

         console.log(' Matched: { ' + matched + ' }  index {'+index+'}');
          //if we have a match break out of the .filter function
          if (matched) {
            foundElement = itemObject;
            throw new Error(""Just our way of breaking out of .filter() above"");
          }
        });
      }).then(function () {
        //callback
        throw new Error('\n!!!!!Callback should not be called; 
       this means that we could not find an element that matched the passed in key above');
      }, function (error) {
        //error
        console.log('\n*******************errorCallback was called; '+error);
        return foundElement;
      });
    };

The above code finds the element but continues to iterate until the end instead of stopping when there's a match and breaking out by calling the errorCallback function. 
Given that .map function returns ""a promise that resolves to an array of values returned by the map function"" http://www.protractortest.org/#/api?view=ElementArrayFinder.prototype.map, I'm taking advantage of the fact that a promise will call its errCallback if the promise cannot be resolved. 
By throwing an a fake error, the errorCallback should be called and thereby break out of the .map loop.
Unfortunately, it successfully throws the error but continues with the loop instead of breaking out. I know that because when I

console.log(""boolean ""+matched+"" and index ""+index);

I get this: 
matched: false index: 0
matched: false index: 1
matched: true index 2 //it should have stopped here since matched = true
matched false index 3 // this should NOT have printed

so breaking out isn't working any ideas?
",4k,"
            2
        ","['\nYou are returning a single element, so .reduce would be preferable.\nHere is a usage example to return the first link where the text is ""mylink"":\nvar link = element.all(by.css(\'a\')).reduce(function (result, elem, index) {\n    if(result) return result;\n\n    return elem.getText().then(function(text){\n        if(text === ""mylink"") return elem;\n    });\n\n}).then(function(result){\n    if(!result) throw new Error(""Element not found"");\n    return result;\n});\n\n', ""\nWhat i understood from your post is, you would like to exit loop(iterate) when find a match element. \nIf yes, then better go with .filter() method. As it iterates on all available list of element finders and returns when a match finds.\nCode Snippet:\n\nelement.all(by.css('.items li')).filter(function(elem, index) {\n          return elem.getText().then(function(text) {\n                                if(text === 'RequiredElementFind'){\n                                      return ele;//return matched element\n                                 };\n    });\n}).click();//only matched element comes from the loop do what would you like    \n  to do\n\n""]"
How to login to a website with python and mechanize,"
i'm trying to log in to the website http://www.magickartenmarkt.de and do some analyzing in the member-area (https://www.magickartenmarkt.de/?mainPage=showWants). I saw other examples for this, but i don't get why my approaches didn't work. I identified the right forms for the first approach, but it's not clear if it worked.
In the second approach the returing webpage shows me that i don't have access to the member area. 
I would by glad for any help.
import urllib2
import cookielib
import urllib
import requests
import mechanize
from mechanize._opener import urlopen
from mechanize._form import ParseResponse

USERNAME = 'Test'
PASSWORD = 'bla123'
URL      = ""http://www.magickartenmarkt.de""

# first approach
request = mechanize.Request(URL)
response = mechanize.urlopen(request)
forms = mechanize.ParseResponse(response, backwards_compat=False)
# I don't want to close?!
#response.close()

# Username and Password are stored in this form
form = forms[1]

form[""username""] = USERNAME
form[""userPassword""] = PASSWORD

#proof entering data has worked
user = form[""username""]  # a string, NOT a Control instance
print user
pw = form[""userPassword""]  # a string, NOT a Control instance
print pw
#is this the page where I will redirected after login?
print urlopen(form.click()).read () 

#second approach
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
login_data = urllib.urlencode({'username' : USERNAME, 'userPassword': PASSWORD})

#login
response_web = opener.open(URL, login_data)

#did it work? for me not....
resp = opener.open('https://www.magickartenmarkt.de/?mainPage=showWants')
print resp.read()

",36k,"
            22
        ","[""\nWhy not use a browser instance to facilitate navigation?  Mechanize also has the ability to select particular forms (e.g. nr = 0 will select the first form on the page)\nbrowser = mechanize.Browser()\nbrowser.open(YOUR URL)\nbrowser.select_form(nr = 0)\nbrowser.form['username'] = USERNAME\nbrowser.form['password'] = PASSWORD\nbrowser.submit()\n\n"", '\nWeb automation ? Definitely ""WEBBOT""\nwebbot works even for webpages with dynamically changing id and classnames and has more methods and features than selenium.\n\nHere\'s a snippet :)\n\nfrom webbot import Browser \nweb = Browser()\nweb.go_to(\'google.com\') \nweb.click(\'Sign in\')\nweb.type(\'mymail@gmail.com\' , into=\'Email\')\nweb.click(\'NEXT\' , tag=\'span\')\nweb.type(\'mypassword\' , into=\'Password\' , id=\'passwordFieldId\') # specific selection\nweb.click(\'NEXT\' , tag=\'span\') # you are logged in ^_^\n\n']"
Selenium Webdriver vs Mechanize,"
I am interested in automating repetitive data entry in some forms for a website I frequent. So far the tools I've looked up that would provide support for this in a headless fashion could be Selenium WebDriver and Mechanize. 
My question is, is there a fundamental technical difference in using once versus the other? Selenium is mostly used for testing. I've also noticed some folks use it for doing exactly what I'm looking for, and that's automating data entry. Testing becomes a second benefit in that case. 
Is there reasons to not use Selenium for what I want to do over Mechanize? Does it not matter and both of these tools will work? 
I'm not asking which is better, I'm asking which is the right tool for the job. Perhaps I'm not understanding the premise behind the purpose of each tool.
",15k,"
            18
        ","['\nThese are completely different tools that somewhat ""cross"" in the web-scraping, web automation, automated data extraction scope.\nmechanize is a mature and widely-used tool for programmatic web-browsing with a lot of built-in features, like cookie handing, browser history, form submissions. The key thing to understand here is that mechanize.Browser is not a real browser, it cannot execute and understand javascript, it cannot send asynchronous requests often needed to form a web page.\nThis is where selenium comes into play - it is a browser automation tool which is also widely used in web-scraping. selenium usually becomes a ""fall-back"" tool - when someone cannot web-scrape a site with mechanize or RoboBrowser or MechanicalSoup (note - another alternatives) because of, for instance, it\'s javascript ""heaviness"", the choice is usually selenium. With selenium you can also go headless, automating PhantomJS browser, or having a virtual display. As a commonly mentioned drawback, performance is often mentioned - with selenium you are working with a target site as a real user in a web browser, which is loading additional files needed to form a page, making XHR requests, rendering etc.\nAnd this itself does not mean you should use selenium everywhere - choose the tool wisely, choose it because it fits the problem better, not because you are more familiar with an instrument.\n\nAlso note that you should, first, consider using an API (if provided by the target website) instead of going down to web-scraping. And, if it comes to it, be a good web-scraping citizen:\n\nHow to be a good citizen when crawling web sites?\nWeb scraping etiquette\n\n']"
Click a checkbox with selenium-webdriver,"
I'm testing my app with tumblr and I have to log in and out as I go through procedures. While doing so, I'm having trouble clicking a checkbox that keeps popping up. How can I use selenium-webriver in python to click it?
I've tried selecting xpaths, ...by_ids, and by_classes, they won't work, so now I'm trying to use the mouse's coordinates to physically click the item. (This is on the tumblr login page, fyi)
 
Above is the html of the item I'm trying to select.
(EDIT:)
I've the following selectors:
#checkbox = driver.find_element_by_id(""recaptcha-anchor"")
#checkbox = driver.find_element_by_id(""g-recaptcha"") 
#driver.find_element_by_xpath(""//*[@id='recaptcha-token']"")
#driver.find_element_by_css_selector(""#recaptcha-anchor"")
#driver.find_element_by_xpath(""//*[@id='recaptcha-anchor']"")
#driver.find_element_by_id(""recaptcha-token"").click()
#driver.find_element_by_class_name('rc-anchor-center-container')
#checkbox = driver.find_element_by_id(""recaptcha-anchor"")

",14k,"
            5
        ","['\nI realise this is an old thread, but I couldn\'t find the answer anywhere else.  In the end I figured it out as follows.\nNote 1: this will tick the recaptcha box, but it won\'t solve it, you\'ll still need to do that manually.\nNote 2: this is on macOS, so you might need a different format for chrome_path on Windows\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\n#modify line below to location of your chromedriver executable\nchrome_path = r""/Users/Username/chromedriver""\ndriver = webdriver.Chrome(chrome_path)\ndriver.get(""https://www.btcmarkets.net/login"")\n\nusername = driver.find_element_by_id(""userIdText"")\nusername.send_keys(""Us3rn4me"")\n\npassword = driver.find_element_by_id(""userPasswordText"")\npassword.send_keys(""Pa55w0rD"")\n\n#the line below tabs to the recaptcha tickbox and ticks it with the space bar\npassword.send_keys(Keys.TAB + Keys.TAB + "" "")\n\n', '\nSeems like this is not an input tag. So, probably manipulating the aria-checked attribute and set it to true would do it. The only way to change attribute value is JavaScriptExecutor. Try the following:\ndriver.execute_script(""$(\'#recaptcha-anchor\').setAttribute(\'aria-checked\',\'true\');"")\n\n', '\nUse code below can find the checkbox with id ""recaptcha-anchor"" and click it, but unable to bypass it. The following pictures will pop up. \nList<WebElement> frames = driver.findElements(By.tagName(""iframe""));\n    String winHanaleBefore = driver.getWindowHandle();\n    driver.switchTo().frame(0);\ndriver.findElement(By.id(""recaptcha-anchor"")).click();\ndriver.switchTo().window(winHanaleBefore);\n\n', '\nHere is a simple example that works for me in Java:\ndriver.findElement(By.id(""checkbox_id"")).click();\n\nIn Python, it seems to be:\ndriver.find_element_by_id(""checkbox_id"").click()\n\n']"
"powershell: how to click a ""submit type"" input","
used powershell to do web ui automation.  came up an exception: invoke method failed, because [System.__ComObject] does not contain “click” method.
can submit type input be clicked?
i used getElementsByTagName getElementsByClassName getElementsByName , does not work.
anyone can help me on this?
powershell code is below:
# open the specified web site and commit the key
$ie = new-object -com ""InternetExplorer.Application""
$ie.navigate(""http://gitlab.alibaba-inc.com/keys/new"")
$ie.visible = $true
while($ie.busy) {sleep 1}

$doc = $ie.document

# commit the button
$commit = $doc.getElementsByTagName(""commit"")

if($commit) 
{$commit.click()}

the html source is as below:
<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<title>
Profile | 
GitLab
</title>
<link href=""/assets/favicon-4b751da746de7855d7eb8123072388ed.ico"" rel=""shortcut icon""    type=""image/vnd.microsoft.icon"" />
<link href=""/assets/application-a9eac7f5b0c3b922de8997ae9ad74ab0.css"" media=""screen"" rel=""stylesheet"" type=""text/css"" />
<script src=""/assets/application-61398d184a36e6ae900134f123d5d649.js"" type=""text/javascript""></script>
<meta content=""authenticity_token"" name=""csrf-param"" />
<meta content=""9SLFk6AwlsN2FoyO8xPY+M1hEbKfqlLTQ4CSDVc4efE="" name=""csrf-token"" />
<script type=""text/javascript"">
//<![CDATA[
window.gon =   {};gon.default_issues_tracker=""gitlab"";gon.api_version=""v3"";gon.api_token=""xkMg31Ssva322SDF cgxY"";gon.gravatar_url=""http://www.gravatar.com/avatar/%{hash}?s=% {size}&d=mm"";gon.relative_url_root="""";
//]]>
</script>

</head>

<body class='ui_basic profile' data-page='keys:new'>
<header class='navbar navbar-static-top navbar-gitlab'>
<div class='navbar-inner'>
<div class='container'>
<div class='app_logo'>
<span class='separator'></span>
<a href=""/"" class=""home has_bottom_tooltip"" title=""Dashboard""><h1>GITLAB</h1>
</a><span class='separator'></span>
</div>
<h1 class='project_name'>Profile</h1>
<ul class='nav'>
<li>
<a>
<div class='hide turbolink-spinner'>
<i class='icon-refresh icon-spin'></i>
Loading...
</div>
</a>
</li>
<li>
<div class='search'>
<form accept-charset=""UTF-8"" action=""/search"" class=""navbar-form pull-left""  method=""get""><div style=""margin:0;padding:0;display:inline""><input name=""utf8""  type=""hidden"" value=""&#x2713;"" /></div>
<input class=""search-input"" id=""search"" name=""search"" placeholder=""Search"" type=""text""   />
<input id=""group_id"" name=""group_id"" type=""hidden"" />
<input id=""repository_ref"" name=""repository_ref"" type=""hidden"" />

<div class='search-autocomplete-json hide' data-autocomplete-opts='[{""label"":""project:  kelude2"",""url"":""/kelude2""},{""label"":""My Profile"",""url"":""/profile""},{""label"":""My SSH  Keys"",""url"":""/keys""},{""label"":""My Dashboard"",""url"":""/""},{""label"":""Admin  Section"",""url"":""/admin""},{""label"":""help: API Help"",""url"":""/help/api""},{""label"":""help:  Markdown Help"",""url"":""/help/markdown""},{""label"":""help: Permissions  Help"",""url"":""/help/permissions""},{""label"":""help: Public Access  Help"",""url"":""/help/public_access""},{""label"":""help: Rake Tasks  Help"",""url"":""/help/raketasks""},{""label"":""help: SSH Keys Help"",""url"":""/help/ssh""}, {""label"":""help: System Hooks Help"",""url"":""/help/system_hooks""},{""label"":""help: Web Hooks  Help"",""url"":""/help/web_hooks""},{""label"":""help: Workflow Help"",""url"":""/help/workflow""}]'>   </div>
</form>

</div>

</li>
<li>
<a href=""/public"" class=""has_bottom_tooltip"" data-original-title=""Public area""    title=""Public area""><i class='icon-globe'></i>
</a></li>
<li>
<a href=""/s/heyun"" class=""has_bottom_tooltip"" data-original-title=""Public area""    title=""My snippets""><i class='icon-paste'></i>
</a></li>
<li>
<a href=""/projects/new"" class=""has_bottom_tooltip"" data-original-title=""New project""    title=""Create New Project""><i class='icon-plus'></i>
</a></li>
<li>
<a href=""/profile"" class=""has_bottom_tooltip"" data-original-title=""Your profile""    title=""My Profile""><i class='icon-user'></i>
</a></li>
<li>
<a href=""/users/sign_out"" class=""has_bottom_tooltip"" data-method=""delete"" data-original-title=""Logout"" rel=""nofollow"" title=""Logout""><i class='icon-signout'></i>  
</a></li>
<li>
<a href=""/u/heyun"" class=""profile-pic""><img alt=""F3ea5164088694b48e4980e52d831927? s=26&amp;d=mm"" src=""http://www.gravatar.com/avatar/f3ea5164088694b48e4980e52d831927? s=26&amp;d=mm"" />
</a></li>
</ul>
</div>
</div>
</header>

<div class='flash-container'>
</div>

<nav class='main-nav'>
<div class='container'><ul>
<li class=""home""><a href=""/profile"" title=""Profile""><i class='icon-home'></i>
</a></li><li class=""""><a href=""/profile/account"">Account</a>
</li><li class=""""><a href=""/profile/notifications"">Notifications</a>
</li><li class=""active""><a href=""/keys"">SSH Keys
<span class='count'>1</span>
</a></li><li class=""""><a href=""/profile/design"">Design</a>
</li><li class=""""><a href=""/profile/history"">History</a>
</li></ul>
</div>
</nav>
<div class='container'>
<div class='content'><h3 class='page_title'>Add an SSH Key</h3>
<hr>
<div>
<form accept-charset=""UTF-8"" action=""/keys"" class=""new_key"" id=""new_key"" method=""post"">   <div style=""margin:0;padding:0;display:inline""><input name=""utf8"" type=""hidden""   value=""&#x2713;"" /><input name=""authenticity_token"" type=""hidden""   value=""9SLFk6AwlsN2FoyO8xPY+M1hEbKfqlLTQ4CSDVc4efE="" /></div><div class='clearfix'>
<label for=""key_title"">Title</label>
<div class='input'><input id=""key_title"" name=""key[title]"" size=""30"" type=""text"" />   </div>
</div>
<div class='clearfix'>
<label for=""key_key"">Key</label>
<div class='input'>
<textarea class=""xxlarge thin_area"" cols=""40"" id=""key_key"" name=""key[key]"" rows=""20"">
</textarea>
<p class='hint'>
Paste your public key here. Read more about how generate it
<a href=""/help/ssh"">here</a>
</p>
</div>
</div>
<div class='actions'>
<input class=""btn btn-save"" name=""commit"" type=""submit"" value=""Save"" />
<a href=""/keys"" class=""btn btn-cancel"">Cancel</a>
</div>
</form>

</div>

<script>
  $('#key_key').on('keyup', function(){
    var title = $('#key_title'),
        val      = $('#key_key').val(),
        key_mail = val.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+|\.[a-zA-Z0-9._-]+)/gi);

    if( key_mail && key_mail.length > 0 && title.val() == '' ){
      $('#key_title').val( key_mail );
    }
  });
</script>
</div>
</div>
</body>
</html>

",23k,"
            3
        ","['\nYou\'re looking for the wrong element. getElementsByTagName() is looking for the actual tag name (input), not the value of the tag\'s name-attribute (commit). Also, getElementsByTagName() returns a collection of COM objects. Even if no matching tag is found, the method will still return a collection (with 0 elements). You need to either check the Length property and then access the first element of the collection:\n$commit = $doc.getElementsByTagName(""input"")\nif ($commit.Length -gt 0) {\n  $commit.item(0).click()\n}\n\nor filter the element with the name you\'re looking for from the collection:\n$commit = $doc.getElementsByTagName(""input"") | ? { $_.name -eq ""commit"" }\nif ($commit) { $commit.click() }\n\n', '\nI could not access the url you had listed above so I used the MIT website to show you an example of how can this be done.\n# setup\n$ie = New-Object -com InternetExplorer.Application \n$ie.visible=$true\n\n$ie.navigate(""http://web.mit.edu/"") \nwhile($ie.ReadyState -ne 4) {start-sleep -m 100} \n\n$termsField = $ie.document.getElementsByName(""terms"")\n@($termsField)[0].value =""powershell""\n\n\n$submitButton = $ie.document.getElementsByTagName(""input"") \nForeach($element in $submitButton )\n{\n    #look for this field by value this is the field(look for screenshot below) \n    if($element.value -eq ""Search""){\n    Write-Host $element.click()\n    }\n}\n\n    Start-Sleep 10\n\n\n']"
How to find_element_by_link_text while having: NoSuchElement Exception?,"
This question has been asked over and over again - and in-spite of trying all the hacks I still can't seem to figure out what's wrong.
I tried increasing the implicitly_wait to 30 (and even increased it upto 100) - yet it did not work. 
Use case -: I am trying to create a list that wil populate all the items in the page here, as a base case - and I intend to bind this to a mini-module that I already have with scrapy which has all (pages with similar web elements) crawled links - so essentially will be building the whole pipeline, post I am done with this.
###My source code - generated via Selenium IDE, exported to a Python webdriver and manipulated a little later ###

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.wait import WebDriverWait
import unittest, time, re

class Einstein(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = ""http://shopap.lenovo.com/in/en/laptops/""
        self.verificationErrors = []
        self.accept_next_alert = True

    def test_einstein(self):
        driver = self.driver
        driver.get(self.base_url)
        print driver.title
        driver.find_element_by_link_text(""T430"").click()
        print driver.title
#       driver.find_element_by_xpath(""id('facetedBrowseWrapper')/div/div/div[1]/div[2]/ul[1]/li[1]/a"").click()
        driver.find_element_by_xpath(""//div[@id='subseries']/div[2]/div/p[3]/a"").click()
        print driver.title
       # driver.find_element_by_xpath(""//div[@id='subseries']/div[2]/div/p[3]/a"").click()
        try: self.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
       # Everything ok till here


        #**THE CODE FAILS HERE**#
        laptop1 = driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text
        print laptop1
        price1 = driver.find_element_by_css_selector(""span.price"").text
        print price1
        detail1 = self.is_element_present(By.CSS_SELECTOR, ""div.desc.std"")
        print detail1

            def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True

    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True

    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True

    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == ""__main__"":
    unittest.main()


Errors & output :
ekta@ekta-VirtualBox:~$ python einstein.py
Laptops & Ultrabooks | Lenovo (IN)
ThinkPad T430 Laptop PC for Business Computing | Lenovo (IN)
Buy Lenovo Thinkpad Laptops | Lenovo Thinkpad Laptops Price India
E
======================================================================
ERROR: test_einstein (__main__.Einstein)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""einstein.py"", line 27, in test_einstein
    try: self.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text)
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py"", line 246, in find_element_by_link_text
    return self.find_element(by=By.LINK_TEXT, value=link_text)
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py"", line 680, in find_element
    {'using': by, 'value': value})['value']
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py"", line 165, in execute
    self.error_handler.check_response(response)
  File ""/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/errorhandler.py"", line 158, in check_response
    raise exception_class(message, screen, stacktrace)
NoSuchElementException: Message: u'Unable to locate element: {""method"":""link text"",""selector"":""Thinkpad Edge E530 (Black)""}' ; Stacktrace: 
    at FirefoxDriver.prototype.findElementInternal_ (file:///tmp/tmphli5Jg/extensions/fxdriver@googlecode.com/components/driver_component.js:8444)
    at fxdriver.Timer.prototype.setTimeout/<.notify (file:///tmp/tmphli5Jg/extensions/fxdriver@googlecode.com/components/driver_component.js:386) 

----------------------------------------------------------------------
Ran 1 test in 79.348s

FAILED (errors=1)

Questions & comments: 

If you are answering this question - please mention why this specific ""find_element_by_link_text"" does not work. 
(Very Basic) In the GUI of my selenium IDE -> Show all available commands - why dont I see the css (find_element_by_css_selector) for all the web elements - is there a way to force feed an element to be read as a CSS selector ?
In case you suggest using some other locator - please mention if that will be consistent way to fetch elements, given (1) 
Does assert work to capture the exceptions and ""move on"" - since even after trying ""verify"" , ""assert"" loops, I still cant fetch this  ""find_element_by_link_text""
I tried using Xpath to build this ""element"" , but in the view Xpath (in firefox) - I see nothing, to clue why that happens (Of course I removed the namespace "":x"" )

Other things I tried apart from implicity_wait(30):
find_element_by_partial_link(“Thinkpad”) and appending Unicode to this (wasn’t sure if it was reading the brackets ( , driver.find_element_by_link_text(u""Thinkpad Edge E530 (Black)"").text, still did not work.


Related questions:

How to use find_element_by_link_text() properly to not raise NoSuchElementException?
NoSuchElement Exception using find_element_by_link_text when implicitly_wait doesn't work?

",13k,"
            2
        ","['\nIt happened to me before that the find_element_by_link_text method sometimes works and sometimes doesn\'t work; even in a single case. I think it\'s not a reliable way to access elements; the best way is to use find_element_by_id. \nBut in your case, as I visit the page, there is no id to help you. Still you can try find_elements_by_xpath in 3 ways:\n1- Accessing title: find_element_by_xpath[""//a[contains(@title = \'T430\')]""] \n2- Accessing text: find_element_by_xpath[""//a[contains(text(), \'T430\')]""]\n3- Accessing href: find_element_by_xpath[""//a[contains(@href = \'http://www.thedostore.com/laptops/thinkpad-laptops/thinkpad-t430-u-black-627326q.html\')]""].\nHope it helps.\n', '\nNoSuchElementException is thrown when the element could not be found.\nIf you encounter this exception, please check the followings:\n\nCheck your selector used in your find_by...\nElement may not yet be on the screen at the time of the find operation.\n\nIf webpage is still loading, check for selenium.webdriver.support.wait.WebDriverWait() and write a wait wrapper  to wait for an element to appear.\nTroubleshooting and code samples\nYou can add breakpoint just before your failing line pdb.set_trace() (don\'t forget to import pdb), then run your test and once your debugger stops, then do the following tests.\n\nYou could try:\ndriver.find_element_by_xpath(u\'//a[text()=""Foo text""]\')\n\ninstead. This is more reliable test, so if this would work, use it instead.\nIf above won\'t help, please check if your page has been loaded properly via:\n(Pdb) driver.execute_script(""return document.readyState"")\n\'complete\'\n\nSometimes when the page is not loaded, you\'re actually fetching the elements from the old page. But even though, readyState could still indicate the state of the old page (especially when using click()). Here is how this is explained in this blog:\n\nSince Selenium webdriver has become more advanced, clicks are much more like ""real"" clicks, which has the benefit of making our tests more realistic, but it also means it\'s hard for Selenium to be able to track the impact that a click has on the browsers\' internals -- it might try to poll the browser for its page-loaded status immediately after clicking, but that\'s open to a race condition where the browser was multitasking, hasn\'t quite got round to dealing with the click yet, and it gives you the .readyState of the old page.\n\nIf you think this is happening because the page wasn\'t loaded properly, the ""recommended"" (however still ugly) solution is an explicit wait:\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait \nfrom selenium.webdriver.support import expected_conditions\n\nold_value = browser.find_element_by_id(\'thing-on-old-page\').text\nbrowser.find_element_by_link_text(\'my link\').click()\nWebDriverWait(browser, 3).until(\n    expected_conditions.text_to_be_present_in_element(\n        (By.ID, \'thing-on-new-page\'),\n        \'expected new text\'\n    )\n)\n\nThe naive attempt would be something like this:\ndef wait_for(condition_function):\n    start_time = time.time()\n    while time.time() < start_time + 3:\n        if condition_function():\n            return True\n        else:\n            time.sleep(0.1)\n    raise Exception(\n        \'Timeout waiting for {}\'.format(condition_function.__name__)\n    )\n\n\ndef click_through_to_new_page(link_text):\n    browser.find_element_by_link_text(\'my link\').click()\n\n    def page_has_loaded():\n        page_state = browser.execute_script(\n            \'return document.readyState;\'\n        ) \n        return page_state == \'complete\'\n\n    wait_for(page_has_loaded)\n\nAnother, better one would be (credits to @ThomasMarks):\ndef click_through_to_new_page(link_text):\n    link = browser.find_element_by_link_text(\'my link\')\n    link.click()\n\n    def link_has_gone_stale():\n        try:\n            # poll the link with an arbitrary call\n            link.find_elements_by_id(\'doesnt-matter\') \n            return False\n        except StaleElementReferenceException:\n            return True\n\n    wait_for(link_has_gone_stale)\n\nAnd the final example includes comparing page ids as below (which could be bulletproof):\nclass wait_for_page_load(object):\n\n    def __init__(self, browser):\n        self.browser = browser\n\n    def __enter__(self):\n        self.old_page = self.browser.find_element_by_tag_name(\'html\')\n\n    def page_has_loaded(self):\n        new_page = self.browser.find_element_by_tag_name(\'html\')\n        return new_page.id != self.old_page.id\n\n    def __exit__(self, *_):\n        wait_for(self.page_has_loaded)\n\nAnd now we can do:\nwith wait_for_page_load(browser):\n    browser.find_element_by_link_text(\'my link\').click()\n\nAbove code samples are from Harry\'s blog.\nHere is the version proposed by Tommy Beadle (by using staleness approach):\nimport contextlib\nfrom selenium.webdriver import Remote\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support.expected_conditions import staleness_of\n\nclass MyRemote(Remote):\n    @contextlib.contextmanager\n    def wait_for_page_load(self, timeout=30):\n        old_page = self.find_element_by_tag_name(\'html\')\n        yield\n        WebDriverWait(self, timeout).until(staleness_of(old_page))\n\nIf you think it isn\'t about page load, double check if your element isn\'t in iframe or different window. If so, you\'ve to switch to it first. To check list of available windows, run: driver.window_handles.\n\n', '\nFrom viewing the source of the page that you provided a link to, it seems you are using an incorrect selector.\nYou should use instead find_elements_by_link_text(u\'text here\')[0] to select the first occurrence instead as there seems to be the potential for multiple links with the same link text.\nSo instead of:\nself.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_element_by_link_text(""Thinkpad Edge E530 (Black)"").text)\n\nYou should use:\nself.assertEqual(""Thinkpad Edge E530 (Black)"", driver.find_elements_by_link_text(""Thinkpad Edge E530 (Black)"")[0].text)\n\n', '\nSolution posted by OP:\nHack 1: Instead of identifying the element as a text-link, I identified the ""bigger frame"" in which this element was present. \nitemlist_1 = driver.find_element_by_css_selector(""li.item.first"").text\nThis will give the whole item along with the name, price and detail (and the unwanted add to cart and compare"" \nSee the attached image for more .\n\nHack 2: I found that the ""Buy Now"" which was an image element with xPath (driver.find_element_by_xpath(""//div[@id=\'subseries\']/div[2]/div/p[3]/a"").click()\n, in the code above) , could be made to click/identified faster if I added the following line, before finding this by xpath. I think this sort of narrows down where the Webdriver is looking for an element.  This is what I added "" driver.find_element_by_css_selector(""#subseries"").text""\nThis must have decreased my wait by at least 20 seconds, on that page .Hope that helps.\n']"
Puppeteer does not change selector,"
I'm trying to automate the task of querying for data on this site using Puppeteer. So I need to select the dataset (Daily Summaries, 1st option), then select location type (State, 3rd option), then select state (Alaska, 2nd option). The problem is my code does not change to the next table. So instead of selecting the 3rd option (State) after selecting the 1st option in dataset (Daily Summaries), it just selects the 3rd option but in dataset table again! I am new to Puppeteer so I don't really know what to do with this. Any help is appreciated.
Below is my code:


const puppeteer = require('puppeteer');
(async () => {
  const browser = await puppeteer.launch({headless:false})
  const page = await browser.newPage()

  const navigationPromise = page.waitForNavigation()

  await page.goto('https://www.ncdc.noaa.gov/cdo-web/datatools/selectlocation')

  await page.waitForSelector('.selectLocationFilters > .datasetContainer > .slideElement > #datasetSelect > option:nth-child(1)')
  await page.click('.selectLocationFilters > .datasetContainer > .slideElement > #datasetSelect > option:nth-child(1)')

  await page.select('.inset #locationCategorySelect', '')

  await page.waitForSelector('.selectLocationFilters > .locationCategoryContainer > .locationCategoryFilter > #locationCategorySelect > option:nth-child(3)')
  await page.click('.selectLocationFilters > .locationCategoryContainer > .locationCategoryFilter > #locationCategorySelect > option:nth-child(3)')

  await page.select('.inset #selectedState', '')

  await page.waitForSelector('.selectLocationFilters > .locationContainer > .stateFilter > #selectedState > option:nth-child(2)')
  await page.click('.selectLocationFilters > .locationContainer > .stateFilter > #selectedState > option:nth-child(2)')

  await browser.close()
})()


This is what I want. Dataset -> Location type -> State Alaska. Instead the code keeps selecting only in the Dataset table.

",839,"
            1
        ","['\nThe problem you have there is that CSS transitions are preventing you from clicking those elements. One possible solution would be disabling all CSS animations on the page.\nYou can add that after the goto call: \n\nawait page.addStyleTag({ content : `\n    *,\n    *::after,\n    *::before {\n        transition-delay: 0s !important;\n        transition-duration: 0s !important;\n        animation-delay: -0.0001s !important;\n        animation-duration: 0s !important;\n        animation-play-state: paused !important;\n        caret-color: transparent !important;\n    }`})\n\n\n']"
Using internetexplorer object what is the correct way to wait for an ajax response?,"
I tried to upload a file to a sharepoint library, my code fails to properly detect  if ie is still waiting for an ajax response or not. What is the proper way to do this ?
[void] [System.Reflection.Assembly]::LoadWithPartialName(""'Microsoft.VisualBasic"")
[void] [System.Reflection.Assembly]::LoadWithPartialName(""'System.Windows.Forms"")

function wait4IE($ie=$global:ie){
    while ($ie.busy -or $ie.readystate -lt 4){start-sleep -milliseconds 200}
}

$global:ie=new-object -com ""internetexplorer.application""
$ie.visible=$true
[Microsoft.VisualBasic.Interaction]::AppActivate(""internet explorer"")

# open EDM
$ie.navigate(""https://xxx.sharepoint.com/sites/site1/Forms/AllItems.aspx"")
wait4IE

# click on  the button to display the form
$ie.Document.getElementById(""QCB1_Button2"").click()

wait4IE

the rest of the code is executed, but the uploading form is not shown yet.
How to wait for the display of the form  ?
I also tried this (should wait untill a button of the upload form is not find), but it never ends ...
while( $ie.document.getElementById(""ctl00_PlaceHolderMain_UploadDocumentSection_ctl05_InputFile"") -eq $null){
        echo ""waiting ...""
        wait4IE
}


Update :
I think I've found the problem : the form is open in an iframe :
<iframe id=""DlgFrame0be35d71-22cb-47bd-bbf0-44c97db61fd6"" class=""ms-dlgFrame"" src=""https://.../Upload.aspx?List={45085FA0-3AE3-4410-88AD-3E80A218FC0C}&amp;RootFolder=&amp;IsDlg=1"" frameborder=""0"" style=""width: 592px; height: 335px;""></iframe>

But now, How to get the good frame number ?
PS>($ie.Document.frames.Item(4).document.body.getElementsbytagname(""input"") |?{$_.type -eq 'file'}).id
ctl00_PlaceHolderMain_UploadDocumentSection_ctl05_InputFile

moreover it seems i can access the frame content with getElementsByTagName, but not with getElementById ....?I still don't understand why .:
PS>$ie.Document.frames.Item(4).document.body.getElementById('ctl00_PlaceHolderMain_UploadDocumentSection_ctl05_InputFile
    ')
    Échec lors de l'appel de la méthode, car [System.__ComObject] ne contient pas de méthode nommée « getElementById ».
    Au caractère Ligne:1 : 1
    + $ie.Document.frames.Item(4).document.body.getElementById('ctl00_PlaceHolderMain_ ...
    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        + CategoryInfo          : InvalidOperation : (getElementById:String) [], RuntimeException
        + FullyQualifiedErrorId : MethodNotFound

",547,"
            0
        ","['\nok here is how I\'ve done :\nthe trick was to look each iframes, select the one with the correct location\nfor($i=0;$i -lt $ie.Document.frames.length;$i++){\n            if( $ie.Document.frames.item($i).location.href -match \'upload.aspx\' ){ $frm=$ie.Document.frames.item($i)}\n    }\n\nthen wait for my input to show \nwhile( ($frm.document.body.getElementsbytagname(""input"") |?{$_.type -eq \'file\'}) -eq $null){\n    echo ""waiting ...""\n    start-sleep -milliseconds 100\n}\n\n']"
How do I install Geckodriver?,"
I am attempting to work with Selenium in Python. However, I do not know what to do given the below from https://pypi.python.org/pypi/selenium
Selenium requires a driver to interface with the chosen browser. Firefox, for example, requires geckodriver, which needs to be installed before the below examples can be run. Make sure it’s in your PATH, e.g., place it in /usr/bin or /usr/local/bin.
I am running windows 7 32bit. I found geckodriver here: https://github.com/mozilla/geckodriver/releases
I have mostly used the Anaconda distribution of Python to work with excel so I do not know what is a ""PATH""
Thanks,  
UPDATE:
I updated the PATH as shown in the comments. Here is the full error traceback. 

Microsoft Windows [Version 6.1.7601]
  Copyright (c) 2009 Microsoft Corporation.  All rights reserved.
C:\Users\user1>python
Python 3.5.2 |Anaconda 4.2.0 (32-bit)| (default, Jul  5 2016, 11:45:57) [MSC v.1
  900 32 bit (Intel)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
from selenium import webdriver
driver = webdriver.Firefox()

Traceback (most recent call last):
File """", line 1, in 
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\webdriver.py"", li
  ne 80, in init
      self.binary, timeout)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\extension_connect
  ion.py"", line 52, in init
      self.binary.launch_browser(self.profile, timeout=timeout)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\firefox_binary.py
  "", line 67, in launch_browser
      self._start_from_profile_path(self.profile.path)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\site
  -packages\selenium-2.53.6-py3.5.egg\selenium\webdriver\firefox\firefox_binary.py
  "", line 90, in _start_from_profile_path
      env=self._firefox_env)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\subp
  rocess.py"", line 947, in init
      restore_signals, start_new_session)
File ""C:\Users\user1\AppData\Local\Continuum\Anaconda3\lib\subp
  rocess.py"", line 1224, in _execute_child
      startupinfo)
FileNotFoundError: [WinError 2] The system cannot find the file specified

",114k,"
            34
        ","['\n\nYou can download the geckodriver\nunzip it\nCopy that .exe file and put your into python parent folder (e.g., C:\\Python34)\nwrite your scripts.\n\nIt will execute successfully.\n', '\nThere is an easy way to install Geckodriver:\n\nInstall webdrivermanager with pip\npip install webdrivermanager\nInstall the driver for Firefox and Chrome\nwebdrivermanager firefox chrome --linkpath /usr/local/bin\nOr install the driver only for Firefox\nwebdrivermanager firefox --linkpath /usr/local/bin\nOr install the driver only for Chrome\nwebdrivermanager chrome --linkpath /usr/local/bin\n\n', ""\nThe easiest way if you are on windows:\ndriver = webdriver.Firefox(executable_path=r'[Your path]\\geckodriver.exe')\n\nExample:\ndriver = webdriver.Firefox(executable_path=r'D:\\geckodriver.exe')\n\n"", '\nFor Linux/Ubuntu:\nThe following simple installation worked for me:\nsudo apt install firefox-geckodriver\n\nNo additional driver installation was required.\nReference: https://github.com/timgrossmann/InstaPy/issues/5282#issuecomment-666283451\nFor windows:\nFollow the instructions here: http://www.learningaboutelectronics.com/Articles/How-to-install-geckodriver-Python-windows.php\n', ""\nIf you're on macOS/Apple, you can use Homebrew:\nbrew install geckodriver\nSee this related question\n"", '\nSome options, choose 1:\n\nMove the exe file to a folder in your PATH environment variable.\nUpdate PATH to have the directory that contains the exe.\nExplicitly override os.environ[""webdriver.gecko.driver""]\n\nbasically drag and drop the geckodriver someplace where you have your executables, you should then be able to open the command line and use it.\n/bin on linux, and C:\\Program Files\nsee:\n\nhttps://github.com/SeleniumHQ/selenium/issues/2672\nhttps://superuser.com/questions/124239/what-is-the-default-path-environment-variable-setting-on-fresh-install-of-window\nhttps://askubuntu.com/questions/27213/what-is-the-equivalent-to-the-windows-program-files-folder-where-do-things-g\n\nspecifically the explanations on how the driver is seen, \nwhere it can be put ,and how to modify the way selenium finds it. \n', ""\nFor me this worked (Windows 10, Firefox browser):\nfrom selenium import webdriver\ndriver = webdriver.Firefox(executable_path=r'C:\\......YOUR_PATH.......\\geckodriver.exe')\ndriver.get('http://EXAMPLE_URL.com')\n\n"", '\nMeanwhile for Win10 you can simply use\nfrom selenium import webdriver\nfrom webdriver_manager.firefox import GeckoDriverManager\n\ndriver = webdriver.Firefox(executable_path=GeckoDriverManager().install())\ndriver.get(""https://www.google.com"")\n\nThis will download the geckodrive prior to its first use and store it at the appropriate location. No need to set any paths explicitly.\n', '\nFor Python 3 - Selenium plus webdriver for Firefox;\n\nOpen up Command line\nEnter Pip install -U Selenium   (The -U will upgrade it to the latest Selenium version.)\nThis example selenium is already installed\nGo to https://github.com/mozilla/geckodriver/releases\nAt the time of writing I chose the latest version which was simply the version listed at the top of the page. For me it was v0.24.0.\nScroll down to assets and then click and download the correct driver. For windows it will be a zip file. Most likely 64bit. \nDownload the webdriver by clicking on the link\n5.Right click on the downloaded file and unzip the file. \nCopy and paste the file to somewhere in your python directory. e.g. If I installed Python in C:\\Python\\Python37 I would paste the file in there so gecko would be located in C:\\Python\\Python37\\geckodriver-v0.24.0-win64\n\nCopying the file path of the geckodriver\n\nInside that folder you just copied will be the geckodriver.exe\nIn Windows 10, click the ""windows"" button and search ""environment variables"" \nFind environment variables\nOR find it using these instructions; https://www.computerhope.com/issues/ch000549.htm\nClick on the ""environment variables"" box at the bottom right hand corner. \nIn the bottom box ""System Variables"" highlight the ""Path"" variable like so\nAdding environment variable Path\nPress edit and then add the entry at the bottom of the list. Copy and paste the location where the geckodriver.exe file lives. For me it was C:\\Python\\Python37\\geckodriver-v0.24.0-win64 (or where you copied the file in step 6)\nAdding gecko to the windows PATH\n\n', '\nto avoid links becoming out of date, please refer the soource.\nhttps://github.com/mozilla/geckodriver\nfollow the readme instructions to the ""Downloads"" > ""Releases"" link.\n']"
How to get body / json response from XHR request with Puppeteer [duplicate],"






This question already has answers here:
                        
                    



Puppeteer: How to listen to a specific response?

                                (5 answers)
                            

Closed 4 months ago.



I want to get the JSON data from a website I'm scraping with Puppeteer, but I can't figure how to get the body of the request back. Here's what I've tried:
const puppeteer = require('puppeteer')
const results = [];
(async () => {
    const browser = await puppeteer.launch({
        headless: false
    })
    const page = await browser.newPage()
    await page.goto(""https://capuk.org/i-want-help/courses/cap-money-course/introduction"", {
        waitUntil: 'networkidle2'
    });

    await page.type('#search-form > input[type=""text""]', 'bd14ew')  
    await page.click('#search-form > input[type=""submit""]')

    await page.on('response', response => {    
        if (response.url() == ""https://capuk.org/ajax_search/capmoneycourses""){
            console.log('XHR response received'); 
            console.log(response.json()); 
        } 
    }); 
})()

This just returns a promise pending function. Any help would be great.
",27k,"
            22
        ","['\nAs response.json returns a promise we need to await it.\npage.on(\'response\', async (response) => {    \n    if (response.url() == ""https://capuk.org/ajax_search/capmoneycourses""){\n        console.log(\'XHR response received\'); \n        console.log(await response.json()); \n    } \n}); \n\n']"
Connecting Browsers in Puppeteer,"
Is it possible to connect a browser to puppeteer without instantiating it in puppeteer? For example, running an instance of chromium like a regular user and then connecting that to an instance of puppeteer in code?
",16k,"
            15
        ","['\nThe answer is Yes and No.\nYou can connect to an existing using the connect function:\nconst browserURL = \'http://127.0.0.1:21222\';\nconst browser = await puppeteer.connect({browserURL});\n\nBut, if you want to use those 2 lines you need to launch Chrome with the ""--remote-debugging-port=21222 argument.\n', '\nI believe you need to connect to an address ended with an id:\nws://127.0.0.1:9222/devtools/browser/{id}\n\nWhen you launch Chrome with --remote-debugging-port, you\'ll see something like\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222   [17:57:55]\n\n...\n\nDevTools listening on ws://127.0.0.1:9222/devtools/browser/44b3c476-5524-497e-9918-d73fa39e40cf\n\nThe address on the last line is what you need, i.e.\nconst browser = await puppeteer.connect({\n    browserWSEndpoint: ""ws://127.0.0.1:9222/devtools/browser/44b3c476-5524-497e-9918-d73fa39e40cf""\n});\n\n']"
How to get children of elements by Puppeteer,"
I understand that puppeteer get its own handles rather than standard DOM elements, but I don't understand why I cannot continue the same query by found elements as
const els = await page.$$('div.parent');

for (let i = 0; i < els.length; i++) {
    const img = await els[i].$('img').getAttribute('src');
    console.log(img);
    const link = await els[i].$('a').getAttribute('href');
    console.log(link);
}

",23k,"
            12
        ","[""\nProblem\nThe element handles are necessary as an abstraction layer between the Node.js and browser runtime. The actual DOM elements are not sent to the Node.js environment.\nThat means when you want to get an attribute from an element, there has to be data transferred to the browser (which DOM element to use) and back (the result).\nSolution\nTherefore, the result from await els[i].$('img') is not really the DOM element, but only a wrapper that links to the element in the browser environment. To get the attribute, you have to use a function like elementHandle.$eval:\nconst imgSrc = await els[i].$eval('img', el => el.getAttribute('src'));\n\nThis runs the querySelector function on the given element and executes the given function to return its attribute.\n"", ""\nYou can use function $eval\nconst els = await page.$$('div.parent');\n\nfor (let i = 0; i < els.length; i++) {\n    const img = await els[i].$eval('img', i => i.getAttribute('src'));\n    console.log(img);\n    const link = await els[i].$eval('a', a => a.getAttribute('href'));\n    console.log(link);\n}\n\n""]"
How to use installed version of chrome in Playwright?,"
I want to use chrome instead of chromium. I can achieve the same in puppeteer by providing executable path. In playwright it doesn't work as browser type argument supports only 'chromium, webkit, firefox'


const { chromium } = require('playwright');
(async () => {
    const browser = await chromium.launch({
        headless: false,
        executablePath: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
    });
    const context = await browser.newContext();
    const page = await context.newPage();
    await page.goto('http://whatsmyuseragent.org/');
    await page.screenshot({ path: `example-${browserType}.png` });
})();


",16k,"
            10
        ","['\nYou need to pick one of those flavors. But once you pick the browser type Chromium, you will still be able to pass an executablePath to the launch function.\n', '\nIn 1.19 you can use chrome.\nbrowser = playwright.chromium.launch(channel=""chrome"")\n\nor you can simply put it in your playwright configuration file like:\n////\n    use: {\n        headless: true,\n        viewport: { width: 1600, height: 1000},\n        ignoreHTTPSErrors: true,\n        trace: \'on\',\n        screenshot: \'on\',\n        channel: ""chrome"",\n        video: \'on\'\n    },\n    ////\n\nMore on https://playwright.dev/python/docs/browsers\n', ""\nYou can specify browser path in config option\n////\nuse: {\n    headless: true,\n    viewport: { width: 1600, height: 1000},\n    channel: 'chrome',\n    launchOptions: {\n        executablePath: '/path/to/the/browser',\n    },\n},\n\n""]"
How to open the new tab using Playwright (ex. click the button to open the new section in a new tab),"
I am looking for a simpler solution to a current situation. For example, you open the google (any another website) and you want BY CLICK on the button (ex. Gmail) - open this page in the new tab using Playwright.
let browser, page, context;
describe('Check the main page view', function () {
    before(async () => {
        for (const browserType of ['chromium']) {
            browser = await playwright[browserType].launch({headless: false});
            context = await browser.newContext();
            page = await context.newPage();
            await page.goto(baseUrl);
        }
    });
    after(async function () {
        browser.close();
    });
    
        await page.click(tax);
        const taxPage = await page.getAttribute(taxAccount, 'href');

        const [newPage] = await Promise.all([
        context.waitForEvent('page'),
        page.evaluate((taxPage) => window.open(taxPage, '_blank'), taxPage)]);

        await newPage.waitForLoadState();
        console.log(await newPage.title());

",14k,"
            8
        ","['\nit(\'Open a new tab\', async function () {\n     await page.click(button, { button: ""middle"" });\n     await page.waitForTimeout(2000); //waitForNavigation and waitForLoadState do not work in this case\n     let pages = await context.pages();\n     expect(await pages[1].title()).equal(\'Title\');\n\n', '\nYou could pass a modifier to the click function. In macos it would be Meta because you\'d open in a new tab with cmd+click. In windows it would be Control.\nconst browser = await playwright[""chromium""].launch({headless : false});\nconst page = await browser.newPage();\nawait page.goto(\'https://www.facebook.com/\');\nvar pagePromise = page.context().waitForEvent(\'page\', p => p.url() ==\'https://www.messenger.com/\');\nawait page.click(\'text=Messenger\', { modifiers: [\'Meta\']});\nconst newPage = await pagePromise;\nawait newPage.bringToFront();\nawait browser.close();\n\n', '\nIn my case i am clicking on link in a pop up like (ctrl + click on link) then it opens new tab and work on that new tab\nawait page.click(\'#open\')\nconst [newTab] = await Promise.all([\n    page.waitForEvent(\'popup\'),\n    await page.keyboard.down(\'Control\'),\n    await page.frameLocator(\'//iframe[@title=""New tab.""]\').locator(\'a\').click(), // in popup\n    await page.keyboard.up(\'Control\'),\n    console.log(""clicked on link"")\n]);\nawait newTab.waitForFunction(()=>document.title === \'new tab title\')\nawait newTab.fill(\'#firstname\')\nawait newTab.close() // close the current tab\nawait page.click(\'#exitbutton\') //back to parent tab and work on it\n....\n....\nawait page.close() // close the parent tab\n\n']"
How to scroll down in an instagram pop-up frame with Selenium,"
I have a python script using selenium to go to a given Instagram profile and iterate over the user's followers. On the instagram website when one clicks to see the list of followers, a pop-up opens with the accounts listed (here's a screenshot of the site)
However both visually and in the html, only 12 accounts are shown. In order to see more one has to scroll down, so I tried doing this with the Keys.PAGE_DOWN input.
from selenium import webdriver
from selenium.common.exceptions         import TimeoutException
from selenium.webdriver.support.ui      import WebDriverWait 
from selenium.webdriver.support         import expected_conditions as EC
from selenium.webdriver.chrome.options  import Options
from selenium.webdriver.common.keys     import Keys
import time 

...
username = 'Username'
password = 'Password'
message  = 'blahblah'
tryTime  = 2

#create driver and log in
driver = webdriver.Chrome()
logIn(driver, username, password, tryTime)

#gets rid of preference pop-up
a = driver.find_elements_by_class_name(""HoLwm"")
a[0].click()

#go to profile
driver.get(""https://www.instagram.com/{}/"".format(username))

#go to followers list
followers = driver.find_element_by_xpath(""//a[@href='/{}/followers/']"".format(username))
followers.click()
time.sleep(tryTime) 

#find all li elements in list
fBody  = driver.find_element_by_xpath(""//div[@role='dialog']"")
fBody.send_keys(Keys.PAGE_DOWN) 

fList  = fBody.find_elements_by_tag(""li"")
print(""fList len is {}"".format(len(fList)))

time.sleep(tryTime)

print(""ended"")
driver.quit()

When I try to run this I get the following error:
Message: unknown error: cannot focus element

I know this is probably because I'm using the wrong element for fBody, but I don't know which would be the right one. Does anybody know which element I should send the PAGE_DOWN key to, or if there is another way to load  the accounts? 
Any help is much appreciated!
",9k,"
            7
        ","['\nthe element you\'re looking is //div[@class=\'isgrP\'] and Keys.PAGE_DOWN is not work for scrollable div. \nYour variable fList hold old value, you need to find again the elements after scroll.\n#find all li elements in list\nfBody  = driver.find_element_by_xpath(""//div[@class=\'isgrP\']"")\nscroll = 0\nwhile scroll < 5: # scroll 5 times\n    driver.execute_script(\'arguments[0].scrollTop = arguments[0].scrollTop + arguments[0].offsetHeight;\', fBody)\n    time.sleep(tryTime)\n    scroll += 1\n\nfList  = driver.find_elements_by_xpath(""//div[@class=\'isgrP\']//li"")\nprint(""fList len is {}"".format(len(fList)))\n\nprint(""ended"")\n#driver.quit()\n\n', '\nThe above code works fine if you add iteration (for) with range\nfor i in range(1, 4):\n            try:\n            #find all li elements in list\n            fBody  = self.driver.find_element_by_xpath(""//div[@class=\'isgrP\']"")\n            scroll = 0\n            while scroll < 5: # scroll 5 times\n                self.driver.execute_script(\'arguments[0].scrollTop = arguments[0].scrollTop + arguments[0].offsetHeight;\', fBody)\n                time.sleep(2)\n                scroll += 1\n\n            fList  = self.driver.find_elements_by_xpath(""//div[@class=\'isgrP\']//li"")\n            print(""fList len is {}"".format(len(fList)))\n\n        except Exception as e:\n            print(e, ""canot scrol"")\n\n        try:\n            #get tags with a\n            hrefs_in_view = self.driver.find_elements_by_tag_name(\'a\')\n            # finding relevant hrefs\n            hrefs_in_view = [elem.get_attribute(\'title\') for elem in hrefs_in_view]\n\n            [pic_hrefs.append(title) for title in hrefs_in_view if title not in pic_hrefs]\n            print(""Check: pic href length "" + str(len(pic_hrefs)))\n\n        except Exception as tag:\n            print(tag, ""can not find tag"")\n\nSo, the for loop makes it to possible scrol even if the while loop miss\n']"
Wait for a particular URL in selenium,"
I have the requirement of waiting for a particular URL in website automation using Selenium in Chrome browser. 
The user will be doing online payment on our website. Fro our website user is redirected to the payment gateway. When the user completes the payment, the gateway will redirect to our website. I want to get notified redirection from gateway to our site. 
I got an example which waits for “Particular Id” in the web page, here is vb.net code
driver.Url = ""http://gmail.com""
   Dim wait As New WebDriverWait(driver, TimeSpan.FromSeconds(10))
                wait.Until(Of IWebElement)(Function(d) d.FindElement(By.Id(""next"")))

This navigates to “gmail.com” and waits for ID “next” on that page. Instead, I want to continue the code only when particular URL loads. 
How can I do this?
Please help me.
",25k,"
            5
        ","['\nI\'m not sure what language you\'re using, but in Java you can do something like this:\nnew WebDriverWait(driver, 20).Until(ExpectedConditions.UrlToBe(""my-url""));\n\nTo wait until your url has loaded.\nIf you cannot use the latest selenium version for some reason, you can implement the method yourself:\npublic static Func<IWebDriver, bool> UrlToBe(string url)\n{\n    return (driver) => { return driver.Url.ToLowerInvariant().Equals(url.ToLowerInvariant()); };\n}\n\n', '\nThey have added more support for expected conditions now. You would have to create a webdriver wait and expect the url to contain a value\nWebDriverWait wait = new WebDriverWait(yourDriver, TimeSpan.FromSeconds(5));\nwait.Until(ExpectedConditions.UrlContains(""/url-fragment""));\n\n']"
Why is switch_to_window() method not working for selenium webdriver in Python?,"
I am trying to switch to a newly opened window using the Python selenium webdriver. The code worked fine before but now it is showing error. Surprisingly, the switch_to_window() method is not being recognized by Python and has no declaration to go to.
def process_ebl_statements(self, account_number):

    current_window = self.driver.current_window_handle
    all_windows = self.driver.window_handles

    print(""Current window: "", current_window)
    print(""All windows: "", all_windows)
    number_of_windows = len(all_windows)
    self.driver.switch_to_window(all_windows[number_of_windows - 1])

Error details:
'WebDriver' object has no attribute 'switch_to_window'


",3k,"
            4
        ","[""\nThis error message...\n'WebDriver' object has no attribute 'switch_to_window'\n\n...implies that the WebDriver object no more supports the attribute switch_to_window()\n\nswitch_to_window\nswitch_to_window was deprecated in Selenium v2.41 :\n\nSelenium 2.41\n\ndeprecating switch_to_* in favour of driver.switch_to.*\n\n\nHence you see the error.\n\nSolution\nInstead of switch_to_window you need to use switch_to.\nExamples:\n\ndriver.switch_to.active_element\ndriver.switch_to.alert\ndriver.switch_to.default_content()\ndriver.switch_to.frame()\ndriver.switch_to.parent_frame()\ndriver.switch_to.window('main')\n\n""]"
jbehave + thucydides: how to override 300s timeout,"
I'm using thucydides jbehave plugin to run Selenium tests. However, I can't run tests longer than 5 min in total due to jbehave timeout. I can't figure out how can thucydides/jbehave should be configured to override this limitation. Selenium tests use to be longer that 5 mins, so that should be an actual problem for many people.
",5k,"
            3
        ","['\nTo override the timeout the user should add thucydides.properties file to the main folder of the project (if you use thucidides jbehave archetype, there is no such file by default). \nset, for instance, story.timeout.in.secs=3000 and save the file. the timeout parameter will be overriden\n', '\nTo overide the timeout we can use the following :\n @Override\n        public Embedder configuredEmbedder(){\n\nStoryTimeouts.TimeoutParser t=new StoryTimeouts.TimeoutParser() {\n                @Override\n                public boolean isValid(String timeout) {\n                    return true;\n                }\n\n                @Override\n                public long asSeconds(String timeout) {\n                    return 500; <--- Storytimeout \n                }\n            };\n\n            embedder.useTimeoutParsers(t);\n}\n\n']"
How to get the total number of Rows in a table | Cypress,"

I have a table with N rows. How can I get the total number of rows present in the table?
I search for a name, and that particular name is in row number X, how can I get the value of that particular row.

",9k,"
            3
        ","['\nYou can use .find to solve both of your cases.\nTo get the table row count:\n  cy.get(""#tableID"")\n    .find(""tr"")\n    .then((row) => {\n      //row.length will give you the row count\n      cy.log(row.length);\n    });\n\nTo get the value ( index ) of the particular row, you can do something like this.\n  cy.get(""#Table Id"")\n    .find(""tr"")\n    .then((rows) => {\n      rows.toArray().forEach((element) => {\n        if (element.innerHTML.includes(""Your Value"")) {\n        //rows.index(element) will give you the row index\n          cy.log(rows.index(element));\n        }\n      });\n    });\n\nAdditional tip: If you want to select a specific table cell containing a value, you can do this:\n  cy.get(""#customers"").find(""tr"").find(""td"").contains(""Germany"");\n\nNote: to get the table row index there can be many other alternative ways. Hope you will figure them out on the go.\n']"
Puppeteer Get all data attribute values,"
My html doc is
<div class=""inner-column"">
 <div data-thing=""abc1""></div>
 <div data-thing=""abc2""></div>
 <div data-thing=""abc3""></div>
</div>

How can I get all ""data-thing"" value (eg. [""abc1"", ""abc2"", ""abc3""]) inside div with class .inner-column?
const puppeteer = require('puppeteer');
const fs = require('fs');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.setViewport({width: 1440, height: 1200})
  await page.goto('https://www.example.com')

  const data = await page.content();

  await browser.close();
})();

",11k,"
            3
        ","[""\nYou could use the page.$$eval function for that like this:\nconst dataValues = await page.$$eval(\n    '.inner-column div',\n    divs => divs.map(div => div.dataset.thing)\n);\n\nExplanation\nWhat the page.$$eval function does (quote from the docs linked above):\n\nThis method runs Array.from(document.querySelectorAll(selector)) within the page and passes it as the first argument to pageFunction.\nIf pageFunction returns a Promise, then page.$$eval would wait for the promise to resolve and return its value.\n\nTherefore, it will first query the targeted divs and then map the divs to their data-* value by using the dataset property.\n"", '\nYou can use the evaluate function\nconst data = await page.evaluate(() => \n  Array.from(document.querySelectorAll("".inner-column DIV"")).map(d => d.getAttribute(""data-thing""))\n)\n\n']"
Controlling a web browser using Excel VBA,"
I have been assigned the task of automating a web based task ( for a HTTPS website). The users currently are filling in the Excel sheet with the data, they now want to automate excel in such a way that it directly controls the browser and fills in the data.
I found the iMacros Scripting edition as a possible solution for doing this, I wanted to know if there are any other similar tools which can be used for controlling the browser and filling in data.
I also had a look at the Selenium Client Driver, but I am not sure on how to use it in Excel VBA.
Any help would be appreciated.
Thanks,
",25k,"
            3
        ","['\nYou can use Selenium from Visual Basic Editor by installing the tools provided here :\nhttp://code.google.com/p/selenium-vba/\nThere is a Selenium IDE plugin to automatically record a script in VBA and an installation package to run Selenium command in Visual Basic Editor.\nThe following example starts firefox, opens links in the 1st column, compares the title with the 2nd column and past the result in the 3rd column.\nUsed data are in a sheet, in a range named ""MyValues"".\nPublic Sub TC002()\n   Dim selenium As New SeleniumWrapper.WebDriver, r As Range\n   selenium.Start ""firefox"", ""http://www.google.com"" \n   For Each r In Range(""MyValues"").Rows\n     selenium.open r.Cells(, 1)\n     selenium.waitForNotTitle """"\n     r.Cells(, 3) = selenium.verifyTitle(r.Cells(, 2))\n   Next\n   selenium.stop\nEnd Sub\n\n', '\nThis sample open stackoverflow site an show IE\nSub OpenIE()\n\'officevb.com\nDim ie As Object\nSet ie = CreateObject(""InternetExplorer.Application"")\n\nie.Navigate ""http://www.stackowerflow.com""\n\n \'wait load\n While ie.ReadyState <> READYSTATE_COMPLETE\n  DoEvents\n Wend\n\nie.Visible = True\n\nEnd Sub\n\n[]\'s\n', '\nI use this code for reading data from excel and passin it to selenium for to do task like ""click, select, close etc"" and also you can write data to excel.\nThis is in python i don know VB and i do know perl if u wish i\'ll give same code in perl too.\ni hop this may help.\nfrom xlwt import Workbook\n\nimport xlrd\n\ntestconfigfilename=""testconfig.xls""\n\n    if (len(sys.argv) > 1):\n\n        testconfigfilename=sys.argv[1]       \n\n    wb = xlrd.open_workbook(testconfigfilename);\n\n    wb.sheet_names();\n\n    sh = wb.sheet_by_index(0); \'Sheet 0 - selenium server configuration\'\n\n\n\n    seleniumHost = sh.cell(1,0).value\n\n    seleniumPort = int(sh.cell(1,1).value)\n\n    testBaseURL = sh.cell(1,2).value\n\n    browser = sh.cell(1,3).value\n\n    timeout = int(sh.cell(1,4).value)\n\n    path = sh.cell(1,5).value\n\noutputwb = Workbook()\n\n    outputsheet = outputwb.add_sheet(""result"",cell_overwrite_ok=True) #get the first sheet in the result xls \n\noutputsheet.write(RowNumber,colNumber,""data"")\n\n']"
Python Selenium - What are possible keys in FireFox webdriver profile preferences,"
I couldn't really find this information anywhere, I am looking for a list of possible keys that can be used in the profile.set_preference() API.
Here is some context:
from selenium import webdriver
from pyvirtualdisplay import Display
display = Display(visible=0, size=(1024, 768))
display.start()
profile = webdriver.FirefoxProfile()

Now, if I want to, say specify a client SSL, I need to configure that as a preference of FireFox profile. I am trying to find the list of all the preferences so I can play with this. 
",2k,"
            2
        ","[""\nYou can look at profile.DEFAULT_PREFERENCES which is the json at python2.7/site-packages/selenium/webdriver/firefox/webdriver_prefs.json\n{u'frozen': {u'app.update.auto': False,\n  u'app.update.enabled': False,\n  u'browser.EULA.3.accepted': True,\n  u'browser.EULA.override': True,\n  u'browser.displayedE10SNotice': 4,\n  u'browser.download.manager.showWhenStarting': False,\n  u'browser.link.open_external': 2,\n  u'browser.link.open_newwindow': 2,\n  u'browser.offline': False,\n  u'browser.reader.detectedFirstArticle': True,\n  u'browser.safebrowsing.enabled': False,\n  u'browser.safebrowsing.malware.enabled': False,\n  u'browser.search.update': False,\n  u'browser.selfsupport.url': u'',\n  u'browser.sessionstore.resume_from_crash': False,\n  u'browser.shell.checkDefaultBrowser': False,\n  u'browser.tabs.warnOnClose': False,\n  u'browser.tabs.warnOnOpen': False,\n  u'datareporting.healthreport.logging.consoleEnabled': False,\n  u'datareporting.healthreport.service.enabled': False,\n  u'datareporting.healthreport.service.firstRun': False,\n  u'datareporting.healthreport.uploadEnabled': False,\n  u'datareporting.policy.dataSubmissionEnabled': False,\n  u'datareporting.policy.dataSubmissionPolicyAccepted': False,\n  u'devtools.errorconsole.enabled': True,\n  u'dom.disable_open_during_load': False,\n  u'extensions.autoDisableScopes': 10,\n  u'extensions.blocklist.enabled': False,\n  u'extensions.logging.enabled': True,\n  u'extensions.update.enabled': False,\n  u'extensions.update.notifyUser': False,\n  u'javascript.enabled': True,\n  u'network.http.phishy-userpass-length': 255,\n  u'network.manage-offline-status': False,\n  u'offline-apps.allow_by_default': True,\n  u'prompts.tab_modal.enabled': False,\n  u'security.csp.enable': False,\n  u'security.fileuri.origin_policy': 3,\n  u'security.fileuri.strict_origin_policy': False,\n  u'security.warn_entering_secure': False,\n  u'security.warn_entering_secure.show_once': False,\n  u'security.warn_entering_weak': False,\n  u'security.warn_entering_weak.show_once': False,\n  u'security.warn_leaving_secure': False,\n  u'security.warn_leaving_secure.show_once': False,\n  u'security.warn_submit_insecure': False,\n  u'security.warn_viewing_mixed': False,\n  u'security.warn_viewing_mixed.show_once': False,\n  u'signon.rememberSignons': False,\n  u'toolkit.networkmanager.disable': True,\n  u'toolkit.telemetry.enabled': False,\n  u'toolkit.telemetry.prompted': 2,\n  u'toolkit.telemetry.rejected': True},\n u'mutable': {u'browser.dom.window.dump.enabled': True,\n  u'browser.newtab.url': u'about:blank',\n  u'browser.newtabpage.enabled': False,\n  u'browser.startup.homepage': u'about:blank',\n  u'browser.startup.page': 0,\n  u'dom.max_chrome_script_run_time': 30,\n  u'dom.max_script_run_time': 30,\n  u'dom.report_all_js_exceptions': True,\n  u'javascript.options.showInConsole': True,\n  u'network.http.max-connections-per-server': 10,\n  u'startup.homepage_welcome_url': u'about:blank',\n  u'webdriver_accept_untrusted_certs': True,\n  u'webdriver_assume_untrusted_issuer': True}}\n\n"", '\nI usually just open about:config and search the list of preferences there. There is also this helpful resource which documents part of the preferences.\n']"
How do I switch to new tab or window in playwright-java?,"
How can we switch to a new window that has opened while running test, and how can I get back to the parent window in playwright-java?
",3k,"
            2
        ","['\nThere is no Switch action like Selenium. You can use the waitForPage or waitForPopup functions. You just need to know what is the action triggering that new page. e.g.\nPage popup = context.waitForPage(() -> page.click(""a""));\n\nThe context class also has a pages() function, which returns all the open pages.\n', ""\nexpanding on @hardkoded's answer, I got an error and am now using this:\ncontext.waitForEvent('page')\n\nworks for my purposes so far\n"", '\nWhat you want to do is continue your test in a new page. The official docs: https://playwright.dev/docs/pages#handling-new-pages\nHere is an example where we first work in the initial ""page"" and then, after clicking a button we want to continue our tests in a new tab we define as ""newPage"":\n        // Here we are working in the initial page\n        await page.locator(""#locator"").type(""This happens in the initial page.."");\n\n        /*  When ""Ok"" is clicked the test waits for a new page event and assigns to new page object to a variable called newPage\n            After this point we want the test to continue in the new tab,\n            so we\'ll have to use the newly defined newPage variable when working on that tab\n        */\n        const [newPage] = await Promise.all([\n            context.waitForEvent(\'page\'),\n            page.locator(""span >> text=Ok"").click()\n            \n        ])\n        await newPage.waitForLoadState();\n\n        console.log(""A new tab opened and the url of the tab is: "" + newPage.url());\n\n        // Here we work with the newPage object and we can perform actions like with page\n        await newPage.locator(""#Description"").type(""This happens in a new tab!"");\n\n']"
how to use edgeDriver with qaf,"
I use below properties to run edge browser, but it doesn't work.
webdriver.edge.driver=src/main/resources/common/msedgedriver.exe
driver.name=edgeDriver

How can I use edge browser?
",568,"
            2
        ","['\nIn order to set driver executable, you need to set value using appropriate system property for the driver. You can set system property either at the time of execution using -Dpropertyname=value or through code.  If you are using qaf, it provides feature to set system property through property file. For that purpose you need to add system prefix with property name. For example:\nsystem.webdriver.edge.driver=src/main/resources/common/msedgedriver.exe\n', '\nAccording to the doc https://qmetry.github.io/qaf/latest/how_to_use_driver.html and check the UiDriverFactory.java in com.qmetry.qaf.automation.ui of qaf, it looks qaf not support this.\n']"
Selenium Chrome WebDriver how to scroll horizontally,"
Chrome web driver has a limitation that only loads webpage content that is in view. I have a website that has long horizontal table. I have Xpath that extracts column headers of a table that stretches more than the screen width. In chrome dev tool console if I run the xpath $x(myxpathgoeshere) I get all the headers including the ones that are not in view(the one that makes you scroll to see all). So I know my xpath is correct. But in code, when I access it by using selenium webdriver it only gives header names that are in current view. I came across various posts on chrome webdriver google group page, users mentioning this limitation and answer to it was to not fix it. So anyways, now I am trying to make it work using javascript to scroll horizontally and then do the findelement by xpath again to see if the elements to the right are loaded. But for some strange reason I cannot seem to get the scrolling horizontally to work. I am using C# Javascript executor.
IJavaScriptExecutor js = (IJavaScriptExecutor) Driver;
js.ExecuteScript(""scrollTo(3000,0);""); // whatever X value I use chrome is not scrolling to the right. 

I have also tried scrollX and no luck. Is there something wrong with my code?
Edited: forgot that I was using X for horizontal not Y
",8k,"
            2
        ","['\nfor this type of issue i had use browser zoom-in and zoom-out functionality but i am using this in java. With java robot class i am doing browser zoom-out so i automatically shows the hidden column. you can try that it may help you. \n', '\nChange the code: \njs.ExecuteScript(""scrollTo(3000,0);"");\n\nto\njs.ExecuteScript(""scroll(3000,0);"");\n\nSimply, it\'s not scrollTo and scroll only.\n']"
Multi-threaded C# Selenium WebDriver automation with Uris not known beforehand,"
I need to perform some simultaneous webdrivers manipulation, but I am uncertain as to how to do this.
What I am asking here is: 

What is the correct way to achieve this ?
What is the reason for the exception I am getting (revealed below)

After some research I ended up with:
1. The way I see people doing this (and the one I ended up using after playing with the API, before searching) is to loop over the window handles my WebDriver has at hand, and perform a switch to and out of the window handle I want to process, closing it when I am finished.
2. Selenium Grid does not seem like an option fore me - am I wrong or it is intended for parallel processing ? Since am running everything in a single computer, it will be of no use for me.

In trying the 1st option, I have the following scenario (a code sample is available below, I skipped stuff that is not relevant/repeat itself (where ever I added 3 dots:
I have a html page, with several submit buttons, stacked.
Clicking each of them will open a new browser/tab (interestingly enough, using ChromeDriver opens tabs, while FirefoxDriver opens separate windows for each.)
As a side note: I can't determine the uris of each submit beforehand (they must be determined by javascript, and at this point, let's just assume I want to handle everything knowing nothing about the client code.
Now, after looping over all the submit buttons, and issuing webElement.Click() on the corresponding elements, the tabs/windows open. The code flows to create a list of tasks to be executed, one for each new tab/window.
The problem is: since all tasks all depend upon the same instance of webdriver to switch to the window handles, seems I will need to add resource sharing locks/control. I am uncertain as whether I am correct, since I saw no mention of locks/resource access control in searching for multi-threaded web driver examples.
On the other hand, if I am able to determine the tabs/windows uris beforehand, I would be able to skip all the automation steps needed to reach this point, and then creating a webDriver instance for each thread, via Navigate().GoToUrl() would be straightforward. But this looks like a deadlock! I don't see webDriver's API providing any access to the newly opened tab/window without performing a switch. And I only want to switch if I do not have to repeat all the automation steps that lead me to the current window !
...
In any case, I keep getting the exception:
Element belongs to a different frame than the current one - switch to its containing frame to use it
at 
IWebElement element = cell.FindElement

inside the ToDictionary() block.
I obviously checked that all my selectors are returning results, in chrome's console. 
foreach (WebElement resultSet in resultSets)
    resultSet.Click();


foreach(string windowHandle in webDriver.WindowHandles.Skip(1))
{
    dataCollectionTasks.Add(Task.Factory.StartNew<List<DataTable>>(obj =>
    {
        List<DataTable> collectedData = new List<DataTable>();
        string window = obj as string;

        if (window != null)
        {
            webDriver.SwitchTo().Window(windowHandle);
            List<WebElement> dataSets = webDriver.FindElements(By.JQuerySelector(utils.GetAppSetting(""selectors.ResultSetData""))).ToList();

            DataTable data = null;

            for (int i = 0; i < dataSets.Count; i += 2)
            {
                data = new DataTable();

                data.Columns.Add(""Col1"", typeof(string));
                data.Columns.Add(""Col2"", typeof(string));
                data.Columns.Add(""Col3"", typeof(string));

                ///...

                //data set header
                if (i % 2 != 0)
                {
                    IWebElement headerElement = dataSets[i].FindElement(OpenQA.Selenium.By.CssSelector(utils.GetAppSetting(""selectors.ResultSetDataHeader"")));
                    data.TableName = string.Join("" "", headerElement.Text.Split().Take(3));
                }
                //data set records
                else
                {
                    Dictionary<string, string> cells = dataSets[i]
                        .FindElements(OpenQA.Selenium.By.CssSelector(utils.GetAppSetting(""selectors.ResultSetDataCell"")))
                        .ToDictionary(
                            cell =>
                            {
                                IWebElement element = cell.FindElement(OpenQA.Selenium.By.CssSelector(utils.GetAppSetting(""selectors.ResultSetDataHeaderColumn"")));
                                return element == null ? string.Empty : element.Text;
                            },
                            cell =>
                            {
                                return cell == null ? string.Empty : cell.Text;
                            });

                    string col1Value, col2Value, col3Value; //...
                    cells.TryGetValue(""Col1"", out col1Value);
                    cells.TryGetValue(""Col2"", out col2Value);
                    cells.TryGetValue(""Col3"", out col3Value);
                    //...

                    data.Rows.Add(col1Value, col2Value, col3Value /*...*/);
                }
            }

            collectedData.Add(data);
        }

        webDriver.SwitchTo().Window(mainWindow);
        webDriver.Close();

        return collectedData;
    }, windowHandle));
} //foreach

Task.WaitAll(dataCollectionTasks.ToArray());
foreach (Task<List<DataTable>> dataCollectionTask in dataCollectionTasks)
{
    results.AddRange(dataCollectionTask.Result);
}

return results;

",3k,"
            1
        ",[]
How to add wait / Delay until web page is fully loaded in Automation Anywhere?,"
I want to know 'How to add wait or Delay until webpage is fully loaded,' in automations anywhere,
I used 

wait for screen change

But it hold the process until some time specified by the developer , but I want to add delay until the web page fully loaded, 
Is there anyone can help me?
sorry for the bad English.
",8k,"
            1
        ","['\nUsually, a website is ""loaded"" or ""ready"" before the actual content is loaded. Some websites even have dummy content which is replaced once the actual content is retrieved from \'somewhere\'. Hence waiting for the screen to change is not a good idea. \nMy approach is to pick an element which you know is loaded after the element you want to interact with. For instance the navigation bar on this website is loaded before the comments are. You can either figure out which element to use by looking at the source of the website by right-clicking anywhere and selecting view source or by simply refreshing the page a couple of times and eye-balling it. The former requires some HTML knowledge, but is a better approach in my opinion.\nOnce you\'ve identified your element, use Object Cloning on said element and use the built-in wait as a delay (usually set to 15 sec, depending on the website/connection). The Action should be some random get property (store whatever you retrieve in some dummy variable as we\'re not going to use it anyway).\nObject Cloning\'s wait function polls every so many milliseconds and once the element is found it will almost instantaneously go to the next line in the code. This is where you interact with your target element. \nThis way you know your target element is loaded and the code is very optimized and robust.\nOn a final note: It\'s usually a good idea to surround this with some exception handling as automating websites is prone to errors.\n', '\nA very simple solution is to run your automation while watching and determine the amount of time it takes for the webpage to load. You can add a Delay rather than a wait if you know the page is generally loaded within 30 seconds or so. \n']"
How to get a specific frame in a web page and retrieve its content,"
I wanted to access the translation results of the following url 

http://translate.google.com/translate?hl=en&sl=en&tl=ar&u=http%3A%2F%2Fwww.saltycrane.com%2Fblog%2F2008%2F10%2Fhow-escape-percent-encode-url-python%2F

the translation is displayed in the bottom  content frame out of the two frames. I am interested in retrieving only the bottom content frame to get the translations 
selenium for python allows us to fetch page contents via web automation:
browser.get('http://translate.google.com/#en/ar/'+hurl)

The required frame is an iframe :
<div id=""contentframe"" style=""top:160px""><iframe   src=""/translate_p?hl=en&am... name=c frameborder=""0"" style=""height:100%;width:100%;position:absolute;top:0px;bottom:0px;""></div></iframe>

but how to get the bottom content frame element to retrieve the translations using web automation?
Came to know that PyQuery also allows us to browse the contents using the JQuery formalism
Update:
An answer mentioned that Selenium provides a method where you can do that.
frame = browser.find_element_by_tag_name('iframe')
browser.switch_to_frame(frame)
# get page source
browser.page_source

but it does not work in the above example. It returns an empty page .
",11k,"
            1
        ","['\nYou can use driver.switchTo.frame(1); here, the digit 1 inside frame() is the index of frames present in the webpage. as your requirement is to switch to second frame and the index starts with 0, you should use driver.switchTo.frame(1);\nBut the above code is in Java. In Python, you can use the below line.\ndriver.switch_to_frame(1);\n\nUPDATE\n driver.get(""http://translate.google.com/translate?hl=en&sl=en&tl=ar&u=http://www.saltycrane.com/blog/2008/10/how-escape-percent-encode-url-python/"");\n driver.switchTo().frame(0);\n System.out.println(driver.findElement(By.xpath(""/html/body/div/div/div[3]/h1/span/a"")).getText());\n\nOutput: SaltyCrane ???????\nI have just tried to print the title name SaltCrane that is present inside the iframe.\nIt worked for me except for the ? symbols after the SaltCrane. As it was arabic, it was unable to decode the same.\nThe above code is in Java. Same logic should also work in Python.\n', ""\nSelenium provides a method where you can do that.\nframe = browser.find_element_by_tag_name('iframe')\nbrowser.switch_to_frame(frame)\n# get page source\nbrowser.page_source\n\n""]"
Unable to capture response.json() in playwright,"
I am trying to capture json response using playwright. I keep on getting Promise pending. However under headless:false mode i can see the data is being received and populated on the browser. I have just started playing with Playwright and also not very familiar with ""Promise"".
What i have tried is as below:
(async () => {
        let browser = await firefox.launch({headless: true, userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0'});
        let page = await browser.newPage();
        page.waitForResponse(async(response) => {
            if (response.url().includes('/abcd') && response.status() == 200) {
                let resp = await response.json();
                console.log(resp);
            }
        });
        await page.goto('https://myurl.com', {waitUntil: 'networkidle', timeout: 30000});
        await page.waitForTimeout(20000);
        await browser.close();
})

What am i doing wrong? I have tried increasing timeout. Doesnot help.
",5k,"
            1
        ","[""\nThe waitForResponse won't handle your async function. You could do something like this:\n(async () => {\n  let browser = await firefox.launch({headless: true, userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0'});\n  let page = await browser.newPage();\n  const promise page.waitForResponse(/abcd/); // This is a regex to match the url\n  await page.goto('https://myurl.com', {waitUntil: 'networkidle', timeout: 30000});\n  var response = await promise; // here we wait for the promise to be fullfiled. \n  let resp = await response.json();\n  console.log(resp);\n  await browser.close();\n})\n\n""]"
how to instantiate the webdriver object from the custom library when doing web automation using robot framework,"
while defining user keywords in custom library for web automation,which library should be imported?selenium2library or importing webdriver from selenium.How to use the webdriver to click on some elements.Kindly explain with an example 
",1k,"
            0
        ","['\nIn most scenarios you do not need to instantiate the webdriver object. Usually you use the webdriver instance that Selenium2Library already has. How you access that instance depends on how you plan on interacting with Selenium2Library. See the ""Extending existing test libraries"" section in the user guide for options. Each options have pros and cons.\nIf you inherit Selenium2Library, then you would access the driver via self._current_browser().\nIf you plan on using the Selenium2Library directly instead of inheriting, you would declare both Selenium2Library and your custom libraries. The most convenient way to access the driver is through a private property as demonstrated below. \nfrom robot.libraries.BuiltIn import BuiltIn\n\nclass Selenium2LibraryExt(object):\n\n    @property\n    def _s2l(self):\n        return BuiltIn().get_library_instance(\'Selenium2Library\')\n\n    @property\n    def _driver(self):\n        return self._s2l._current_browser()\n\n    def perform_search(self, criteria):\n        textbox = self._driver.find_element_by_name(\'q\')\n        textbox.send_keys(criteria)\n        textbox.submit()\n\nTest suite file:\n*** Settings ***\nTest Teardown     Close All Browsers\nLibrary           Selenium2Library\nLibrary           c:/ws/Selenium2LibraryExt.py\n\n*** Test Cases ***\nDo a search\n    Open Browser    http://www.google.com/    gc\n    Perform Search    happiness\n\n', '\nI have found that inheriting Selenium2Library is usually enough, like this\nfrom Selenium2Library import Selenium2Library\n\nclass MySelenium2Library(Selenium2Library):\n    def my_keyword(self):\n        my_element = self.get_my_element()\n        self.click_element(my_element)\n\nIn Robot you import this new library\n*** Settings ***\nLibrary    MySelenium2Library.py\n\n*** Test Cases ***\nTest 1\n    My Keyword\n\nI have not needed webdriver to click elements. I do all my clicking with Selenium2Library click methods like click_element.\n']"
IE Web Automation - How to auto select value from combo box using Excel VBA/XML Macro,"
I'm a beginner in VBA and I've failed to select country name automatically in web Combo box or list box from my Excel spreadsheet. My code is entering country name only, but not selecting it. 
How can I change this code so it can pick country name from my Excel spreadsheet and select the same in web combo box as a loop. Passport number, DOB and Nationality are correct on my code. If you'll use manually then you can find the work permit number which I need to capture in my spreadsheet. Chrome Inspect Element screenshot is attached herewith.

My code is as follows:
Sub MOL()
    Dim IE As New SHDocVw.InternetExplorer
    Dim Doc As MSHTML.HTMLDocument
    Dim Buttons As MSHTML.IHTMLElementCollection
    Dim Button As MSHTML.IHTMLElement
    Dim HTMLInput As MSHTML.IHTMLElement
    Dim Tags As MSHTML.IHTMLElement
    Dim HTMLTables As MSHTML.IHTMLElementCollection
    Dim HTMLTable As MSHTML.IHTMLElement
    Dim HTMLRow As MSHTML.IHTMLElement
    Dim HTMLCell As MSHTML.IHTMLElement
    Dim Alltext As IHTMLElementCollection

Application.ScreenUpdating = False
'Application.Calculation = xlCalculationManual
'Application.EnableEvents = False

On Error Resume Next

    IE.Visible = True
    IE.navigate ""https://eservices.mol.gov.ae/SmartTasheel/Complain/IndexLogin?lang=en-gb""

Do While IE.readyState <> READYSTATE_COMPLETE: Loop

Set Doc = IE.document
Set Buttons = Doc.getElementsByTagName(""Button"")
Buttons(2).Click
Do While IE.readyState <> READYSTATE_INTERACTIVE = 3: Loop
Set HTMLInputs = Doc.getElementsByTagName(""Input"")
    HTMLInputs(46).Value = ""somevalue""
    HTMLInputs(48).Value = ""24/02/1990""
    HTMLInputs(47).Value = ""India""
Buttons(21).Click
End Sub

",2k,"
            0
        ","['\nThe solution you look for is a bit difficult to provide. There are few tricky parts to hurdle to select the NATIONALITY from dropdown. I\'ve used .querySelector() within the script to make it concise. However, it should serve your purpose no matter whatever country you wanna select from dropdown. Give it a shot:\nSub GetInfo()\n    Dim IE As New InternetExplorer, HTML As HTMLDocument, post As Object, URL$\n\n    URL = ""https://eservices.mol.gov.ae/SmartTasheel/Complain/IndexLogin?lang=en-gb""\n\n    With IE\n        .Visible = True\n        .navigate URL\n        While .Busy = True Or .readyState < 4: DoEvents: Wend\n        Set HTML = .document\n\n        HTML.getElementById(""TransactionInfo_WorkPermitNumber"").innerText = ""2659558""\n        HTML.querySelector(""button[ng-click=\'showEmployeeSearch()\']"").Click\n\n        Application.Wait Now + TimeValue(""00:00:03"")  \'\'If for some reason the script fails, make sure to increase the delay\n\n        HTML.getElementById(""txtPassportNumber"").Value = ""J2659558""\n        HTML.getElementById(""Nationality"").Focus\n        For Each post In HTML.getElementsByClassName(""ng-scope"")\n            With post.getElementsByClassName(""ng-binding"")\n                For I = 0 To .Length - 1\n                    If .item(I).innerText = ""INDIA"" Then \'\'you can change the country name here to select from dropdown\n                        .item(I).Click\n                        Exit For\n                    End If\n                Next I\n            End With\n        Next post\n        HTML.getElementById(""txtBirthDate"").Value = ""24/02/1990""\n        HTML.querySelector(""button[onclick=\'SearchEmployee()\']"").Click\n    End With\nEnd Sub\n\nReference to add to the library:\nMicrosoft Internet Controls\nMicrosoft HTML Object library\n\nWhen you execute the above script, it should give you the desired result.\nAnother way would be to go for using xmlhttp request which is way faster than IE. You need to pass the query string parameter arguments as dictionary through ""POST"" request. If you want to change the parameter as in, birth date,passportor nationality just do it in the QueryString. Btw, the Nationality parameter should be filled in with value instead of name as in, 100 for INDIA.  This is how your script should look like:\nSub Get_Data()\n    Dim res As Variant, QueryString$, ID$, Name$\n\n    QueryString = ""{""""PersonPassportNumber"""":""""J2659558"""",""""PersonNationality"""":""""100"""",""""PersonBirthDate"""":""""24/02/1990""""}""\n\n    With New XMLHTTP\n        .Open ""POST"", ""https://eservices.mol.gov.ae/SmartTasheel/Dashboard/GetEmployees"", False\n        .setRequestHeader ""User-Agent"", ""Mozilla/5.0""\n        .setRequestHeader ""Content-Type"", ""application/json""\n        .send QueryString\n        res = .responseText\n    End With\n\n    ID = Split(Split(Split(res, ""Employees"""":"")(1), ""ID"""":"""""")(1), """""","")(0)\n    Name = Split(Split(Split(res, ""Employees"""":"")(1), ""OtherData2"""":"""""")(1), """"""}"")(0)\n\n    [A1] = ID: [B1] = Name\nEnd Sub\n\nReference to add to the library:\nMicrosoft XML, V6.0\n\nRunning the above script, you should get the NAME and ID of your required search.\n']"
can't convert webbot script to an executable,"
I am trying to convert a python script which uses the webbot library for web automation.
As I tried to convert my running Python (3.6.5) script to an .exe file using pyinstaller I was getting an error that the path of the webbot module could not be found.
In order to overcome this problem I tried to specify the path of the module in the spec file, without success. An easier workaround suggests copying the downloaded folder webbot in the same folder where the .exe file is.
Its a very handy tool to use , i don't wanna ditch it .
",230,"
            0
        ","['\nIn order for this to work you should not convert it as one file like this\npyinstaller --onefile file.py\n\nbut like this\npyinstaller file.py\n\nAfter doing this the .exe could be launched without any problems.\nAn other error was coming because of trying to import webbot in my script. Probably this is a noob mistake, but one has to:\nfrom webbot import Browser\n\n']"
Selecting value from a dropdown list on a webpage using vba,"
On this site I am able to select the country and language from dropdown menu but when I click on ""Complete new application form"" button. It says fields are empty.
Any help would be appreciated.
Sub Test()

strURL = ""https://visa.kdmid.ru/PetitionChoice.aspx""

  With ie
    .Visible = True
    .navigate strURL

    While .Busy
        DoEvents
    Wend

    Set html = .document

    'Country where you will apply for visa.
    Set ctY = html.getElementById(""ctl00$phBody$Country"")
    For i = 1 To ctY.Options.Length
        If ctY.Options(i).Text = ""NETHERLANDS"" Then
            ctY.selectedIndex = i
            Exit For
        End If
    Next i

    'Select Language
    Set lnG = html.getElementById(""ctl00$phBody$ddlLanguage"")
    For i = 1 To lnG.Options.Length
        If lnG.Options(i).Text = ""ENGLISH"" Then
            lnG.selectedIndex = i
            Exit For
        End If
    Next i

    'Click I have read instructions check box
    html.getElementById(""ctl00$phBody$cbConfirm"").Click


    'Click apply button
    Set btnGo = html.forms(0).all(""ctl00$phBody$btnNewApplication"") 
    btnGo.Click

  End With

  End Sub

",3k,"
            0
        ","['\nSo you are on the right track but if you look at the HTML of the site there are actually two elements with the country selection- you got the first one, \'ctl00_phBody_Country\', but this is actually just the drop down, and the actual selected value is stored in \'ctl00_phBody_cddCountry_ClientState\'... the language section has similar structure. Lastly the accepted value is not just the country name you see in the drop down, it is actually a combination of a country code from the drop down and the country name....\nSee below for sample code:\nPublic Sub Test()\nDim IE As InternetExplorer\nDim HTMLDoc As HTMLDocument\n\nDim countryStr As String\nDim countryObj As HTMLObjectElement\nDim countryCodes As IHTMLElementCollection\nDim codeCounter As Long\nDim languageStr As String\nDim languageObj As HTMLObjectElement\nDim languageCodes As IHTMLElementCollection\n\ncountryStr = ""Netherlands""\nlanguageStr = ""English""\n\nSet IE = New InternetExplorer\n\nWith IE\n    .Visible = False\n    .Navigate ""https://visa.kdmid.ru/PetitionChoice.aspx?AspxAutoDetectCookieSupport=1""\n    While .Busy Or .ReadyState <> READYSTATE_COMPLETE: Wend\n    Set HTMLDoc = IE.document\nEnd With\n\nSet countryObj = HTMLDoc.getElementById(""ctl00_phBody_cddCountry_ClientState"")\nSet countryCodes = HTMLDoc.getElementById(""ctl00_phBody_Country"").getElementsByTagName(""option"")\nFor codeCounter = 0 To countryCodes.Length - 1\n    If countryCodes(codeCounter).innerText = UCase(countryStr) Then\n        countryObj.Value = countryCodes(codeCounter).Value & "":::"" & countryCodes(codeCounter).innerText & "":::""\n        While IE.Busy Or IE.ReadyState <> READYSTATE_COMPLETE: Wend\n        Exit For\n    End If\nNext\n\nSet languageObj = HTMLDoc.getElementById(""ctl00_phBody_cddLanguage_ClientState"")\nSet languageCodes = HTMLDoc.getElementById(""ctl00_phBody_ddlLanguage"").getElementsByTagName(""option"")\nFor codeCounter = 0 To languageCodes.Length - 1\n    If languageCodes(codeCounter).innerText = UCase(languageStr) Then\n        languageObj.Value = languageCodes(codeCounter).Value & "":::"" & languageCodes(codeCounter).innerText & "":::""\n        While IE.Busy Or IE.ReadyState <> READYSTATE_COMPLETE: Wend\n        Exit For\n    End If\nNext\n\nHTMLDoc.getElementById(""ctl00$phBody$cbConfirm"").Click\nWhile IE.Busy Or IE.ReadyState <> READYSTATE_COMPLETE: Wend\nHTMLDoc.getElementById(""ctl00_phBody_btnNewApplication"").Click      \'Launch Form\n\nIE.Quit\nSet IE = Nothing\nEnd Sub\n\n']"
